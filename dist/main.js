(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var d=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/d,this.crossRaw(i-e,r-n,e-o,n-s)/d)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return e.fromVectors=function(t,n){var i=new e;return i.v1=t,i.v2=n,i},Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(t,e){this.type=t,this.depth=e},i=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.edgeCount=function(){return this.vertices.length>1?this.vertices.length:0},t.prototype.edges=function(){var t=this;return this.vertices.length>1?this.vertices.map((function(n,i){return e.fromVectors(t.vertices[i],t.vertices[i<t.vertices.length-1?i+1:0])})):[]},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),r=function(){function t(t,e,n){this.coordinates=t,this.lithology=e,this.polygon=n}return t.prototype.depth=function(){return this.lithology.reduce((function(t,e){return t+e.depth}),0)},t.prototype.quantities=function(){var t=new Map;if(this.polygon){var e=this.polygon.area();this.lithology.forEach((function(n){var i=t.get(n.type)||0;t.set(n.type,i+Math.round(e*n.depth))}))}return t},t}(),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},s=20,a=function(){function a(n){var r=this;this.renderer=n,this.axes=[],this.kutch=new e(50,200,150,200),this.contour=new i,this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.quantities=new Map,this.mode=0,document.addEventListener("keyup",(function(t){"s"===t.key?(r.mode=3,document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-surveys").classList.add("selected")):"c"===t.key?(r.mode=0,r.renderer.clearSurvey(),document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-contour").classList.add("selected")):"k"===t.key?(r.mode=1,r.renderer.clearSurvey(),document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-kutch").classList.add("selected")):"a"===t.key?(r.mode=2,r.renderer.clearSurvey(),document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-axes").classList.add("selected")):"Escape"===t.key&&r.renderer.clearSurvey()})),document.querySelector("#edit-contour").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=0,r.renderer.clearSurvey()})),document.querySelector("#edit-axes").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=2,r.renderer.clearSurvey()})),document.querySelector("#edit-surveys").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=3})),document.querySelector("#edit-kutch").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=1})),this.updateQuantities(),this.renderer.drawKutch(this.kutch);var o,a,u,d,c=-1,l=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);2===r.mode||0===r.mode?-1===(c=r.nearestLineIndexFrom(i,s,2===r.mode?r.axes:r.contour.edges()))?2===r.mode?(r.addLine(new e(i.x,i.y,i.x,i.y)),c=r.lines.length-1,o=r.lines[c].v2):0===r.mode&&(r.addContour(new e(i.x,i.y,i.x,i.y)),c=0,o=r.lines[c].v1):(2===r.mode&&(c+=r.contour.edgeCount()),i.sub(r.lines[c].v1).len()<s?o=r.lines[c].v1:i.sub(r.lines[c].v2).len()<s&&(o=r.lines[c].v2)):1===r.mode?i.sub(r.kutch.v1).len()<s?o=r.kutch.v1:i.sub(r.kutch.v2).len()<s&&(o=r.kutch.v2):3===r.mode&&-1===(l=r.nearestSurveyIndexFrom(i,s))&&(r.addSurvey(i),l=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(2===r.mode||0===r.mode||1===r.mode?(c=-1,o=null):3===r.mode&&(-1!==l?(a=r.surveys[l],r.renderer.drawSurvey(a)):a=null,l=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button)if(2===r.mode||0===r.mode)(o||-1!==c)&&(o?(o.x+=e.movementX,o.y+=e.movementY):r.lines[c].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(c),2===r.mode?r.renderer.drawLine(r.axes[c-r.contour.edgeCount()],(c-r.contour.edgeCount()).toString()):(c===r.contour.edgeCount()-1?(r.updateIntersectionTimes(c-1),r.updateIntersectionTimes(0)):0===c?(r.updateIntersectionTimes(r.contour.edgeCount()-1),r.updateIntersectionTimes(1)):(r.updateIntersectionTimes(c-1),r.updateIntersectionTimes(c+1)),r.renderer.drawContour(r.contour)));else if(1===r.mode)o&&(o.x+=e.movementX,o.y+=e.movementY,r.renderer.drawKutch(r.kutch),r.updateQuantities(),r.surveys.forEach((function(t){return r.updateSurvey(t)})));else if(3===r.mode){-1!==l&&(r.surveys[l].coordinates.x+=e.movementX,r.surveys[l].coordinates.y+=e.movementY,r.updateSurvey(r.surveys[l]));for(var n=new t(e.clientX,e.clientY),i=!1,s=u,a=0,d=r.polygons;a<d.length;a++){var h=d[a];if(h.contains(n)){h!==u&&(r.renderer.drawPolygon(h,"red"),u=h),i=!0;break}}i||(u=null),s&&s!==u&&r.renderer.drawPolygon(s,"white")}})),this.renderer.setSidebarMouseDownHandler((function(e){if(!e.button&&a)for(var n=new t(e.offsetX,e.offsetY),r=new t(150,8),o=0,s=a.lithology;o<s.length;o++){var u=s[o],c=new i([r.add(new t(-25,0)),r.add(new t(25,0)),r.add(new t(25,u.depth)),r.add(new t(-25,u.depth))]);if(r.y+=u.depth,c.contains(n)){d=u;break}}})),this.renderer.setSidebarMouseUpHandler((function(t){t.button||(d=null)})),this.renderer.setSidebarMouseMoveHandler((function(t){t.button||d&&(d.depth+=t.movementY,r.renderer.drawSurvey(a),r.updateQuantities())})),this.renderer.lithoChangeHandler=function(){r.updateQuantities()}}return Object.defineProperty(a.prototype,"lines",{get:function(){return this.contour.edges().concat(this.axes)},enumerable:!1,configurable:!0}),Object.defineProperty(a.prototype,"scale",{get:function(){return this.kutch.len()/10},enumerable:!1,configurable:!0}),a.prototype.nearestLineIndexFrom=function(t,e,n){void 0===e&&(e=1/0),void 0===n&&(n=this.lines);for(var i,r=-1,o=1/0,s=0;s<n.length;s++)(i=n[s].nearestTo(t).sub(t).len())<e&&i<o&&(o=i,r=s);return r},a.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].coordinates.sub(t).len())<e&&n<r&&(r=n,i=o);return i},a.prototype.addSurvey=function(t){for(var e,i=0,o=this.polygons;i<o.length;i++){var s=o[i];if(s.contains(t)){e=s;break}}var a=new r(t,[new n("non identifié",50),new n("non identifié",50),new n("non identifié",50)],e);this.surveys.push(a),this.renderer.drawPoint(t,e?(e.area()/Math.pow(this.scale,2)).toFixed(2)+" m2":""),this.updateQuantities()},a.prototype.updateSurvey=function(t){t.polygon=null;for(var e=0,n=this.polygons;e<n.length;e++){var i=n[e];if(i.contains(t.coordinates)){t.polygon=i;break}}this.renderer.drawPoint(t.coordinates,t.polygon?(t.polygon.area()/Math.pow(this.scale,2)).toFixed(2)+" m2":""),this.updateQuantities()},a.prototype.updateQuantities=function(){var t=this;this.quantities.clear(),this.surveys.forEach((function(e){e.quantities().forEach((function(e,n){t.quantities.set(n,(t.quantities.get(n)||0)+e)}))})),this.renderer.drawQuantities(this.quantities,this.scale)},a.prototype.initIntersectionData=function(e,n,i,r,o){void 0===e&&(e=this.lines.length),void 0===n&&(n=this.lines.length),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s=[],a=[],u=0;u<n;u++)i[u].splice(e,0,NaN),r.push(new t),o[u].splice(e,0,r.length-1),s.push(NaN),a.push(r.length-1);s.splice(e,0,NaN),a.splice(e,0,-1),i.splice(e,0,s),o.splice(e,0,a)},a.prototype.addLine=function(t){var e=this.lines.length;this.initIntersectionData(e,e),this.axes.push(t),this.renderer.drawLine(t,e.toString()),this.updateIntersectionTimes(e)},a.prototype.addContour=function(t){var e=this.contour.edgeCount(),n=e+this.axes.length;this.initIntersectionData(0,n++),this.initIntersectionData(0,n++),this.contour.vertices.splice(0,0,t.v1,t.v2),this.renderer.drawContour(this.contour);var i=this.lines;0===e?(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i)):(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i,!0),this.updateIntersectionTimes(n-1,i))},a.prototype.updateIntersectionTimes=function(t,e,n,i,r,o){void 0===e&&(e=this.lines),void 0===n&&(n=!1),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s,a=e[t],u=0;u<e.length;u++)u!==t&&(s=e[u].intersectionTimesWith(a),i[u][t]=s.x,i[t][u]=s.y,u<t?r[o[u][t]]=e[u].pointAt(s.x):r[o[t][u]]=e[u].pointAt(s.x));n||this.renderIntersections()},a.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new i(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},a.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},a.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},a.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},a.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},a.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){var i=this;void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var r=this.contour.edgeCount(),o=e.map((function(t,o){return t.map((function(t,e){return e})).filter((function(s){return!isNaN(t[s])&&0<=t[s]&&t[s]<=1&&!isNaN(e[s][o])&&0<=e[s][o]&&e[s][o]<=1&&(o<r||s<r||i.contour.contains(i.intersections[n[o][s]]))})).sort((function(e,n){return t[e]-t[n]}))})),s=[],a=function(e){for(var i=0;i<o[e].length;i++){var r=o[e][i];if(e<r){var a=n[e][o[e][i]],d=i-1,c=i+1,l=o[r].findIndex((function(t){return t===e})),h=u.testSide(t[e].v1,t[e].v2,t[r].v1),p=h?l-1:l+1,v=h?l+1:l-1,y=0<i?n[e][o[e][d]]:null,f=i<o[e].length-1?n[e][o[e][c]]:null,m=-1<p&&p<o[r].length?n[r][o[r][p]]:null,g=-1<v&&v<o[r].length?n[r][o[r][v]]:null,w=u.buildPartialsFromIntersectionIndexes(a,[y,g,f,m]);s.push.apply(s,w)}}},u=this,d=0;d<o.length;d++)a(d);return s},a.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],r=0;r<t.length;){for(var s=0;s<t.length;s++)if(r!==s&&this.partialsOverlaps(t[r],t[s])){(e=t[r]).splice.apply(e,o([-2,2],t[s])),t.splice(s,1),s<r&&r--,(n=this.partialsOverlaps(t[r],t[r])||this.partialsMeet(t[r],t[r]))>0&&(t[r].splice(0,n),i.push(t[r]),t.splice(r,1)),r=-1;break}r++}return i},a}(),u=document.createElementNS("http://www.w3.org/2000/svg","g");u.setAttribute("stroke","black"),u.setAttribute("stroke-width","0.4px");var d=document.createElementNS("http://www.w3.org/2000/svg","line");d.setAttribute("stroke-dasharray","10, 4, 1, 4");var c=document.createElementNS("http://www.w3.org/2000/svg","path");c.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),c.setAttribute("fill","white");var l=document.createElementNS("http://www.w3.org/2000/svg","text");l.setAttribute("text-anchor","middle"),l.setAttribute("alignment-baseline","central"),l.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),l.setAttribute("font-weight","100"),l.setAttribute("font-size","14px"),u.appendChild(d),u.appendChild(c),u.appendChild(c.cloneNode()),u.appendChild(l),u.appendChild(l.cloneNode());var h=document.createElementNS("http://www.w3.org/2000/svg","g");h.setAttribute("stroke","black"),h.setAttribute("stroke-width","0.4px");var p=document.createElementNS("http://www.w3.org/2000/svg","circle");p.setAttribute("fill","green"),p.setAttribute("r","3");var v=document.createElementNS("http://www.w3.org/2000/svg","text");v.setAttribute("transform","translate(0, 10)"),v.setAttribute("text-anchor","middle"),v.setAttribute("alignment-baseline","hanging"),v.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),v.setAttribute("font-weight","100"),v.setAttribute("font-size","14px"),v.setAttribute("font-style","italic"),h.appendChild(p),h.appendChild(v);var y=document.createElementNS("http://www.w3.org/2000/svg","path");y.setAttribute("fill","green"),y.setAttribute("fill-opacity","0.7"),y.setAttribute("stroke-width","0.8px"),y.setAttribute("stroke-dasharray","5, 2"),y.setAttribute("stroke","black");var f=document.createElementNS("http://www.w3.org/2000/svg","g");f.setAttribute("transform","translate(150, 8)");var m=document.createElementNS("http://www.w3.org/2000/svg","path");m.setAttribute("fill","url(#earth-hatch)"),m.setAttribute("stroke-width","0");var g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("fill-opacity","0"),g.setAttribute("stroke","black"),g.setAttribute("stroke-width","0.8px");var w=document.createElementNS("http://www.w3.org/2000/svg","g");f.appendChild(w),f.appendChild(m),f.appendChild(g);var b=document.createElementNS("http://www.w3.org/2000/svg","g"),x=document.createElementNS("http://www.w3.org/2000/svg","rect"),A=document.createElementNS("http://www.w3.org/2000/svg","line");A.setAttribute("x1","-50"),A.setAttribute("y1","0"),A.setAttribute("x2","130"),A.setAttribute("y2","0"),A.setAttribute("stroke","black"),A.setAttribute("stroke-width","0.8px"),A.setAttribute("stroke-dasharray","5, 2");var C=document.createElementNS("http://www.w3.org/2000/svg","text");C.setAttribute("x","50"),b.appendChild(x),b.appendChild(A),b.appendChild(C);var S=document.createElementNS("http://www.w3.org/2000/svg","pattern");S.id="earth-hatch",S.setAttribute("patternUnits","userSpaceOnUse"),S.setAttribute("width","25"),S.setAttribute("height","25"),S.setAttribute("stroke","#222d32"),S.setAttribute("stroke-width","0.4px");for(var M=document.createElementNS("http://www.w3.org/2000/svg","path"),N=0,F=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];N<F.length;N++){var E=F[N];M.setAttribute("d",E),S.appendChild(M),M=M.cloneNode()}var k=document.createElement("select");k.style.position="absolute",k.style.transform="translateY(-49%)",k.style.left="8px";for(var L=document.createElement("option"),I=["non identifié","argile","calcaire"],P=new Map([[I[0],"#fde312"],[I[1],"#289fde"],[I[2],"#abfe12"]]),q=0,T=I;q<T.length;q++){var H=T[q];L.innerHTML=H,L.setAttribute("value",H),k.appendChild(L),L=L.cloneNode()}var R=document.createElement("p");R.style.borderLeftWidth="14px",R.style.fontFamily='consolas, "Liberation Mono", courier, monospace',R.style.fontWeight="100",R.style.fontSize="14px",R.style.height="14px",R.style.paddingLeft="8px";var B=document.createElementNS("http://www.w3.org/2000/svg","path");B.setAttribute("fill","#0005");var G=document.createElementNS("http://www.w3.org/2000/svg","g"),D=document.createElementNS("http://www.w3.org/2000/svg","rect");D.setAttribute("stroke","black"),D.setAttribute("stroke-width","0.8px");for(var O=0,Y=[[0,0,10,4,"black"],[10,0,10,4,"white"],[20,0,10,4,"black"],[30,0,10,4,"white"],[40,0,10,4,"black"],[50,0,50,4,"white"],[0,5,10,4,"white"],[10,5,10,4,"black"],[20,5,10,4,"white"],[30,5,10,4,"black"],[40,5,10,4,"white"],[50,5,50,4,"black"]];O<Y.length;O++){var j=Y[O],Q=j[0],z=j[1],X=j[2],_=j[3],K=j[4];D.setAttribute("x",Q.toFixed()),D.setAttribute("y",z.toFixed()),D.setAttribute("width",X.toFixed()),D.setAttribute("height",_.toFixed()),D.setAttribute("fill",K),G.appendChild(D),D=D.cloneNode()}new a(new(function(){function t(){this.selectContainer=document.createElement("div"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svgContourPath=B.cloneNode(),this.svgKutchG=G.cloneNode(!0),this.svg=document.querySelector(".content"),this.sidebarDiv=document.querySelector(".sidebar"),this.sidebarSvg=document.querySelector(".sidebar > svg"),this.svg.prepend(this.svgContourPath),this.svg.appendChild(S),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.svg.appendChild(this.svgKutchG),this.quantitiesContainer=document.querySelector(".quantities"),this.sidebarSvg.appendChild(this.surveyContainer),this.sidebarDiv.appendChild(this.selectContainer)}return t.prototype._setEventHandler=function(t,e,n){this.handlers[e]&&t.removeEventListener(e,this.handlers[e]),this.handlers[e]=n,t.addEventListener(e,this.handlers[e])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler(this.svg,"mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler(this.svg,"mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler(this.svg,"mousemove",t)},t.prototype.setSidebarMouseDownHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousedown",t)},t.prototype.setSidebarMouseUpHandler=function(t){this._setEventHandler(this.sidebarSvg,"mouseup",t)},t.prototype.setSidebarMouseMoveHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=u.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],s=n.children[3],a=n.children[4],d=t.x1.toFixed(),c=t.y1.toFixed(),l=t.x2.toFixed(),h=t.y2.toFixed();i.setAttribute("x1",d),i.setAttribute("y1",c),i.setAttribute("x2",l),i.setAttribute("y2",h),s.innerHTML=e,a.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+d+", "+c+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+l+", "+h+") rotate("+(isNaN(p)?0:180+p)+")"),s.setAttribute("transform","translate("+(isNaN(v.x)?d:v.x.toFixed())+", "+(isNaN(v.y)?c:v.y.toFixed())+")"),a.setAttribute("transform","translate("+(isNaN(y.x)?l:y.x.toFixed())+", "+(isNaN(y.y)?h:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=h.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=y.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.drawContour=function(t){this.svgContourPath.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z")},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e=this;this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer);var n="M "+(-142).toFixed()+", 0 h "+117..toFixed()+" v "+t.depth().toFixed()+" h "+50..toFixed()+" v "+-t.depth().toFixed()+" h "+117..toFixed(),i=n+" v "+10..toFixed()+" h "+(-107).toFixed()+" v "+t.depth().toFixed()+" h "+(-70).toFixed()+" v "+-t.depth().toFixed()+" h "+(-107).toFixed()+" Z",r=f.cloneNode(!0),o=r.children[0],s=r.children[1],a=r.children[2];s.setAttribute("d",i),a.setAttribute("d",n);for(var u=0,d=function(n){var i=b.cloneNode(!0),r=i.children[0],s=i.children[1],a=i.children[2],d=(u+t.lithology[n].depth)/50;s.setAttribute("transform","translate(0, "+(50*d).toFixed()+")"),a.setAttribute("y",(50*d-4).toFixed()),a.innerHTML="- "+d.toFixed(2).padStart(5,"0")+" NGF",r.setAttribute("x",(-25).toFixed()),r.setAttribute("y",u.toFixed()),r.setAttribute("width",50..toFixed()),r.setAttribute("height",t.lithology[n].depth.toFixed()),r.setAttribute("fill",P.get(t.lithology[n].type)),o.appendChild(i);var l=k.cloneNode(!0);l.querySelector('option[value="'+t.lithology[n].type+'"]').setAttribute("selected","selected");var h=u;l.addEventListener("change",(function(i){t.lithology[n].type=l.value,r.setAttribute("fill",P.get(l.value));var o=(h+t.lithology[n].depth)/50;s.setAttribute("transform","translate(0, "+(50*o).toFixed()+")"),a.setAttribute("y",(50*o-4).toFixed()),a.innerHTML="- "+o.toFixed(2).padStart(5,"0")+" NGF",e.lithoChangeHandler()})),l.style.top=(u+8+t.lithology[n].depth/2).toFixed()+"px",c.selectContainer.appendChild(l),u+=t.lithology[n].depth},c=this,l=0;l<t.lithology.length;l++)d(l);this.surveyContainer.appendChild(r),this.sidebarDiv.classList.add("visible")},t.prototype.clearSurvey=function(){this.sidebarDiv.classList.remove("visible"),this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer)},t.prototype.drawQuantities=function(t,e){var n=this;this.clearContainer(this.quantitiesContainer);var i=R.cloneNode();i.innerHTML="Volumes :",i.style.fontStyle="bold",i.style.textDecoration="underline",this.quantitiesContainer.appendChild(i),t.forEach((function(t,i){var r=R.cloneNode();r.innerHTML=i+" ("+(t/(50*Math.pow(e,2))).toFixed(2)+" m³)",r.style.borderLeft="8px solid "+P.get(i),n.quantitiesContainer.appendChild(r)}))},t.prototype.drawKutch=function(t){var e=180*t.v2.sub(t.v1).angle()/Math.PI;this.svgKutchG.setAttribute("transform","translate("+t.v1.x.toFixed()+", "+t.v1.y.toFixed()+") rotate("+(isNaN(e)?0:e)+") scale("+t.len()/100+", 1)")},t}()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,