(()=>{"use strict";var t,e=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.lenRaw=function(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,s,o,u,c){var a=this.crossRaw(i-e,r-n,u-s,c-o);return new t(this.crossRaw(u-s,c-o,e-s,n-o)/a,this.crossRaw(i-e,r-n,e-s,n-o)/a)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,s,o,u){var c=this.intersectionTimesRaw(t,e,n,i,r,s,o,u);if(c)return c.y=e+(i-e)*c.x,c.x=t+(n-t)*c.x,c},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t}(),n=function(){function t(t,n,i,r){this.v1=new e(t,n),this.v2=new e(i,r)}return Object.defineProperty(t.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(t.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),t.prototype.len=function(){return this.v2.sub(this.v1).len()},t.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},t.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},t.prototype.intersectionWith=function(t){return this.v1.intersection(this.v2,t.v1,t.v2)},t}(),i=function(){function t(t){this.svg=t,this.intersections=new Map}return t.prototype.addLine=function(t,e){for(var n,i=0;i<t.length-1;i++)for(var r=i+1;r<t.length;r++)if((t[i]===e||t[r]===e)&&(n=t[i].intersectionWith(t[r]))){var s=this.intersections.get(t[i])||new Map;s.has(t[r])&&this.erase(s.get(t[r])),s.set(t[r],this.draw(n))}},t.prototype.removeLine=function(t){var e=this;this.intersections.forEach((function(n,i){i===t?n.forEach((function(t){return e.erase(t)})):n.has(t)&&(e.erase(n.get(t)),n.delete(t))})),this.intersections.delete(t)},t.prototype.draw=function(t){var e=document.createElementNS("http://www.w3.org/2000/svg","circle");return e.setAttribute("fill","green"),e.setAttribute("r","3"),e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.svg.appendChild(e),e},t.prototype.erase=function(t){return this.svg.removeChild(t)},t}(),r=function(){function t(t){this.svg=t,this.svgLines=new Map,this.startSvgCircles=new Map,this.endSvgCircles=new Map,this.lines=new Map,this.startCircles=new Map,this.endCircles=new Map,this.interRenderer=new i(this.svg)}return t.prototype.isDragging=function(){return!!this.draggedCircle},t.prototype.draw=function(t,e){var n,i,r;this.svgLines.has(e)?(n=this.svgLines.get(e),i=this.startSvgCircles.get(e),r=this.endSvgCircles.get(e)):((n=document.createElementNS("http://www.w3.org/2000/svg","line")).setAttribute("stroke","black"),this.svgLines.set(e,n),this.lines.set(n,e),this.svg.appendChild(n),(i=document.createElementNS("http://www.w3.org/2000/svg","circle")).setAttribute("fill","red"),i.setAttribute("r","5"),this.startSvgCircles.set(e,i),this.startCircles.set(i,e),this.svg.appendChild(i),(r=document.createElementNS("http://www.w3.org/2000/svg","circle")).setAttribute("fill","blue"),r.setAttribute("r","5"),this.endSvgCircles.set(e,r),this.endCircles.set(r,e),this.svg.appendChild(r)),n.setAttribute("x1",e.x1.toFixed()),n.setAttribute("y1",e.y1.toFixed()),n.setAttribute("x2",e.x2.toFixed()),n.setAttribute("y2",e.y2.toFixed()),i.setAttribute("cx",e.before(10).x.toFixed()),i.setAttribute("cy",e.before(10).y.toFixed()),r.setAttribute("cx",e.after(10).x.toFixed()),r.setAttribute("cy",e.after(10).y.toFixed()),this.interRenderer.addLine(t,e)},t.prototype.drag=function(t){this.draggedCircle=t},t.prototype.moveTo=function(t,e,i){if(this.startCircles.has(this.draggedCircle)){var r=this.startCircles.get(this.draggedCircle),s=new n(e,i,r.x2,r.y2);r.v1=s.before(-10),this.draw(t,r)}else this.endCircles.has(this.draggedCircle)&&(r=this.endCircles.get(this.draggedCircle),s=new n(r.x1,r.y1,e,i),r.v2=s.after(-10),this.draw(t,r))},t.prototype.drop=function(){this.draggedCircle=null},t}(),s=document.querySelector("body"),o=document.createElementNS("http://www.w3.org/2000/svg","svg"),u=[],c=null,a=null,h=new r(o);o.addEventListener("mousedown",(function(e){(t=document.elementFromPoint(e.clientX,e.clientY))&&t instanceof SVGCircleElement&&h.drag(t)})),o.addEventListener("mouseup",(function(t){if(h.isDragging())h.drop();else if(null===c&&null===a)c=t.clientX,a=t.clientY;else{var e=new n(c,a,t.clientX,t.clientY);c=null,a=null,u.push(e),h.draw(u,e)}})),o.addEventListener("mousemove",(function(t){h.moveTo(u,t.clientX,t.clientY)})),s.appendChild(o)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL2xpbmUudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbnRlclJlbmRlcmVyLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvbGluZVJlbmRlcmVyLnRzIl0sIm5hbWVzIjpbImVsZW1lbnRBdCIsIngiLCJ5IiwiZG90UmF3IiwieDEiLCJ5MSIsIngyIiwieTIiLCJkb3QiLCJ1IiwidiIsInRoaXMiLCJvdGhlciIsIlZlY3RvcjIiLCJjcm9zc1JhdyIsImNyb3NzIiwibGVuUmF3IiwiTWF0aCIsInNxcnQiLCJwb3ciLCJsZW4iLCJub3JtYWxpemVSYXciLCJieSIsImNvZWYiLCJtdWxSYXciLCJub3JtYWxpemUiLCJlcXVhbHNSYXciLCJlcXVhbHMiLCJhZGRSYXciLCJhZGQiLCJzdWJSYXciLCJzdWIiLCJtdWwiLCJpbnRlcnNlY3Rpb25UaW1lc1JhdyIsImZ4IiwiZnkiLCJ0eCIsInR5Iiwic3giLCJzeSIsImV4IiwiZXkiLCJkZXQiLCJpbnRlcnNlY3Rpb25UaW1lcyIsImZyb20iLCJ0byIsInN0YXJ0IiwiZW5kIiwiaW50ZXJzZWN0aW9uUmF3IiwidGltZXMiLCJpbnRlcnNlY3Rpb24iLCJ2MSIsInYyIiwiYmVmb3JlIiwidCIsImFmdGVyIiwiaW50ZXJzZWN0aW9uV2l0aCIsInN2ZyIsImludGVyc2VjdGlvbnMiLCJNYXAiLCJhZGRMaW5lIiwibGluZXMiLCJsaW5lIiwiaW50ZXIiLCJpIiwibGVuZ3RoIiwiaiIsImdldCIsImhhcyIsImVyYXNlIiwic2V0IiwiZHJhdyIsInJlbW92ZUxpbmUiLCJmb3JFYWNoIiwibCIsImRlbGV0ZSIsInN2Z0NpcmNsZSIsImRvY3VtZW50IiwiY3JlYXRlRWxlbWVudE5TIiwic2V0QXR0cmlidXRlIiwidG9GaXhlZCIsImFwcGVuZENoaWxkIiwic3ZnQ2lyY2xlRWxlbWVudCIsInJlbW92ZUNoaWxkIiwic3ZnTGluZXMiLCJzdGFydFN2Z0NpcmNsZXMiLCJlbmRTdmdDaXJjbGVzIiwic3RhcnRDaXJjbGVzIiwiZW5kQ2lyY2xlcyIsImludGVyUmVuZGVyZXIiLCJJbnRlclJlbmRlcmVyIiwiaXNEcmFnZ2luZyIsImRyYWdnZWRDaXJjbGUiLCJzdmdMaW5lIiwic3RhcnRTdmdDaXJjbGUiLCJlbmRTdmdDaXJjbGUiLCJkcmFnIiwiY2lyY2xlIiwibW92ZVRvIiwibmV3TGluZSIsIkxpbmUiLCJkcm9wIiwiYm9keSIsInF1ZXJ5U2VsZWN0b3IiLCJsaW5lUmVuZGVyZXIiLCJMaW5lUmVuZGVyZXIiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJlbGVtZW50RnJvbVBvaW50IiwiY2xpZW50WCIsImNsaWVudFkiLCJTVkdDaXJjbGVFbGVtZW50IiwicHVzaCJdLCJtYXBwaW5ncyI6Im1CQUFBLElDWUlBLEVEWkosYUFDRSxXQUFtQkMsRUFBY0MsUUFBZCxJQUFBRCxNQUFBLFFBQWMsSUFBQUMsTUFBQSxHQUFkLEtBQUFELElBQWMsS0FBQUMsSUE2R25DLE9BNUdTLEVBQUFDLE9BQVAsU0FBY0MsRUFBWUMsRUFBWUMsRUFBWUMsR0FDaEQsT0FBT0gsRUFBS0UsRUFBS0QsRUFBS0UsR0FFakIsRUFBQUMsSUFBUCxTQUFXQyxFQUFZQyxHQUNyQixPQUFPQyxLQUFLUixPQUFPTSxFQUFFUixFQUFHUSxFQUFFUCxFQUFHUSxFQUFFVCxFQUFHUyxFQUFFUixJQUV0QyxZQUFBTSxJQUFBLFNBQUlJLEdBQ0YsT0FBT0MsRUFBUUwsSUFBSUcsS0FBTUMsSUFFcEIsRUFBQUUsU0FBUCxTQUFnQlYsRUFBWUMsRUFBWUMsRUFBWUMsR0FDbEQsT0FBT0gsRUFBS0csRUFBS0QsRUFBS0QsR0FFakIsRUFBQVUsTUFBUCxTQUFhTixFQUFZQyxHQUN2QixPQUFPQyxLQUFLRyxTQUFTTCxFQUFFUixFQUFHUSxFQUFFUCxFQUFHUSxFQUFFVCxFQUFHUyxFQUFF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WTZFLFNBQVMrQixpQkFBaUJELEVBQU1FLFFBQVNGLEVBQU1HLFdBQzVEOUcsYUFBcUIrRyxrQkFFckJQLEVBQWFSLEtBQUtoRyxNQUl0QnlELEVBQUlpRCxpQkFBaUIsV0FBVyxTQUFBQyxHQUM5QixHQUFJSCxFQUFhYixhQUNmYSxFQUFhSCxZQUViLEdBQVcsT0FBUGpHLEdBQXNCLE9BQVBDLEVBRWpCRCxFQUFLdUcsRUFBTUUsUUFDWHhHLEVBQUtzRyxFQUFNRyxZQUNOLENBQ0wsSUFBTWhELEVBQU8sSUFBSXNDLEVBQUtoRyxFQUFJQyxFQUFJc0csRUFBTUUsUUFBU0YsRUFBTUcsU0FDbkQxRyxFQUFLLEtBQ0xDLEVBQUssS0FDTHdELEVBQU1tRCxLQUFLbEQsR0FDWDBDLEVBQWFqQyxLQUFLVixFQUFPQyxPQUsvQkwsRUFBSWlELGlCQUFpQixhQUFhLFNBQUFDLEdBQ2hDSCxFQUFhTixPQUFPckMsRUFBTzhDLEVBQU1FLFFBQVNGLEVBQU1HLFlBR2xEUixFQUFLckIsWUFBWXhCLEkiLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcbiAgY29uc3RydWN0b3IocHVibGljIHggPSAwLCBwdWJsaWMgeSA9IDApIHt9XG4gIHN0YXRpYyBkb3RSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IG51bWJlciB7XG4gICAgcmV0dXJuIHgxICogeDIgKyB5MSAqIHkyO1xuICB9XG4gIHN0YXRpYyBkb3QodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuZG90UmF3KHUueCwgdS55LCB2LngsIHYueSk7XG4gIH1cbiAgZG90KG90aGVyOiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gVmVjdG9yMi5kb3QodGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBjcm9zc1Jhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4geDEgKiB5MiAtIHgyICogeTE7XG4gIH1cbiAgc3RhdGljIGNyb3NzKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLmNyb3NzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XG4gIH1cbiAgY3Jvc3Mob3RoZXI6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiBWZWN0b3IyLmNyb3NzKHRoaXMsIG90aGVyKTtcbiAgfVxuICBzdGF0aWMgbGVuUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gTWF0aC5zcXJ0KE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMikpO1xuICB9XG4gIHN0YXRpYyBsZW4odTogVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMubGVuUmF3KHUueCwgdS55KTtcbiAgfVxuICBsZW4oKTogbnVtYmVyIHtcbiAgICByZXR1cm4gVmVjdG9yMi5sZW4odGhpcyk7XG4gIH1cbiAgc3RhdGljIG5vcm1hbGl6ZVJhdyh4OiBudW1iZXIsIHk6IG51bWJlciwgYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcbiAgICBjb25zdCBjb2VmID0gYnkgLyB0aGlzLmxlblJhdyh4LCB5KTtcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcoeCwgeSwgY29lZik7XG4gIH1cbiAgc3RhdGljIG5vcm1hbGl6ZSh1OiBWZWN0b3IyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVJhdyh1LngsIHUueSwgYnkpO1xuICB9XG4gIG5vcm1hbGl6ZShieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xuICAgIHJldHVybiBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCBieSk7XG4gIH1cbiAgc3RhdGljIGVxdWFsc1Jhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHgxID09PSB4MiAmJiB5MSA9PT0geTI7XG4gIH1cbiAgc3RhdGljIGVxdWFscyh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIHRoaXMuZXF1YWxzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XG4gIH1cbiAgZXF1YWxzKG90aGVyOiBWZWN0b3IyKTogYm9vbGVhbiB7XG4gICAgcmV0dXJuIFZlY3RvcjIuZXF1YWxzKHRoaXMsIG90aGVyKTtcbiAgfVxuICBzdGF0aWMgYWRkUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgKyB4MiwgeTEgKyB5Mik7XG4gIH1cbiAgc3RhdGljIGFkZCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuYWRkUmF3KHUueCwgdS55LCB2LngsIHYueSk7XG4gIH1cbiAgYWRkKG90aGVyOiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIFZlY3RvcjIuYWRkKHRoaXMsIG90aGVyKTtcbiAgfVxuICBzdGF0aWMgc3ViUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgLSB4MiwgeTEgLSB5Mik7XG4gIH1cbiAgc3RhdGljIHN1Yih1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMuc3ViUmF3KHUueCwgdS55LCB2LngsIHYueSk7XG4gIH1cbiAgc3ViKG90aGVyOiBWZWN0b3IyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHRoaXMsIG90aGVyKTtcbiAgfVxuICBzdGF0aWMgbXVsUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHggKiBieSwgeSAqIGJ5KTtcbiAgfVxuICBzdGF0aWMgbXVsKHU6IFZlY3RvcjIsIGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcodS54LCB1LnksIGJ5KTtcbiAgfVxuICBtdWwoYnk6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiBWZWN0b3IyLm11bCh0aGlzLCBieSk7XG4gIH1cbiAgc3RhdGljIGludGVyc2VjdGlvblRpbWVzUmF3KFxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXG4gICAgc3g6IG51bWJlciwgc3k6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlclxuICApOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCBkZXQgPSB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGV4IC0gc3gsIGV5IC0gc3kpO1xuICAgIHJldHVybiBuZXcgVmVjdG9yMihcbiAgICAgIHRoaXMuY3Jvc3NSYXcoZXggLSBzeCwgZXkgLSBzeSwgZnggLSBzeCwgZnkgLSBzeSkgLyBkZXQsXG4gICAgICB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0XG4gICAgKTtcbiAgfVxuICBzdGF0aWMgaW50ZXJzZWN0aW9uVGltZXMoXG4gICAgZnJvbTogVmVjdG9yMiwgdG86IFZlY3RvcjIsIHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XG4gIH1cbiAgaW50ZXJzZWN0aW9uVGltZXModG86IFZlY3RvcjIsIHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjIpOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb25UaW1lcyh0aGlzLCB0bywgc3RhcnQsIGVuZCk7XG4gIH1cbiAgc3RhdGljIGludGVyc2VjdGlvblJhdyhcbiAgICBmeDogbnVtYmVyLCBmeTogbnVtYmVyLCB0eDogbnVtYmVyLCB0eTogbnVtYmVyLFxuICAgIHN4OiBudW1iZXIsIHN5OiBudW1iZXIsIGV4OiBudW1iZXIsIGV5OiBudW1iZXJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XG4gICAgY29uc3QgdGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzUmF3KGZ4LCBmeSwgdHgsIHR5LCBzeCwgc3ksIGV4LCBleSk7XG4gICAgaWYgKHRpbWVzKSB7XG4gICAgICB0aW1lcy55ID0gZnkgKyAodHkgLSBmeSkgKiB0aW1lcy54O1xuICAgICAgdGltZXMueCA9IGZ4ICsgKHR4IC0gZngpICogdGltZXMueDtcbiAgICAgIHJldHVybiB0aW1lcztcbiAgICB9XG4gIH1cbiAgc3RhdGljIGludGVyc2VjdGlvbihmcm9tOiBWZWN0b3IyLCB0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvblJhdyhmcm9tLngsIGZyb20ueSwgdG8ueCwgdG8ueSwgc3RhcnQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55KTtcbiAgfVxuICBpbnRlcnNlY3Rpb24odG86IFZlY3RvcjIsIHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjIpOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb24odGhpcywgdG8sIHN0YXJ0LCBlbmQpO1xuICB9XG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gJy4vbGluZSc7XG5pbXBvcnQgeyBMaW5lUmVuZGVyZXIgfSBmcm9tICcuL2xpbmVSZW5kZXJlcic7XG5cbmNvbnN0IGJvZHkgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCdib2R5Jyk7XG5cbmNvbnN0IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XG5cbmNvbnN0IGxpbmVzOiBMaW5lW10gPSBbXTtcbmxldCB4MTogbnVtYmVyID0gbnVsbDtcbmxldCB5MTogbnVtYmVyID0gbnVsbDtcbmNvbnN0IGxpbmVSZW5kZXJlciA9IG5ldyBMaW5lUmVuZGVyZXIoc3ZnKTtcblxubGV0IGVsZW1lbnRBdDogRWxlbWVudDtcblxuc3ZnLmFkZEV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIGV2ZW50ID0+IHtcbiAgaWYgKFxuICAgIChlbGVtZW50QXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpKSAmJlxuICAgIGVsZW1lbnRBdCBpbnN0YW5jZW9mIFNWR0NpcmNsZUVsZW1lbnRcbiAgKSB7XG4gICAgbGluZVJlbmRlcmVyLmRyYWcoZWxlbWVudEF0KTtcbiAgfVxufSk7XG5cbnN2Zy5hZGRFdmVudExpc3RlbmVyKCdtb3VzZXVwJywgZXZlbnQgPT4ge1xuICBpZiAobGluZVJlbmRlcmVyLmlzRHJhZ2dpbmcoKSkge1xuICAgIGxpbmVSZW5kZXJlci5kcm9wKCk7XG4gIH0gZWxzZSB7XG4gICAgaWYgKHgxID09PSBudWxsICYmIHkxID09PSBudWxsKSB7XG4gICAgICAvLyByZWNvcmQgdG1wIHBvaW50XG4gICAgICB4MSA9IGV2ZW50LmNsaWVudFg7XG4gICAgICB5MSA9IGV2ZW50LmNsaWVudFk7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGxpbmUgPSBuZXcgTGluZSh4MSwgeTEsIGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgeDEgPSBudWxsO1xuICAgICAgeTEgPSBudWxsO1xuICAgICAgbGluZXMucHVzaChsaW5lKTtcbiAgICAgIGxpbmVSZW5kZXJlci5kcmF3KGxpbmVzLCBsaW5lKTtcbiAgICB9XG4gIH1cbn0pO1xuXG5zdmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgZXZlbnQgPT4ge1xuICBsaW5lUmVuZGVyZXIubW92ZVRvKGxpbmVzLCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbn0pO1xuXG5ib2R5LmFwcGVuZENoaWxkKHN2Zyk7IiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcblxuZXhwb3J0IGNsYXNzIExpbmUge1xuICB2MTogVmVjdG9yMjtcbiAgdjI6IFZlY3RvcjI7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHgxPzogbnVtYmVyLFxuICAgIHkxPzogbnVtYmVyLFxuICAgIHgyPzogbnVtYmVyLFxuICAgIHkyPzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMudjEgPSBuZXcgVmVjdG9yMih4MSwgeTEpO1xuICAgIHRoaXMudjIgPSBuZXcgVmVjdG9yMih4MiwgeTIpO1xuICB9XG4gIGdldCB4MSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnYxLng7XG4gIH1cbiAgZ2V0IHkxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudjEueTtcbiAgfVxuICBnZXQgeDIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52Mi54O1xuICB9XG4gIGdldCB5MigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnYyLnk7XG4gIH1cbiAgbGVuKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudjIuc3ViKHRoaXMudjEpLmxlbigpO1xuICB9XG4gIGJlZm9yZSh0OiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy52MS5hZGQodGhpcy52Mi5zdWIodGhpcy52MSkubXVsKC10IC8gdGhpcy5sZW4oKSkpO1xuICB9XG4gIGFmdGVyKHQ6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLnYxLmFkZCh0aGlzLnYyLnN1Yih0aGlzLnYxKS5tdWwoKHRoaXMubGVuKCkgKyB0KSAvIHRoaXMubGVuKCkpKTtcbiAgfVxuICBpbnRlcnNlY3Rpb25XaXRoKG90aGVyOiBMaW5lKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMudjEuaW50ZXJzZWN0aW9uKHRoaXMudjIsIG90aGVyLnYxLCBvdGhlci52Mik7XG4gIH1cbn0iLCJpbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi9saW5lJztcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tICcuL3ZlY3RvcjInO1xuXG5leHBvcnQgY2xhc3MgSW50ZXJSZW5kZXJlciB7XG4gIGludGVyc2VjdGlvbnMgPSBuZXcgTWFwPExpbmUsIE1hcDxMaW5lLCBTVkdDaXJjbGVFbGVtZW50Pj4oKTtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgc3ZnOiBTVkdTVkdFbGVtZW50KSB7XG5cbiAgfVxuICBhZGRMaW5lKGxpbmVzOiBMaW5lW10sIGxpbmU6IExpbmUpOiB2b2lkIHtcbiAgICBsZXQgaW50ZXI6IFZlY3RvcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGggLSAxOyBpKyspIHtcbiAgICAgIGZvciAobGV0IGogPSBpICsgMTsgaiA8IGxpbmVzLmxlbmd0aDsgaisrKSB7XG4gICAgICAgIGlmIChsaW5lc1tpXSA9PT0gbGluZSB8fCBsaW5lc1tqXSA9PT0gbGluZSkge1xuICAgICAgICAgIGludGVyID0gbGluZXNbaV0uaW50ZXJzZWN0aW9uV2l0aChsaW5lc1tqXSk7XG4gICAgICAgICAgaWYgKGludGVyKSB7XG4gICAgICAgICAgICBjb25zdCBpbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3Rpb25zLmdldChsaW5lc1tpXSkgfHwgbmV3IE1hcDxMaW5lLCBTVkdDaXJjbGVFbGVtZW50PigpO1xuICAgICAgICAgICAgaWYgKGludGVyc2VjdGlvbnMuaGFzKGxpbmVzW2pdKSkge1xuICAgICAgICAgICAgICB0aGlzLmVyYXNlKGludGVyc2VjdGlvbnMuZ2V0KGxpbmVzW2pdKSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpbnRlcnNlY3Rpb25zLnNldChsaW5lc1tqXSwgdGhpcy5kcmF3KGludGVyKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuICB9XG4gIHJlbW92ZUxpbmUobGluZTogTGluZSk6IHZvaWQge1xuICAgIHRoaXMuaW50ZXJzZWN0aW9ucy5mb3JFYWNoKChpbnRlcnNlY3Rpb25zLCBsKSA9PiB7XG4gICAgICBpZiAobCA9PT0gbGluZSkge1xuICAgICAgICBpbnRlcnNlY3Rpb25zLmZvckVhY2goaW50ZXIgPT4gdGhpcy5lcmFzZShpbnRlcikpO1xuICAgICAgfSBlbHNlIGlmIChpbnRlcnNlY3Rpb25zLmhhcyhsaW5lKSkge1xuICAgICAgICB0aGlzLmVyYXNlKGludGVyc2VjdGlvbnMuZ2V0KGxpbmUpKTtcbiAgICAgICAgaW50ZXJzZWN0aW9ucy5kZWxldGUobGluZSk7XG4gICAgICB9XG4gICAgfSk7XG4gICAgdGhpcy5pbnRlcnNlY3Rpb25zLmRlbGV0ZShsaW5lKTtcbiAgfVxuICBkcmF3KGludGVyOiBWZWN0b3IyKTogU1ZHQ2lyY2xlRWxlbWVudCB7XG4gICAgY29uc3Qgc3ZnQ2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdjaXJjbGUnKTtcbiAgICBzdmdDaXJjbGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XG4gICAgc3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgncicsICczJyk7XG4gICAgc3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3gnLCBpbnRlci54LnRvRml4ZWQoKSk7XG4gICAgc3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3knLCBpbnRlci55LnRvRml4ZWQoKSk7XG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoc3ZnQ2lyY2xlKTtcbiAgICByZXR1cm4gc3ZnQ2lyY2xlO1xuICB9XG4gIGVyYXNlKHN2Z0NpcmNsZUVsZW1lbnQ6IFNWR0NpcmNsZUVsZW1lbnQpOiBTVkdDaXJjbGVFbGVtZW50IHtcbiAgICByZXR1cm4gdGhpcy5zdmcucmVtb3ZlQ2hpbGQoc3ZnQ2lyY2xlRWxlbWVudCk7XG4gIH1cbn0iLCJpbXBvcnQgeyBMaW5lIH0gZnJvbSAnLi9saW5lJztcbmltcG9ydCB7IEludGVyUmVuZGVyZXIgfSBmcm9tICcuL2ludGVyUmVuZGVyZXInO1xuXG5leHBvcnQgY2xhc3MgTGluZVJlbmRlcmVyIHtcbiAgcHJpdmF0ZSBzdmdMaW5lcyA9IG5ldyBNYXA8TGluZSwgU1ZHTGluZUVsZW1lbnQ+KCk7XG4gIHByaXZhdGUgc3RhcnRTdmdDaXJjbGVzID0gbmV3IE1hcDxMaW5lLCBTVkdDaXJjbGVFbGVtZW50PigpO1xuICBwcml2YXRlIGVuZFN2Z0NpcmNsZXMgPSBuZXcgTWFwPExpbmUsIFNWR0NpcmNsZUVsZW1lbnQ+KCk7XG4gIHByaXZhdGUgbGluZXMgPSBuZXcgTWFwPFNWR0xpbmVFbGVtZW50LCBMaW5lPigpO1xuICBwcml2YXRlIHN0YXJ0Q2lyY2xlcyA9IG5ldyBNYXA8U1ZHQ2lyY2xlRWxlbWVudCwgTGluZT4oKTtcbiAgcHJpdmF0ZSBlbmRDaXJjbGVzID0gbmV3IE1hcDxTVkdDaXJjbGVFbGVtZW50LCBMaW5lPigpO1xuICBwcml2YXRlIGRyYWdnZWRDaXJjbGU6IFNWR0NpcmNsZUVsZW1lbnQ7XG5cbiAgcHJpdmF0ZSBpbnRlclJlbmRlcmVyID0gbmV3IEludGVyUmVuZGVyZXIodGhpcy5zdmcpO1xuXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHN2ZzogU1ZHU1ZHRWxlbWVudCkge1xuXG4gIH1cbiAgaXNEcmFnZ2luZygpOiBib29sZWFuIHtcbiAgICByZXR1cm4gISF0aGlzLmRyYWdnZWRDaXJjbGU7XG4gIH1cbiAgZHJhdyhsaW5lczogTGluZVtdLCBsaW5lOiBMaW5lKSB7XG4gICAgbGV0IHN2Z0xpbmU6IFNWR0xpbmVFbGVtZW50O1xuICAgIGxldCBzdGFydFN2Z0NpcmNsZTogU1ZHQ2lyY2xlRWxlbWVudDtcbiAgICBsZXQgZW5kU3ZnQ2lyY2xlOiBTVkdDaXJjbGVFbGVtZW50O1xuICAgIGlmICghdGhpcy5zdmdMaW5lcy5oYXMobGluZSkpIHtcbiAgICAgIHN2Z0xpbmUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2xpbmUnKTtcbiAgICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcbiAgICAgIHRoaXMuc3ZnTGluZXMuc2V0KGxpbmUsIHN2Z0xpbmUpO1xuICAgICAgdGhpcy5saW5lcy5zZXQoc3ZnTGluZSwgbGluZSk7XG4gICAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZChzdmdMaW5lKTtcbiAgICAgIHN0YXJ0U3ZnQ2lyY2xlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdjaXJjbGUnKTtcbiAgICAgIHN0YXJ0U3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdyZWQnKTtcbiAgICAgIHN0YXJ0U3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgncicsICc1Jyk7XG4gICAgICB0aGlzLnN0YXJ0U3ZnQ2lyY2xlcy5zZXQobGluZSwgc3RhcnRTdmdDaXJjbGUpO1xuICAgICAgdGhpcy5zdGFydENpcmNsZXMuc2V0KHN0YXJ0U3ZnQ2lyY2xlLCBsaW5lKTtcbiAgICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHN0YXJ0U3ZnQ2lyY2xlKTtcbiAgICAgIGVuZFN2Z0NpcmNsZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnY2lyY2xlJyk7XG4gICAgICBlbmRTdmdDaXJjbGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2JsdWUnKTtcbiAgICAgIGVuZFN2Z0NpcmNsZS5zZXRBdHRyaWJ1dGUoJ3InLCAnNScpO1xuICAgICAgdGhpcy5lbmRTdmdDaXJjbGVzLnNldChsaW5lLCBlbmRTdmdDaXJjbGUpO1xuICAgICAgdGhpcy5lbmRDaXJjbGVzLnNldChlbmRTdmdDaXJjbGUsIGxpbmUpO1xuICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoZW5kU3ZnQ2lyY2xlKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ZnTGluZSA9IHRoaXMuc3ZnTGluZXMuZ2V0KGxpbmUpO1xuICAgICAgc3RhcnRTdmdDaXJjbGUgPSB0aGlzLnN0YXJ0U3ZnQ2lyY2xlcy5nZXQobGluZSk7XG4gICAgICBlbmRTdmdDaXJjbGUgPSB0aGlzLmVuZFN2Z0NpcmNsZXMuZ2V0KGxpbmUpO1xuICAgIH1cbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneDEnLCBsaW5lLngxLnRvRml4ZWQoKSk7XG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3kxJywgbGluZS55MS50b0ZpeGVkKCkpO1xuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MicsIGxpbmUueDIudG9GaXhlZCgpKTtcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneTInLCBsaW5lLnkyLnRvRml4ZWQoKSk7XG4gICAgc3RhcnRTdmdDaXJjbGUuc2V0QXR0cmlidXRlKCdjeCcsIGxpbmUuYmVmb3JlKDEwKS54LnRvRml4ZWQoKSk7XG4gICAgc3RhcnRTdmdDaXJjbGUuc2V0QXR0cmlidXRlKCdjeScsIGxpbmUuYmVmb3JlKDEwKS55LnRvRml4ZWQoKSk7XG4gICAgZW5kU3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3gnLCBsaW5lLmFmdGVyKDEwKS54LnRvRml4ZWQoKSk7XG4gICAgZW5kU3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3knLCBsaW5lLmFmdGVyKDEwKS55LnRvRml4ZWQoKSk7XG4gICAgdGhpcy5pbnRlclJlbmRlcmVyLmFkZExpbmUobGluZXMsIGxpbmUpO1xuICB9XG4gIGRyYWcoY2lyY2xlOiBTVkdDaXJjbGVFbGVtZW50KTogdm9pZCB7XG4gICAgdGhpcy5kcmFnZ2VkQ2lyY2xlID0gY2lyY2xlO1xuICB9XG4gIG1vdmVUbyhsaW5lczogTGluZVtdLCB4OiBudW1iZXIsIHk6IG51bWJlcik6IHZvaWQge1xuICAgIGlmICh0aGlzLnN0YXJ0Q2lyY2xlcy5oYXModGhpcy5kcmFnZ2VkQ2lyY2xlKSkge1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMuc3RhcnRDaXJjbGVzLmdldCh0aGlzLmRyYWdnZWRDaXJjbGUpO1xuICAgICAgY29uc3QgbmV3TGluZSA9IG5ldyBMaW5lKHgsIHksIGxpbmUueDIsIGxpbmUueTIpO1xuICAgICAgbGluZS52MSA9IG5ld0xpbmUuYmVmb3JlKC0xMCk7XG4gICAgICB0aGlzLmRyYXcobGluZXMsIGxpbmUpO1xuICAgIH0gZWxzZSBpZiAodGhpcy5lbmRDaXJjbGVzLmhhcyh0aGlzLmRyYWdnZWRDaXJjbGUpKSB7XG4gICAgICBjb25zdCBsaW5lID0gdGhpcy5lbmRDaXJjbGVzLmdldCh0aGlzLmRyYWdnZWRDaXJjbGUpO1xuICAgICAgY29uc3QgbmV3TGluZSA9IG5ldyBMaW5lKGxpbmUueDEsIGxpbmUueTEsIHgsIHkpO1xuICAgICAgbGluZS52MiA9IG5ld0xpbmUuYWZ0ZXIoLTEwKTtcbiAgICAgIHRoaXMuZHJhdyhsaW5lcywgbGluZSk7XG4gICAgfVxuICB9XG4gIGRyb3AoKTogdm9pZCB7XG4gICAgdGhpcy5kcmFnZ2VkQ2lyY2xlID0gbnVsbDtcbiAgfVxufSJdLCJzb3VyY2VSb290IjoiIn0=