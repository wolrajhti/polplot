(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var h=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/h,this.crossRaw(i-e,r-n,e-o,n-s)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},r=function(){function r(n){var i=this;this.renderer=n,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.mode=1,document.addEventListener("keyup",(function(t){"s"===t.key?i.mode=2:"l"===t.key&&(i.mode=1)}));var r,o,s=-1,a=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var o=new t(n.clientX,n.clientY);1===i.mode?-1===(s=i.nearestLineIndexFrom(o,20))?(i.addLine(new e(o.x,o.y,o.x,o.y)),s=i.lines.length-1,r=i.lines[s].v2):o.sub(i.lines[s].v1).len()<20?r=i.lines[s].v1:o.sub(i.lines[s].v2).len()<20&&(r=i.lines[s].v2):2===i.mode&&-1===(a=i.nearestSurveyIndexFrom(o,20))&&(i.addSurvey(o),a=i.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===i.mode?(s=-1,r=null):2===i.mode&&(a=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button){1===i.mode?r?(r.x+=e.movementX,r.y+=e.movementY,i.updateIntersectionTimes(i.lines[s]),i.renderer.drawLine(i.lines[s],s.toString())):-1!==s&&(i.lines[s].update(e.movementX,e.movementY,e.movementX,e.movementY),i.updateIntersectionTimes(i.lines[s]),i.renderer.drawLine(i.lines[s],s.toString())):2===i.mode&&-1!==a&&(i.surveys[a].x+=e.movementX,i.surveys[a].y+=e.movementY,i.updateSurvey(i.surveys[a]));for(var n=new t(e.clientX,e.clientY),u=!1,h=o,l=0,c=i.polygons;l<c.length;l++){var d=c[l];if(d.contains(n)){d!==o&&(i.renderer.drawPolygon(d,"red"),o=d),u=!0;break}}u||(o=null),h&&h!==o&&i.renderer.drawPolygon(h,"white")}}))}return r.prototype.nearestLineIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.lines.length;o++)(n=this.lines[o].nearestTo(t).sub(t).len())<e&&n<r&&(r=n,i=o);return i},r.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].sub(t).len())<e&&n<r&&(r=n,i=o);return i},r.prototype.addSurvey=function(t){var e;this.surveys.push(t);for(var n=0,i=this.polygons;n<i.length;n++){var r=i[n];if(r.contains(t)){e=r;break}}this.renderer.drawPoint(t,e?e.area().toFixed()+" m2":"")},r.prototype.updateSurvey=function(t){for(var e,n=0,i=this.polygons;n<i.length;n++){var r=i[n];if(r.contains(t)){e=r;break}}this.renderer.drawPoint(t,e?e.area().toFixed()+" m2":"")},r.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,(this.lines.length-1).toString())},r.prototype.addIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=[],a=[],u=0;u<e.length;u++)o=e[u].intersectionTimesWith(t),n[u].push(o.x),i.push(e[u].pointAt(o.x)),r[u].push(i.length-1),s.push(o.y),a.push(i.length-1);s.push(NaN),a.push(null),n.push(s),r.push(a),this.renderIntersections()},r.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=e.indexOf(t),a=0;a<e.length;a++)a!==s&&(o=e[a].intersectionTimesWith(t),n[a][s]=o.x,n[s][a]=o.y,a<s?i[r[a][s]]=e[a].pointAt(o.x):i[r[s][a]]=e[a].pointAt(o.x));this.renderIntersections()},r.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new n(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},r.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},r.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},r.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},r.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},r.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],o=function(e){for(var o=0;o<i[e].length;o++){var a=i[e][o];if(e<a){var u=n[e][i[e][o]],h=o-1,l=o+1,c=i[a].findIndex((function(t){return t===e})),d=s.testSide(t[e].v1,t[e].v2,t[a].v1),p=d?c-1:c+1,v=d?c+1:c-1,y=0<o?n[e][i[e][h]]:null,f=o<i[e].length-1?n[e][i[e][l]]:null,g=-1<p&&p<i[a].length?n[a][i[a][p]]:null,m=-1<v&&v<i[a].length?n[a][i[a][v]]:null,w=s.buildPartialsFromIntersectionIndexes(u,[y,m,f,g]);r.push.apply(r,w)}}},s=this,a=0;a<i.length;a++)o(a);return r},r.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,r=[],o=0;o<t.length;){for(var s=0;s<t.length;s++)if(o!==s&&this.partialsOverlaps(t[o],t[s])){(e=t[o]).splice.apply(e,i([-2,2],t[s])),t.splice(s,1),s<o&&o--,(n=this.partialsOverlaps(t[o],t[o])||this.partialsMeet(t[o],t[o]))>0&&(t[o].splice(0,n),r.push(t[o]),t.splice(o,1)),o=-1;break}o++}return r},r}(),o=document.createElementNS("http://www.w3.org/2000/svg","g");o.setAttribute("stroke","black"),o.setAttribute("stroke-width","0.4px");var s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("stroke-dasharray","10, 4, 1, 4");var a=document.createElementNS("http://www.w3.org/2000/svg","path");a.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),a.setAttribute("fill","white");var u=document.createElementNS("http://www.w3.org/2000/svg","text");u.setAttribute("text-anchor","middle"),u.setAttribute("alignment-baseline","central"),u.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),u.setAttribute("font-weight","100"),u.setAttribute("font-size","14px"),o.appendChild(s),o.appendChild(a),o.appendChild(a.cloneNode()),o.appendChild(u),o.appendChild(u.cloneNode());var h=document.createElementNS("http://www.w3.org/2000/svg","g");h.setAttribute("stroke","black"),h.setAttribute("stroke-width","0.4px");var l=document.createElementNS("http://www.w3.org/2000/svg","circle");l.setAttribute("fill","green"),l.setAttribute("r","3");var c=document.createElementNS("http://www.w3.org/2000/svg","text");c.setAttribute("transform","translate(0, 10)"),c.setAttribute("text-anchor","middle"),c.setAttribute("alignment-baseline","hanging"),c.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),c.setAttribute("font-weight","100"),c.setAttribute("font-size","14px"),c.setAttribute("font-style","italic"),h.appendChild(l),h.appendChild(c);var d=document.createElementNS("http://www.w3.org/2000/svg","path");d.setAttribute("fill","green"),d.setAttribute("fill-opacity","0.7"),d.setAttribute("stroke-width","0.8"),d.setAttribute("stroke","black");var p=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer)}return t.prototype._setEventHandler=function(t,e){this.handlers[t]&&this.svg.removeEventListener(t,this.handlers[t]),this.handlers[t]=e,this.svg.addEventListener(t,this.handlers[t])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler("mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler("mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler("mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=o.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],s=n.children[2],a=n.children[3],u=n.children[4],h=t.x1.toFixed(),l=t.y1.toFixed(),c=t.x2.toFixed(),d=t.y2.toFixed();i.setAttribute("x1",h),i.setAttribute("y1",l),i.setAttribute("x2",c),i.setAttribute("y2",d),a.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+h+", "+l+") rotate("+(isNaN(p)?0:p)+")"),s.setAttribute("transform","translate("+c+", "+d+") rotate("+(isNaN(p)?0:180+p)+")"),a.setAttribute("transform","translate("+(isNaN(v.x)?h:v.x.toFixed())+", "+(isNaN(v.y)?l:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?c:y.x.toFixed())+", "+(isNaN(y.y)?d:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=h.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=d.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+"Z"),n.setAttribute("fill",e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t}());new r(p),document.querySelector("body").appendChild(p.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,