(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.lenRaw=function(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return Math.abs(t-n)<3&&Math.abs(e-i)<3},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,u,a){var c=this.crossRaw(i-e,r-n,u-o,a-s);return new t(this.crossRaw(u-o,a-s,e-o,n-s)/c,this.crossRaw(i-e,r-n,e-o,n-s)/c)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,u){var a=this.intersectionTimesRaw(t,e,n,i,r,o,s,u);if(a)return a.y=e+(i-e)*a.x,a.x=t+(n-t)*a.x,a},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.shareEdge=function(t,e){for(var n=this.vertices.length-1,i=0;i<this.vertices.length;i++){if(this.vertices[n].equals(t)&&this.vertices[i].equals(e))return!0;n=i}return!1},t.prototype.intersectionWith=function(t){},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,u=o.length;s<u;s++,r++)i[r]=o[s];return i},r=function(){function t(t){var n,i,r,o,s=this;this.renderer=t,this.lines=[],this.intersectionTimes=[],this.intersectionPoints=[],this.renderer.setMouseDownHandler((function(t,r,o){i=o||null,(n=r||null)||(n=new e(t.clientX,t.clientY,t.clientX,t.clientY),i=n.v2,s.addLine(n))})),this.renderer.setMouseUpHandler((function(t,e,u){e?(r&&r!==e&&s.renderer.drawLine(r,e===o,!1),r=e,s.renderer.drawLine(r,e===o,!0)):r&&s.renderer.drawLine(r,e===o,!1),n=null,i=null})),this.renderer.setMouseMoveHandler((function(t,e,u){e?(o&&o!==e&&s.renderer.drawLine(o,!1,e===r),o=e,s.renderer.drawLine(o,!0,e===r)):o&&(s.renderer.drawLine(o,!1,e===r),o=null),n&&(i?(i.x=t.clientX,i.y=t.clientY):n.update(t.movementX,t.movementY,t.movementX,t.movementY),s.updateIntersectionTimes(n),s.renderer.drawLine(n,n===o,n===r))}))}return t.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,!1,!1)},t.prototype.addIntersectionTimes=function(t,e,n,i){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersectionPoints);for(var r,o=[],s=[],u=0;u<e.length;u++)r=e[u].intersectionTimesWith(t),n[u].push(r.x),i[u].push(0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[u].v1.add(e[u].v2.sub(e[u].v1).mul(r.x)):null),o.push(r.y),s.push(null);o.push(NaN),s.push(null),n.push(o),i.push(s),this.renderIntersections()},t.prototype.updateIntersectionTimes=function(t,e,n,i){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersectionPoints);for(var r,o=e.indexOf(t),s=0;s<e.length;s++)s!==o&&(r=e[s].intersectionTimesWith(t),n[s][o]=r.x,n[o][s]=r.y,s<o?i[s][o]=0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[s].v1.add(e[s].v2.sub(e[s].v1).mul(r.x)):null:i[o][s]=0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[s].v1.add(e[s].v2.sub(e[s].v1).mul(r.x)):null);this.renderIntersections()},t.prototype.renderIntersections=function(){var t=this;this.renderer.clearIntersections(),this.intersectionPoints.forEach((function(e){e.forEach((function(e){e&&t.renderer.drawPoint(e)}))})),this.renderer.clearPolygons();var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonsFromPartials(e).forEach((function(e){return t.renderer.drawPolygon(e)}))},t.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},t.prototype.partialsAreConnected=function(t,e){return t.vertices[t.vertices.length-2].equals(e.vertices[0])&&t.vertices[t.vertices.length-1].equals(e.vertices[1])},t.prototype.buildPartialsFromPoints=function(t,e,i,r){for(var o=[],s=0;s<e.length;s++)if(e[s]){var u=s+1;for(u===e.length&&(u=0);!e[u];)++u===e.length&&(u=0);s!==u&&o.push([s,u])}return o.map((function(o){var s=o[0],u=o[1],a=new n([e[s],t,e[u]]);return s%2==0||u%2==0?(i.v2.y<i.v1.y||i.v2.x>=i.v1.x)&&a.reverse():(r.v2.y<r.v1.y||r.v2.x>=r.v1.x)&&a.reverse(),a}))},t.prototype.buildPartialsFromIntersectionTimes=function(t,e){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),console.log("buildPartialsFromIntersectionTimes"),console.log("----------------------------------"),console.log("lines.length = ",t.length);var n=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))}));console.log(n);for(var i=[],r=function(r){for(var s=0;s<n[r].length;s++){var u=n[r][s];if(r<u){var a=t[r].pointAt(e[r][n[r][s]]),c=s-1,l=s+1,h=n[u].findIndex((function(t){return t===r})),p=h-1,d=h+1,v=0<s?t[r].pointAt(e[r][n[r][c]]):null,f=s<n[r].length-1?t[r].pointAt(e[r][n[r][l]]):null,y=0<h?t[u].pointAt(e[u][n[u][p]]):null,g=h<n[u].length-1?t[u].pointAt(e[u][n[u][d]]):null,w=o.buildPartialsFromPoints(a,[v,g,f,y],t[r],t[u]);i.push.apply(i,w)}}},o=this,s=0;s<n.length;s++)r(s);return i},t.prototype.buildPolygonsFromPartials=function(t){for(var e,n=[],r=0;r<t.length;){for(var o=0;o<t.length;o++)if(r!==o&&this.partialsAreConnected(t[r],t[o])){console.log("\n              partials[i]: "+t[r].toString()+",\n              partials[j]: "+t[o].toString()+",\n            "),(e=t[r].vertices).splice.apply(e,i([-2,2],t[o].vertices)),console.log("\n              partials[i]: "+t[r].toString()+" [NEW],\n            "),t.splice(o,1),o<r&&r--,this.partialsAreConnected(t[r],t[r])?(t[r].vertices.splice(0,2),console.log("\n                new connected polygon: "+t[r].toString()+"\n              "),n.push(t[r]),t.splice(r,1)):t[r].vertices[0].equals(t[r].vertices[t[r].vertices.length-1])&&(t[r].vertices.pop(),console.log("\n                new closed polygon: "+t[r].toString()+"\n              "),n.push(t[r]),t.splice(r,1)),r=-1;break}r++}return console.log("polygons",n),n.map((function(t){return console.log(t.toString())})),n},t}(),o=document.createElementNS("http://www.w3.org/2000/svg","g");o.setAttribute("stroke","black"),o.setAttribute("stroke-width","0.4px");var s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("stroke-dasharray","10, 4, 1, 4");var u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),u.setAttribute("fill","white"),o.appendChild(s),o.appendChild(u),o.appendChild(u.cloneNode());var a=document.createElementNS("http://www.w3.org/2000/svg","circle");a.setAttribute("fill","green"),a.setAttribute("r","3");var c=document.createElementNS("http://www.w3.org/2000/svg","path");c.setAttribute("fill","green"),c.setAttribute("fill-opacity","0.7"),c.setAttribute("stroke-width","3"),c.setAttribute("stroke","grey");var l=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.intersectionContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.lineBySvgG=new Map,this.svg.appendChild(this.intersectionContainer),this.svg.appendChild(this.polygonContainer)}return t.prototype.clickHandlerWrapper=function(t){var e=this;return function(n){var i=document.elementFromPoint(n.clientX,n.clientY),r=e.lineBySvgG.get(i.parentNode);i instanceof SVGPathElement&&i.parentNode!==e.polygonContainer?i.parentNode.children[1]===i?t(n,r,r.v1):t(n,r,r.v2):i instanceof SVGLineElement?t(n,r):t(n)}},t.prototype.setMouseDownHandler=function(t){this.onMouseDown&&this.svg.removeEventListener("mousedown",this.onMouseDown),this.onMouseDown=this.clickHandlerWrapper(t),this.svg.addEventListener("mousedown",this.onMouseDown)},t.prototype.setMouseUpHandler=function(t){this.onMouseUp&&this.svg.removeEventListener("mouseup",this.onMouseUp),this.onMouseUp=this.clickHandlerWrapper(t),this.svg.addEventListener("mouseup",this.onMouseUp)},t.prototype.setMouseMoveHandler=function(t){this.onMouseMove&&this.svg.removeEventListener("mousemove",this.onMouseMove),this.onMouseMove=this.clickHandlerWrapper(t),this.svg.addEventListener("mousemove",this.onMouseMove)},t.prototype.drawLine=function(t,e,n){var i;void 0===e&&(e=!1),void 0===n&&(n=!1),this.svgGByLine.has(t)?i=this.svgGByLine.get(t):(i=o.cloneNode(!0),this.svg.appendChild(i),this.svgGByLine.set(t,i),this.lineBySvgG.set(i,t));var r=i.children[0],s=i.children[1],u=i.children[2],a=t.x1.toFixed(),c=t.y1.toFixed(),l=t.x2.toFixed(),h=t.y2.toFixed();r.setAttribute("x1",a),r.setAttribute("y1",c),r.setAttribute("x2",l),r.setAttribute("y2",h),e?i.setAttribute("stroke-width","0.8px"):i.setAttribute("stroke-width","0.4px"),n?i.setAttribute("stroke","#19a194"):i.setAttribute("stroke","black");var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI;s.setAttribute("transform","translate("+a+", "+c+") rotate("+(isNaN(p)?0:p)+")"),u.setAttribute("transform","translate("+l+", "+h+") rotate("+(isNaN(p)?0:180+p)+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.svg.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t){var e=a.cloneNode();e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.intersectionContainer.appendChild(e)},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.intersectionContainer)},t.prototype.drawPolygon=function(t){var e=c.cloneNode();e.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+"Z"),e.setAttribute("fill","#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.polygonContainer.appendChild(e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t}());new r(l),document.querySelector("body").appendChild(l.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,