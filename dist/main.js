(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.lenRaw=function(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,s,o,u,h){var c=this.crossRaw(i-e,r-n,u-s,h-o);return new t(this.crossRaw(u-s,h-o,e-s,n-o)/c,this.crossRaw(i-e,r-n,e-s,n-o)/c)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,s,o,u){var h=this.intersectionTimesRaw(t,e,n,i,r,s,o,u);if(h)return h.y=e+(i-e)*h.x,h.x=t+(n-t)*h.x,h},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.shareEdge=function(t,e){for(var n=this.vertices.length-1,i=0;i<this.vertices.length;i++){if(this.vertices[n].equals(t)&&this.vertices[i].equals(e))return!0;n=i}return!1},t.prototype.intersectionWith=function(t){},t}(),i=function(){function t(t){var n,i,r,s,o=this;this.renderer=t,this.lines=[],this.intersectionTimes=[],this.intersectionPoints=[],this.renderer.setMouseDownHandler((function(t,r,s){i=s||null,(n=r||null)||(n=new e(t.clientX,t.clientY,t.clientX,t.clientY),i=n.v2,o.addLine(n))})),this.renderer.setMouseUpHandler((function(t,e,u){e?(r&&r!==e&&o.renderer.drawLine(r,e===s,!1),r=e,o.renderer.drawLine(r,e===s,!0)):r&&o.renderer.drawLine(r,e===s,!1),n=null,i=null})),this.renderer.setMouseMoveHandler((function(t,e,u){e?(s&&s!==e&&o.renderer.drawLine(s,!1,e===r),s=e,o.renderer.drawLine(s,!0,e===r)):s&&(o.renderer.drawLine(s,!1,e===r),s=null),n&&(i?(i.x=t.clientX,i.y=t.clientY):n.update(t.movementX,t.movementY,t.movementX,t.movementY),o.updateIntersectionTimes(n),o.renderer.drawLine(n,n===s,n===r))}))}return t.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,!1,!1)},t.prototype.addIntersectionTimes=function(t){for(var e,n=[],i=[],r=0;r<this.lines.length;r++)e=this.lines[r].intersectionTimesWith(t),this.intersectionTimes[r].push(e.x),this.intersectionPoints[r].push(0<=e.x&&e.x<=1&&0<=e.y&&e.y<=1?this.lines[r].v1.add(this.lines[r].v2.sub(this.lines[r].v1).mul(e.x)):null),n.push(e.y),i.push(null);n.push(NaN),i.push(null),this.intersectionTimes.push(n),this.intersectionPoints.push(i),this.renderIntersections()},t.prototype.updateIntersectionTimes=function(t){for(var e,n=this.lines.indexOf(t),i=0;i<this.lines.length;i++)i!==n&&(e=this.lines[i].intersectionTimesWith(t),this.intersectionTimes[i][n]=e.x,this.intersectionTimes[n][i]=e.y,i<n?this.intersectionPoints[i][n]=0<=e.x&&e.x<=1&&0<=e.y&&e.y<=1?this.lines[i].v1.add(this.lines[i].v2.sub(this.lines[i].v1).mul(e.x)):null:this.intersectionPoints[n][i]=0<=e.x&&e.x<=1&&0<=e.y&&e.y<=1?this.lines[i].v1.add(this.lines[i].v2.sub(this.lines[i].v1).mul(e.x)):null);this.renderIntersections()},t.prototype.renderIntersections=function(){var t=this;this.renderer.clearIntersections(),this.intersectionPoints.forEach((function(e){e.forEach((function(e){e&&t.renderer.drawPoint(e)}))})),this.renderer.clearPolygons(),this.buildPolygonsFromIntersectionTimes().forEach((function(e){return t.renderer.drawPolygon(e)}))},t.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},t.prototype.buildPolygonsFromIntersectionTimes=function(){for(var t=this,e=this.intersectionTimes.map((function(e,n){return e.map((function(t,e){return e})).filter((function(i){return!isNaN(e[i])&&0<=e[i]&&e[i]<=1&&!isNaN(t.intersectionTimes[i][n])&&0<=t.intersectionTimes[i][n]&&t.intersectionTimes[i][n]<=1})).sort((function(t,n){return e[t]-e[n]}))})),i=[],r=0;r<e.length;r++)for(var s=function(t){var s,u=r,h=t,c=[o.lines[u].pointAt(o.intersectionTimes[u][e[u][h]]),o.lines[u].pointAt(o.intersectionTimes[u][e[u][h+1]])];if(i.some((function(t){return t.shareEdge(c[0],c[1])})))return"break";h+=1;for(var a=0,l=!1;a++<1e3&&(s=u,"number"==typeof(u=e[u][h]));){if("number"!=typeof(h=e[u].findIndex((function(t){return t===s})))&&console.log("error"),0<h&&o.testSide(c[c.length-2],o.lines[u].pointAt(o.intersectionTimes[u][e[u][h-1]]),c[c.length-1]))h-=1;else{if(!(h<e[u].length-1&&o.testSide(c[c.length-2],o.lines[u].pointAt(o.intersectionTimes[u][e[u][h+1]]),c[c.length-1])))break;h+=1}if(c.push(o.lines[u].pointAt(o.intersectionTimes[u][e[u][h]])),c[0].equals(c[c.length-1])){c.pop(),l=!0;break}}1e3===r&&console.warn("too many loops"),l&&i.push(new n(c))},o=this,u=0;u<e[r].length-1&&"break"!==s(u);u++);return console.log(i),i},t}(),r=document.createElementNS("http://www.w3.org/2000/svg","g");r.setAttribute("stroke","black"),r.setAttribute("stroke-width","0.4px");var s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("stroke-dasharray","10, 4, 1, 4");var o=document.createElementNS("http://www.w3.org/2000/svg","path");o.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),o.setAttribute("fill","white"),r.appendChild(s),r.appendChild(o),r.appendChild(o.cloneNode());var u=document.createElementNS("http://www.w3.org/2000/svg","circle");u.setAttribute("fill","green"),u.setAttribute("r","3");var h=document.createElementNS("http://www.w3.org/2000/svg","path");h.setAttribute("fill","green"),h.setAttribute("stroke-width","3"),h.setAttribute("stroke","grey");var c=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.intersectionContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.lineBySvgG=new Map,this.svg.appendChild(this.intersectionContainer),this.svg.appendChild(this.polygonContainer)}return t.prototype.clickHandlerWrapper=function(t){var e=this;return function(n){var i=document.elementFromPoint(n.clientX,n.clientY),r=e.lineBySvgG.get(i.parentNode);i instanceof SVGPathElement&&i.parentNode!==e.polygonContainer?i.parentNode.children[1]===i?t(n,r,r.v1):t(n,r,r.v2):i instanceof SVGLineElement?t(n,r):t(n)}},t.prototype.setMouseDownHandler=function(t){this.onMouseDown&&this.svg.removeEventListener("mousedown",this.onMouseDown),this.onMouseDown=this.clickHandlerWrapper(t),this.svg.addEventListener("mousedown",this.onMouseDown)},t.prototype.setMouseUpHandler=function(t){this.onMouseUp&&this.svg.removeEventListener("mouseup",this.onMouseUp),this.onMouseUp=this.clickHandlerWrapper(t),this.svg.addEventListener("mouseup",this.onMouseUp)},t.prototype.setMouseMoveHandler=function(t){this.onMouseMove&&this.svg.removeEventListener("mousemove",this.onMouseMove),this.onMouseMove=this.clickHandlerWrapper(t),this.svg.addEventListener("mousemove",this.onMouseMove)},t.prototype.drawLine=function(t,e,n){var i;void 0===e&&(e=!1),void 0===n&&(n=!1),this.svgGByLine.has(t)?i=this.svgGByLine.get(t):(i=r.cloneNode(!0),this.svg.appendChild(i),this.svgGByLine.set(t,i),this.lineBySvgG.set(i,t));var s=i.children[0],o=i.children[1],u=i.children[2],h=t.x1.toFixed(),c=t.y1.toFixed(),a=t.x2.toFixed(),l=t.y2.toFixed();s.setAttribute("x1",h),s.setAttribute("y1",c),s.setAttribute("x2",a),s.setAttribute("y2",l),e?i.setAttribute("stroke-width","0.8px"):i.setAttribute("stroke-width","0.4px"),n?i.setAttribute("stroke","#19a194"):i.setAttribute("stroke","black");var d=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI;o.setAttribute("transform","translate("+h+", "+c+") rotate("+(isNaN(d)?0:d)+")"),u.setAttribute("transform","translate("+a+", "+l+") rotate("+(isNaN(d)?0:180+d)+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.svg.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t){var e=u.cloneNode();e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.intersectionContainer.appendChild(e)},t.prototype.clearIntersections=function(){var t=this;this.intersectionContainer.childNodes.forEach((function(e){return t.intersectionContainer.removeChild(e)}))},t.prototype.drawPolygon=function(t){var e=h.cloneNode();e.setAttribute("d","M"+t.vertices.map((function(t){return t.x+" "+t.y})).join(" L ")+"Z"),e.setAttribute("fill","#"+Math.floor(16777215*Math.random()).toString(16)),this.polygonContainer.appendChild(e)},t.prototype.clearPolygons=function(){var t=this;this.polygonContainer.childNodes.forEach((function(e){return t.polygonContainer.removeChild(e)}))},t}());new i(c),document.querySelector("body").appendChild(c.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,