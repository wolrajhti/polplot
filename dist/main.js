(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,s,o,u,a){var h=this.crossRaw(i-e,r-n,u-s,a-o);return new t(this.crossRaw(u-s,a-o,e-s,n-o)/h,this.crossRaw(i-e,r-n,e-s,n-o)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,s,o,u){var a=this.intersectionTimesRaw(t,e,n,i,r,s,o,u);if(a)return a.y=e+(i-e)*a.x,a.x=t+(n-t)*a.x,a},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.shareEdge=function(t,e){for(var n=this.vertices.length-1,i=0;i<this.vertices.length;i++){if(this.vertices[n].equals(t)&&this.vertices[i].equals(e))return!0;n=i}return!1},t.prototype.intersectionWith=function(t){},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var s=arguments[e],o=0,u=s.length;o<u;o++,r++)i[r]=s[o];return i},r=function(){function r(n){var i=this;this.renderer=n,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[];var r,s=-1;this.renderer.setMouseDownHandler((function(n){var o=new t(n.clientX,n.clientY);-1===(s=i.nearestLineIndexFrom(o,20))?(i.addLine(new e(o.x,o.y,o.x,o.y)),s=i.lines.length-1,r=i.lines[s].v2):o.sub(i.lines[s].v1).len()<20?r=i.lines[s].v1:o.sub(i.lines[s].v2).len()<20&&(r=i.lines[s].v2)})),this.renderer.setMouseUpHandler((function(t){s=-1,r=null})),this.renderer.setMouseMoveHandler((function(t){r?(r.x+=t.movementX,r.y+=t.movementY,i.updateIntersectionTimes(i.lines[s]),i.renderer.drawLine(i.lines[s])):-1!==s&&(i.lines[s].update(t.movementX,t.movementY,t.movementX,t.movementY),i.updateIntersectionTimes(i.lines[s]),i.renderer.drawLine(i.lines[s]))}))}return r.prototype.nearestLineIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,s=0;s<this.lines.length;s++)(n=this.lines[s].nearestTo(t).sub(t).len())<e&&n<r&&(r=n,i=s);return i},r.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t)},r.prototype.addIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var s,o=[],u=[],a=0;a<e.length;a++)s=e[a].intersectionTimesWith(t),n[a].push(s.x),i.push(e[a].pointAt(s.x)),r[a].push(i.length-1),o.push(s.y),u.push(i.length-1);o.push(NaN),u.push(null),n.push(o),r.push(u),this.renderIntersections()},r.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var s,o=e.indexOf(t),u=0;u<e.length;u++)u!==o&&(s=e[u].intersectionTimesWith(t),n[u][o]=s.x,n[o][u]=s.y,u<o?i[r[u][o]]=e[u].pointAt(s.x):i[r[o][u]]=e[u].pointAt(s.x));this.renderIntersections()},r.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons();var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new n(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&t.renderer.drawPolygon(e)}))},r.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},r.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},r.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},r.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},r.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],s=function(e){for(var s=0;s<i[e].length;s++){var u=i[e][s];if(e<u){var a=n[e][i[e][s]],h=s-1,c=s+1,l=i[u].findIndex((function(t){return t===e})),p=o.testSide(t[e].v1,t[e].v2,t[u].v1),d=p?l-1:l+1,v=p?l+1:l-1,f=0<s?n[e][i[e][h]]:null,y=s<i[e].length-1?n[e][i[e][c]]:null,m=-1<d&&d<i[u].length?n[u][i[u][d]]:null,g=-1<v&&v<i[u].length?n[u][i[u][v]]:null,w=o.buildPartialsFromIntersectionIndexes(a,[f,g,y,m]);r.push.apply(r,w)}}},o=this,u=0;u<i.length;u++)s(u);return r},r.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,r=[],s=0;s<t.length;){for(var o=0;o<t.length;o++)if(s!==o&&this.partialsOverlaps(t[s],t[o])){(e=t[s]).splice.apply(e,i([-2,2],t[o])),t.splice(o,1),o<s&&s--,(n=this.partialsOverlaps(t[s],t[s])||this.partialsMeet(t[s],t[s]))>0&&(t[s].splice(0,n),r.push(t[s]),t.splice(s,1)),s=-1;break}s++}return r},r}(),s=document.createElementNS("http://www.w3.org/2000/svg","g");s.setAttribute("stroke","black"),s.setAttribute("stroke-width","0.4px");var o=document.createElementNS("http://www.w3.org/2000/svg","line");o.setAttribute("stroke-dasharray","10, 4, 1, 4");var u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),u.setAttribute("fill","white"),s.appendChild(o),s.appendChild(u),s.appendChild(u.cloneNode());var a=document.createElementNS("http://www.w3.org/2000/svg","circle");a.setAttribute("fill","green"),a.setAttribute("r","3");var h=document.createElementNS("http://www.w3.org/2000/svg","path");h.setAttribute("fill","green"),h.setAttribute("fill-opacity","0.7"),h.setAttribute("stroke-width","3"),h.setAttribute("stroke","grey");var c=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.intersectionContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.lineBySvgG=new Map,this.handlers={},this.svg.appendChild(this.intersectionContainer),this.svg.appendChild(this.polygonContainer)}return t.prototype._setEventHandler=function(t,e){this.handlers[t]&&this.svg.removeEventListener(t,this.handlers[t]),this.handlers[t]=e,this.svg.addEventListener(t,this.handlers[t])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler("mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler("mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler("mousemove",t)},t.prototype.drawLine=function(t){var e;this.svgGByLine.has(t)?e=this.svgGByLine.get(t):(e=s.cloneNode(!0),this.svg.appendChild(e),this.svgGByLine.set(t,e),this.lineBySvgG.set(e,t));var n=e.children[0],i=e.children[1],r=e.children[2],o=t.x1.toFixed(),u=t.y1.toFixed(),a=t.x2.toFixed(),h=t.y2.toFixed();n.setAttribute("x1",o),n.setAttribute("y1",u),n.setAttribute("x2",a),n.setAttribute("y2",h);var c=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI;i.setAttribute("transform","translate("+o+", "+u+") rotate("+(isNaN(c)?0:c)+")"),r.setAttribute("transform","translate("+a+", "+h+") rotate("+(isNaN(c)?0:180+c)+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.svg.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t){var e=a.cloneNode();e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.intersectionContainer.appendChild(e)},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.intersectionContainer)},t.prototype.drawPolygon=function(t){var e=h.cloneNode();e.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+"Z"),e.setAttribute("fill","#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.polygonContainer.appendChild(e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t}());new r(c),document.querySelector("body").appendChild(c.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,