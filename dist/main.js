(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var h=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/h,this.crossRaw(i-e,r-n,e-o,n-s)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return e.fromVectors=function(t,n){var i=new e;return i.v1=t,i.v2=n,i},Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(t,e){this.type=t,this.depth=e},i=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.edgeCount=function(){return this.vertices.length>1?this.vertices.length:0},t.prototype.edges=function(){var t=this;return this.vertices.length>1?this.vertices.map((function(n,i){return e.fromVectors(t.vertices[i],t.vertices[i<t.vertices.length-1?i+1:0])})):[]},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),r=function(){function t(t,e,n){this.coordinates=t,this.lithology=e,this.polygon=n}return t.prototype.depth=function(){return this.lithology.reduce((function(t,e){return t+e.depth}),0)},t.prototype.quantities=function(){var t=new Map;if(this.polygon){var e=this.polygon.area();this.lithology.forEach((function(n){var i=t.get(n.type)||0;t.set(n.type,i+Math.round(e*n.depth))}))}return t},t}(),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},s=function(){function s(n){var r=this;this.renderer=n,this.axes=[],this.contour=new i,this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.quantities=new Map,this.mode=0,document.addEventListener("keyup",(function(t){"s"===t.key?r.mode=2:"c"===t.key?(r.mode=0,r.renderer.clearSurvey()):"l"===t.key?(r.mode=1,r.renderer.clearSurvey()):"Escape"===t.key&&r.renderer.clearSurvey()}));var o,s,a,u,h=-1,d=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);1===r.mode||0===r.mode?-1===(h=r.nearestLineIndexFrom(i,20,1===r.mode?r.axes:r.contour.edges()))?1===r.mode?(r.addLine(new e(i.x,i.y,i.x,i.y)),h=r.lines.length-1,o=r.lines[h].v2):0===r.mode&&(r.addContour(new e(i.x,i.y,i.x,i.y)),h=0,o=r.lines[h].v1):(1===r.mode&&(h+=r.contour.edgeCount()),i.sub(r.lines[h].v1).len()<20?o=r.lines[h].v1:i.sub(r.lines[h].v2).len()<20&&(o=r.lines[h].v2)):2===r.mode&&-1===(d=r.nearestSurveyIndexFrom(i,20))&&(r.addSurvey(i),d=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===r.mode||0===r.mode?(h=-1,o=null):2===r.mode&&(-1!==d?(s=r.surveys[d],r.renderer.drawSurvey(s)):s=null,d=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button){1===r.mode||0===r.mode?(o||-1!==h)&&(o?(o.x+=e.movementX,o.y+=e.movementY):r.lines[h].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(h),1===r.mode?r.renderer.drawLine(r.axes[h-r.contour.edgeCount()],(h-r.contour.edgeCount()).toString()):(h===r.contour.edgeCount()-1?(r.updateIntersectionTimes(h-1),r.updateIntersectionTimes(0)):0===h?(r.updateIntersectionTimes(r.contour.edgeCount()-1),r.updateIntersectionTimes(1)):(r.updateIntersectionTimes(h-1),r.updateIntersectionTimes(h+1)),r.renderer.drawContour(r.contour))):2===r.mode&&-1!==d&&(r.surveys[d].coordinates.x+=e.movementX,r.surveys[d].coordinates.y+=e.movementY,r.updateSurvey(r.surveys[d]));for(var n=new t(e.clientX,e.clientY),i=!1,s=a,u=0,l=r.polygons;u<l.length;u++){var c=l[u];if(c.contains(n)){c!==a&&(r.renderer.drawPolygon(c,"red"),a=c),i=!0;break}}i||(a=null),s&&s!==a&&r.renderer.drawPolygon(s,"white")}})),this.renderer.setSidebarMouseDownHandler((function(e){if(!e.button&&s)for(var n=new t(e.offsetX,e.offsetY),r=new t(300,100),o=0,a=s.lithology;o<a.length;o++){var h=a[o],d=new i([r.add(new t(-25,0)),r.add(new t(25,0)),r.add(new t(25,h.depth)),r.add(new t(-25,h.depth))]);if(r.y+=h.depth,d.contains(n)){u=h;break}}})),this.renderer.setSidebarMouseUpHandler((function(t){t.button||(u=null)})),this.renderer.setSidebarMouseMoveHandler((function(t){t.button||u&&(u.depth+=t.movementY,r.renderer.drawSurvey(s),r.updateQuantities())})),this.renderer.lithoChangeHandler=function(){r.updateQuantities()}}return Object.defineProperty(s.prototype,"lines",{get:function(){return this.contour.edges().concat(this.axes)},enumerable:!1,configurable:!0}),s.prototype.nearestLineIndexFrom=function(t,e,n){void 0===e&&(e=1/0),void 0===n&&(n=this.lines);for(var i,r=-1,o=1/0,s=0;s<n.length;s++)(i=n[s].nearestTo(t).sub(t).len())<e&&i<o&&(o=i,r=s);return r},s.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].coordinates.sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.addSurvey=function(t){for(var e,i=0,o=this.polygons;i<o.length;i++){var s=o[i];if(s.contains(t)){e=s;break}}var a=new r(t,[new n("non identifié",50),new n("non identifié",50),new n("non identifié",50)],e);this.surveys.push(a),this.renderer.drawPoint(t,e?(e.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateSurvey=function(t){t.polygon=null;for(var e=0,n=this.polygons;e<n.length;e++){var i=n[e];if(i.contains(t.coordinates)){t.polygon=i;break}}this.renderer.drawPoint(t.coordinates,t.polygon?(t.polygon.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateQuantities=function(){var t=this;this.quantities.clear(),this.surveys.forEach((function(e){e.quantities().forEach((function(e,n){t.quantities.set(n,(t.quantities.get(n)||0)+e)}))})),this.renderer.drawQuantities(this.quantities)},s.prototype.initIntersectionData=function(e,n,i,r,o){void 0===e&&(e=this.lines.length),void 0===n&&(n=this.lines.length),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s=[],a=[],u=0;u<n;u++)i[u].splice(e,0,NaN),r.push(new t),o[u].splice(e,0,r.length-1),s.push(NaN),a.push(r.length-1);s.splice(e,0,NaN),a.splice(e,0,-1),i.splice(e,0,s),o.splice(e,0,a)},s.prototype.addLine=function(t){var e=this.lines.length;this.initIntersectionData(e,e),this.axes.push(t),this.renderer.drawLine(t,e.toString()),this.updateIntersectionTimes(e)},s.prototype.addContour=function(t){var e=this.contour.edgeCount(),n=e+this.axes.length;this.initIntersectionData(0,n++),this.initIntersectionData(0,n++),this.contour.vertices.splice(0,0,t.v1,t.v2),this.renderer.drawContour(this.contour);var i=this.lines;0===e?(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i)):(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i,!0),this.updateIntersectionTimes(n-1,i))},s.prototype.updateIntersectionTimes=function(t,e,n,i,r,o){void 0===e&&(e=this.lines),void 0===n&&(n=!1),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s,a=e[t],u=0;u<e.length;u++)u!==t&&(s=e[u].intersectionTimesWith(a),i[u][t]=s.x,i[t][u]=s.y,u<t?r[o[u][t]]=e[u].pointAt(s.x):r[o[t][u]]=e[u].pointAt(s.x));n||this.renderIntersections()},s.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new i(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},s.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},s.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},s.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},s.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},s.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){var i=this;void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var r=this.contour.edgeCount(),o=e.map((function(t,o){return t.map((function(t,e){return e})).filter((function(s){return!isNaN(t[s])&&0<=t[s]&&t[s]<=1&&!isNaN(e[s][o])&&0<=e[s][o]&&e[s][o]<=1&&(o<r||s<r||i.contour.contains(i.intersections[n[o][s]]))})).sort((function(e,n){return t[e]-t[n]}))})),s=[],a=function(e){for(var i=0;i<o[e].length;i++){var r=o[e][i];if(e<r){var a=n[e][o[e][i]],h=i-1,d=i+1,l=o[r].findIndex((function(t){return t===e})),c=u.testSide(t[e].v1,t[e].v2,t[r].v1),p=c?l-1:l+1,v=c?l+1:l-1,y=0<i?n[e][o[e][h]]:null,f=i<o[e].length-1?n[e][o[e][d]]:null,g=-1<p&&p<o[r].length?n[r][o[r][p]]:null,m=-1<v&&v<o[r].length?n[r][o[r][v]]:null,w=u.buildPartialsFromIntersectionIndexes(a,[y,m,f,g]);s.push.apply(s,w)}}},u=this,h=0;h<o.length;h++)a(h);return s},s.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],r=0;r<t.length;){for(var s=0;s<t.length;s++)if(r!==s&&this.partialsOverlaps(t[r],t[s])){(e=t[r]).splice.apply(e,o([-2,2],t[s])),t.splice(s,1),s<r&&r--,(n=this.partialsOverlaps(t[r],t[r])||this.partialsMeet(t[r],t[r]))>0&&(t[r].splice(0,n),i.push(t[r]),t.splice(r,1)),r=-1;break}r++}return i},s}(),a=document.createElementNS("http://www.w3.org/2000/svg","g");a.setAttribute("stroke","black"),a.setAttribute("stroke-width","0.4px");var u=document.createElementNS("http://www.w3.org/2000/svg","line");u.setAttribute("stroke-dasharray","10, 4, 1, 4");var h=document.createElementNS("http://www.w3.org/2000/svg","path");h.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),h.setAttribute("fill","white");var d=document.createElementNS("http://www.w3.org/2000/svg","text");d.setAttribute("text-anchor","middle"),d.setAttribute("alignment-baseline","central"),d.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),d.setAttribute("font-weight","100"),d.setAttribute("font-size","14px"),a.appendChild(u),a.appendChild(h),a.appendChild(h.cloneNode()),a.appendChild(d),a.appendChild(d.cloneNode());var l=document.createElementNS("http://www.w3.org/2000/svg","g");l.setAttribute("stroke","black"),l.setAttribute("stroke-width","0.4px");var c=document.createElementNS("http://www.w3.org/2000/svg","circle");c.setAttribute("fill","green"),c.setAttribute("r","3");var p=document.createElementNS("http://www.w3.org/2000/svg","text");p.setAttribute("transform","translate(0, 10)"),p.setAttribute("text-anchor","middle"),p.setAttribute("alignment-baseline","hanging"),p.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),p.setAttribute("font-weight","100"),p.setAttribute("font-size","14px"),p.setAttribute("font-style","italic"),l.appendChild(c),l.appendChild(p);var v=document.createElementNS("http://www.w3.org/2000/svg","path");v.setAttribute("fill","green"),v.setAttribute("fill-opacity","0.7"),v.setAttribute("stroke-width","0.8px"),v.setAttribute("stroke-dasharray","5, 2"),v.setAttribute("stroke","black");var y=document.createElementNS("http://www.w3.org/2000/svg","g");y.setAttribute("transform","translate(300, 100)");var f=document.createElementNS("http://www.w3.org/2000/svg","path");f.setAttribute("fill","url(#earth-hatch)"),f.setAttribute("stroke-width","0");var g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("fill-opacity","0"),g.setAttribute("stroke","black"),g.setAttribute("stroke-width","0.8px");var m=document.createElementNS("http://www.w3.org/2000/svg","g");y.appendChild(m),y.appendChild(f),y.appendChild(g);var w=document.createElementNS("http://www.w3.org/2000/svg","rect"),b=document.createElementNS("http://www.w3.org/2000/svg","pattern");b.id="earth-hatch",b.setAttribute("patternUnits","userSpaceOnUse"),b.setAttribute("width","25"),b.setAttribute("height","25"),b.setAttribute("stroke","#222d32"),b.setAttribute("stroke-width","0.4px");for(var x=document.createElementNS("http://www.w3.org/2000/svg","path"),C=0,A=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];C<A.length;C++){var M=A[C];x.setAttribute("d",M),b.appendChild(x),x=x.cloneNode()}var S=document.createElement("select");S.style.position="absolute",S.style.transform="translateY(-49%)",S.style.left="24px";for(var N=document.createElement("option"),F=["non identifié","argile","calcaire"],E=new Map([[F[0],"#fde312"],[F[1],"#289fde"],[F[2],"#abfe12"]]),I=0,P=F;I<P.length;I++){var T=P[I];N.innerHTML=T,N.setAttribute("value",T),S.appendChild(N),N=N.cloneNode()}var L=document.createElement("p");L.style.borderLeftWidth="14px",L.style.fontFamily='consolas, "Liberation Mono", courier, monospace',L.style.fontWeight="100",L.style.fontSize="14px",L.style.height="14px",L.style.paddingLeft="8px";var R=document.createElementNS("http://www.w3.org/2000/svg","path");R.setAttribute("fill","green"),new s(new(function(){function t(){this.selectContainer=document.createElement("div"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svgContourPath=R.cloneNode(),this.svg=document.querySelector(".content"),this.sidebarDiv=document.querySelector(".sidebar"),this.sidebarSvg=document.querySelector(".sidebar > svg"),this.svg.prepend(this.svgContourPath),this.svg.appendChild(b),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.quantitiesContainer=document.querySelector(".quantities.container"),this.sidebarSvg.appendChild(this.surveyContainer),this.sidebarDiv.appendChild(this.selectContainer)}return t.prototype._setEventHandler=function(t,e,n){this.handlers[e]&&t.removeEventListener(e,this.handlers[e]),this.handlers[e]=n,t.addEventListener(e,this.handlers[e])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler(this.svg,"mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler(this.svg,"mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler(this.svg,"mousemove",t)},t.prototype.setSidebarMouseDownHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousedown",t)},t.prototype.setSidebarMouseUpHandler=function(t){this._setEventHandler(this.sidebarSvg,"mouseup",t)},t.prototype.setSidebarMouseMoveHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=a.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],s=n.children[3],u=n.children[4],h=t.x1.toFixed(),d=t.y1.toFixed(),l=t.x2.toFixed(),c=t.y2.toFixed();i.setAttribute("x1",h),i.setAttribute("y1",d),i.setAttribute("x2",l),i.setAttribute("y2",c),s.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+h+", "+d+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+l+", "+c+") rotate("+(isNaN(p)?0:180+p)+")"),s.setAttribute("transform","translate("+(isNaN(v.x)?h:v.x.toFixed())+", "+(isNaN(v.y)?d:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?l:y.x.toFixed())+", "+(isNaN(y.y)?c:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=l.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=v.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.drawContour=function(t){this.svgContourPath.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z")},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e=this;this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer);var n="M "+(-100).toFixed()+", 0 h "+75..toFixed()+" v "+t.depth().toFixed()+" h "+50..toFixed()+" v "+-t.depth().toFixed()+" h "+75..toFixed(),i=n+" v "+10..toFixed()+" h "+(-65).toFixed()+" v "+t.depth().toFixed()+" h "+(-70).toFixed()+" v "+-t.depth().toFixed()+" h "+(-65).toFixed()+" Z",r=y.cloneNode(!0),o=r.children[0],s=r.children[1],a=r.children[2];s.setAttribute("d",i),a.setAttribute("d",n);for(var u=0,h=function(n){var i=w.cloneNode();i.setAttribute("x",(-25).toFixed()),i.setAttribute("y",u.toFixed()),i.setAttribute("width",50..toFixed()),i.setAttribute("height",t.lithology[n].depth.toFixed()),i.setAttribute("fill",E.get(t.lithology[n].type)),o.appendChild(i);var r=S.cloneNode(!0);r.querySelector('option[value="'+t.lithology[n].type+'"]').setAttribute("selected","selected"),r.addEventListener("change",(function(o){t.lithology[n].type=r.value,i.setAttribute("fill",E.get(r.value)),e.lithoChangeHandler()})),r.style.top=(u+100+t.lithology[n].depth/2).toFixed()+"px",d.selectContainer.appendChild(r),u+=t.lithology[n].depth},d=this,l=0;l<t.lithology.length;l++)h(l);this.surveyContainer.appendChild(r),this.sidebarDiv.classList.add("visible")},t.prototype.clearSurvey=function(){this.sidebarDiv.classList.remove("visible"),this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer)},t.prototype.drawQuantities=function(t){var e=this;this.clearContainer(this.quantitiesContainer),t.forEach((function(t,n){var i=L.cloneNode();i.innerHTML=n+" ("+(t/5e3).toFixed(2)+" m³)",i.style.borderLeft="8px solid "+E.get(n),e.quantitiesContainer.appendChild(i)}))},t}()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9saW5lLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvbGl0aG9sb2dpY2FsLWxheWVyLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvcG9seWdvbi50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3N1cnZleS50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3BvbHBsb3QudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9zdmctcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ4IiwieSIsImRvdFJhdyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG90IiwidSIsInYiLCJ0aGlzIiwib3RoZXIiLCJWZWN0b3IyIiwiY3Jvc3NSYXciLCJjcm9zcyIsImxlbjJSYXciLCJNYXRoIiwicG93IiwibGVuMiIsImxlblJhdyIsInNxcnQiLCJsZW4iLCJub3JtYWxpemVSYXciLCJieSIsImNvZWYiLCJtdWxSYXciLCJub3JtYWxpemUiLCJlcXVhbHNSYXciLCJlcXVhbHMiLCJhZGRSYXciLCJhZGQiLCJzdWJSYXciLCJzdWIiLCJtdWwiLCJpbnRlcnNlY3Rpb25UaW1lc1JhdyIsImZ4IiwiZnkiLCJ0eCIsInR5Iiwic3giLCJzeSIsImV4IiwiZXkiLCJkZXQiLCJpbnRlcnNlY3Rpb25UaW1lcyIsImZyb20iLCJ0byIsInN0YXJ0IiwiZW5kIiwiaW50ZXJzZWN0aW9uUmF3IiwidGltZXMiLCJpbnRlcnNlY3Rpb24iLCJhbmdsZSIsImExIiwiYTIiLCJQSSIsImFjb3MiLCJ2MSIsInYyIiwiZnJvbVZlY3RvcnMiLCJsaW5lIiwiTGluZSIsInBvaW50QXQiLCJ0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJpbnRlcnNlY3Rpb25UaW1lc1dpdGgiLCJ1cGRhdGUiLCJkeDEiLCJkeTEiLCJkeDIiLCJkeTIiLCJuZWFyZXN0VG8iLCJwIiwibWF4IiwibWluIiwidHlwZSIsImRlcHRoIiwidmVydGljZXMiLCJhcmVhQmV0d2VlbiIsImkiLCJqIiwiYXJlYSIsImEiLCJsZW5ndGgiLCJjb250YWlucyIsImMiLCJyZXZlcnNlIiwiZWRnZUNvdW50IiwiZWRnZXMiLCJtYXAiLCJ0b1N0cmluZyIsInRvRml4ZWQiLCJqb2luIiwiY29vcmRpbmF0ZXMiLCJsaXRob2xvZ3kiLCJwb2x5Z29uIiwicmVkdWNlIiwibGF5ZXIiLCJxdWFudGl0aWVzIiwiTWFwIiwiZm9yRWFjaCIsImxpdGhvbG9naWNhbExheWVyIiwicXVhbnRpdHkiLCJnZXQiLCJzZXQiLCJyb3VuZCIsInJlbmRlcmVyIiwiYXhlcyIsImNvbnRvdXIiLCJQb2x5Z29uIiwiaW50ZXJzZWN0aW9ucyIsImludGVyc2VjdGlvbkluZGV4IiwicG9seWdvbnMiLCJzdXJ2ZXlzIiwibW9kZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwia2V5IiwiY2xlYXJTdXJ2ZXkiLCJkcmFnZ2VkVmVjdG9yMiIsImFjdGl2ZVN1cnZleSIsInBvbHlnb25Db250YWluZXIiLCJkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIiLCJkcmFnZ2VkTGluZUluZGV4IiwiZHJhZ2dlZFN1cnZleUluZGV4Iiwic2V0TW91c2VEb3duSGFuZGxlciIsImJ1dHRvbiIsIm1vdXNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJuZWFyZXN0TGluZUluZGV4RnJvbSIsImFkZExpbmUiLCJsaW5lcyIsImFkZENvbnRvdXIiLCJuZWFyZXN0U3VydmV5SW5kZXhGcm9tIiwiYWRkU3VydmV5Iiwic2V0TW91c2VVcEhhbmRsZXIiLCJkcmF3U3VydmV5Iiwic2V0TW91c2VNb3ZlSGFuZGxlciIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsInVwZGF0ZUludGVyc2VjdGlvblRpbWVzIiwiZHJhd0xpbmUiLCJkcmF3Q29udG91ciIsInVwZGF0ZVN1cnZleSIsImlzSW5zaWRlIiwib2xkUG9seWdvbkNvbnRhaW5lciIsImRyYXdQb2x5Z29uIiwic2V0U2lkZWJhck1vdXNlRG93bkhhbmRsZXIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm9mZnNldCIsInNldFNpZGViYXJNb3VzZVVwSGFuZGxlciIsInNldFNpZGViYXJNb3VzZU1vdmVIYW5kbGVyIiwidXBkYXRlUXVhbnRpdGllcyIsImxpdGhvQ2hhbmdlSGFuZGxlciIsImNvbmNhdCIsInRocmVzaG9sZCIsImRpc3QiLCJuZWFyZXN0TGluZUluZGV4IiwibmVhcmVzdERpc3QiLCJuZWFyZXN0U3VydmV5SW5kZXgiLCJjb250YWluZXIiLCJzdXJ2ZXkiLCJTdXJ2ZXkiLCJMaXRob2xvZ2ljYWxMYXllciIsInB1c2giLCJkcmF3UG9pbnQiLCJjbGVhciIsImRyYXdRdWFudGl0aWVzIiwiaW5pdEludGVyc2VjdGlvbkRhdGEiLCJhdCIsImxpbmVDb3VudCIsIm5ld0ludGVyc2VjdGlvblRpbWVzIiwibmV3SW50ZXJzZWN0aW9uSW5kZXgiLCJzcGxpY2UiLCJOYU4iLCJza2lwUmVuZGVyIiwicmVuZGVySW50ZXJzZWN0aW9ucyIsImNsZWFyUG9seWdvbnMiLCJwYXJ0aWFscyIsImJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMiLCJidWlsZFBvbHlnb25JbmRleGVzRnJvbVBhcnRpYWxzIiwicG9seWdvbkluZGV4IiwidGVzdFNpZGUiLCJ3IiwicGFydGlhbHNPdmVybGFwcyIsInAxIiwicDIiLCJwYXJ0aWFsc01lZXQiLCJidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMiLCJjZW50ZXIiLCJpbmRleGVzIiwicGFydHMiLCJpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkiLCJpbnRlcnNlY3Rpb25UaW1lc0F0SSIsIl8iLCJmaWx0ZXIiLCJpc05hTiIsInNvcnQiLCJsb2NhbEluZGV4IiwibG9jYWxJbnRlckluZGV4IiwiZm9yZWlnbkluZGV4IiwiaW50ZXIiLCJwcmV2TG9jYWxJbnRlckluZGV4IiwibmV4dExvY2FsSW50ZXJJbmRleCIsImZvcmVpZ25JbnRlckluZGV4IiwiZmluZEluZGV4IiwiZm9yZWlnbmlzUmlnaHRTaWRlZCIsInByZXZGb3JlaWduSW50ZXJJbmRleCIsIm5leHRGb3JlaWduSW50ZXJJbmRleCIsInByZXZMb2NhbEludGVyIiwibmV4dExvY2FsSW50ZXIiLCJwcmV2Rm9yZWlnbkludGVyIiwibmV4dEZvcmVpZ25JbnRlciIsIm92ZXJsYXAiLCJwb2x5Z29uSW5kZXhlcyIsImdUZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImxpbmVUZW1wbGF0ZSIsImFuY2hvclRlbXBsYXRlIiwidGV4dFRlbXBsYXRlIiwiYXBwZW5kQ2hpbGQiLCJjbG9uZU5vZGUiLCJnUG9pbnRUZW1wbGF0ZSIsInBvaW50VGVtcGxhdGUiLCJ0ZXh0UG9pbnRUZW1wbGF0ZSIsInBvbHlnb25UZW1wbGF0ZSIsImdTdXJ2ZXlUZW1wbGF0ZSIsInN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZSIsInN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZSIsInN1cnZleUxpdGhvbG9neVRlbXBsYXRlIiwibGl0aG9sb2dpY2FsTGF5ZXJSZWN0VGVtcGxhdGUiLCJoYXRjaFBhdHRlcm4iLCJpZCIsImhhdGNoUGF0aCIsImQiLCJzZWxlY3RUZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInBvc2l0aW9uIiwidHJhbnNmb3JtIiwibGVmdCIsIm9wdGlvblRlbXBsYXRlIiwidmFsdWVzIiwiY29sb3JzIiwidmFsdWUiLCJpbm5lckhUTUwiLCJwVGVtcGxhdGUiLCJib3JkZXJMZWZ0V2lkdGgiLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwiaGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJjb250b3VyVGVtcGxhdGUiLCJQb2xwbG90Iiwic2VsZWN0Q29udGFpbmVyIiwicG9pbnRDb250YWluZXIiLCJsaW5lQ29udGFpbmVyIiwic3VydmV5Q29udGFpbmVyIiwic3ZnR0J5TGluZSIsInN2Z1BhdGhCeVBvbHlnb24iLCJzdmdHQnlQb2ludCIsImhhbmRsZXJzIiwic3ZnQ29udG91clBhdGgiLCJzdmciLCJxdWVyeVNlbGVjdG9yIiwic2lkZWJhckRpdiIsInNpZGViYXJTdmciLCJwcmVwZW5kIiwicXVhbnRpdGllc0NvbnRhaW5lciIsIl9zZXRFdmVudEhhbmRsZXIiLCJoYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm5hbWUiLCJzdmdHIiwiaGFzIiwic3ZnTGluZSIsImNoaWxkcmVuIiwic3ZnUGF0aEFuY2hvclN0YXJ0Iiwic3ZnUGF0aEFuY2hvckVuZCIsInN2Z1RleHRTdGFydCIsInN2Z1RleHRFbmQiLCJlcmFzZUxpbmUiLCJyZW1vdmVDaGlsZCIsImRlbGV0ZSIsInBvaW50Iiwic3ZnVGV4dCIsImNsZWFyQ29udGFpbmVyIiwiZmlyc3RDaGlsZCIsImNsZWFySW50ZXJzZWN0aW9ucyIsImZpbGwiLCJzdmdQYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkQm90dG9tIiwiYm90dG9tUG9seWdvbiIsInRvcFBvbHlnb24iLCJ0b3AiLCJzZWxlY3QiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJib3JkZXJMZWZ0Il0sIm1hcHBpbmdzIjoibUJBQUEsaUJBQ0UsV0FBbUJBLEVBQWNDLFFBQWQsSUFBQUQsTUFBQSxRQUFjLElBQUFDLE1BQUEsR0FBZCxLQUFBRCxJQUFjLEtBQUFDLElBcUluQyxPQXBJUyxFQUFBQyxPQUFQLFNBQWNDLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2hELE9BQU9ILEVBQUtFLEVBQUtELEVBQUtFLEdBRWpCLEVBQUFDLElBQVAsU0FBV0MsRUFBWUMsR0FDckIsT0FBT0MsS0FBS1IsT0FBT00sRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFdEMsWUFBQU0sSUFBQSxTQUFJSSxHQUNGLE9BQU9DLEVBQVFMLElBQUlHLEtBQU1DLElBRXBCLEVBQUFFLFNBQVAsU0FBZ0JWLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2xELE9BQU9I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WUFBQXpGLGVBQUEsU0FBZXhFLEdBQWYsV0FDRXpGLEtBQUswUixlQUFlMVIsS0FBS3dRLHFCQUN6Qi9LLEVBQVdFLFNBQVEsU0FBQ0UsRUFBVTNCLEdBQzVCLElBQU1ILEVBQUlrTCxFQUFVekIsWUFDcEJ6SixFQUFFaUwsVUFBZTlLLEVBQUksTUFBTTJCLEVBQVcsS0FBZ0JYLFFBQVEsR0FBRSxPQUNoRW5CLEVBQUV5SyxNQUFNZ0UsV0FBYSxhQUFhMUQsRUFBT2hKLElBQUk1QixHQUM3QyxFQUFLc00sb0JBQW9CakQsWUFBWXhKLE9BRzNDLEVBMU1BLE0iLCJmaWxlIjoibWFpbi5qcyIsInNvdXJjZXNDb250ZW50IjpbImV4cG9ydCBjbGFzcyBWZWN0b3IyIHtcclxuICBjb25zdHJ1Y3RvcihwdWJsaWMgeCA9IDAsIHB1YmxpYyB5ID0gMCkge31cclxuICBzdGF0aWMgZG90UmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHgxICogeDIgKyB5MSAqIHkyO1xyXG4gIH1cclxuICBzdGF0aWMgZG90KHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMuZG90UmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGRvdChvdGhlcjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5kb3QodGhpcywgb3RoZXIpO1xyXG4gIH1cclxuICBzdGF0aWMgY3Jvc3NSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4geDEgKiB5MiAtIHgyICogeTE7XHJcbiAgfVxyXG4gIHN0YXRpYyBjcm9zcyh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmNyb3NzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGNyb3NzKG90aGVyOiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLmNyb3NzKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGxlbjJSYXcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGgucG93KHgsIDIpICsgTWF0aC5wb3coeSwgMik7XHJcbiAgfVxyXG4gIHN0YXRpYyBsZW4yKHU6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubGVuMlJhdyh1LngsIHUueSk7XHJcbiAgfVxyXG4gIGxlbjIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLmxlbjIodGhpcyk7XHJcbiAgfVxyXG4gIHN0YXRpYyBsZW5SYXcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIE1hdGguc3FydCh0aGlzLmxlbjJSYXcoeCwgeSkpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuKHU6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubGVuUmF3KHUueCwgdS55KTtcclxuICB9XHJcbiAgbGVuKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5sZW4odGhpcyk7XHJcbiAgfVxyXG4gIHN0YXRpYyBub3JtYWxpemVSYXcoeDogbnVtYmVyLCB5OiBudW1iZXIsIGJ5OiBudW1iZXIgPSAxKTogVmVjdG9yMiB7XHJcbiAgICBjb25zdCBjb2VmID0gYnkgLyB0aGlzLmxlblJhdyh4LCB5KTtcclxuICAgIHJldHVybiB0aGlzLm11bFJhdyh4LCB5LCBjb2VmKTtcclxuICB9XHJcbiAgc3RhdGljIG5vcm1hbGl6ZSh1OiBWZWN0b3IyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplUmF3KHUueCwgdS55LCBieSk7XHJcbiAgfVxyXG4gIG5vcm1hbGl6ZShieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIubm9ybWFsaXplKHRoaXMsIGJ5KTtcclxuICB9XHJcbiAgc3RhdGljIGVxdWFsc1Jhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4geDEgPT09IHgyICYmIHkxID09PSB5MjtcclxuICB9XHJcbiAgc3RhdGljIGVxdWFscyh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdGhpcy5lcXVhbHNSYXcodS54LCB1LnksIHYueCwgdi55KTtcclxuICB9XHJcbiAgZXF1YWxzKG90aGVyOiBWZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5lcXVhbHModGhpcywgb3RoZXIpO1xyXG4gIH1cclxuICBzdGF0aWMgYWRkUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMih4MSArIHgyLCB5MSArIHkyKTtcclxuICB9XHJcbiAgc3RhdGljIGFkZCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5hZGRSYXcodS54LCB1LnksIHYueCwgdi55KTtcclxuICB9XHJcbiAgYWRkKG90aGVyOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5hZGQodGhpcywgb3RoZXIpO1xyXG4gIH1cclxuICBzdGF0aWMgc3ViUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBuZXcgVmVjdG9yMih4MSAtIHgyLCB5MSAtIHkyKTtcclxuICB9XHJcbiAgc3RhdGljIHN1Yih1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5zdWJSYXcodS54LCB1LnksIHYueCwgdi55KTtcclxuICB9XHJcbiAgc3ViKG90aGVyOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5zdWIodGhpcywgb3RoZXIpO1xyXG4gIH1cclxuICBzdGF0aWMgbXVsUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCAqIGJ5LCB5ICogYnkpO1xyXG4gIH1cclxuICBzdGF0aWMgbXVsKHU6IFZlY3RvcjIsIGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLm11bFJhdyh1LngsIHUueSwgYnkpO1xyXG4gIH1cclxuICBtdWwoYnk6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIubXVsKHRoaXMsIGJ5KTtcclxuICB9XHJcbiAgc3RhdGljIGludGVyc2VjdGlvblRpbWVzUmF3KFxyXG4gICAgZng6IG51bWJlciwgZnk6IG51bWJlciwgdHg6IG51bWJlciwgdHk6IG51bWJlcixcclxuICAgIHN4OiBudW1iZXIsIHN5OiBudW1iZXIsIGV4OiBudW1iZXIsIGV5OiBudW1iZXJcclxuICApOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcclxuICAgIGNvbnN0IGRldCA9IHRoaXMuY3Jvc3NSYXcodHggLSBmeCwgdHkgLSBmeSwgZXggLSBzeCwgZXkgLSBzeSk7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoXHJcbiAgICAgIHRoaXMuY3Jvc3NSYXcoZXggLSBzeCwgZXkgLSBzeSwgZnggLSBzeCwgZnkgLSBzeSkgLyBkZXQsXHJcbiAgICAgIHRoaXMuY3Jvc3NSYXcodHggLSBmeCwgdHkgLSBmeSwgZnggLSBzeCwgZnkgLSBzeSkgLyBkZXRcclxuICAgICk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25UaW1lcyhcclxuICAgIGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyXHJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25UaW1lc1Jhdyhmcm9tLngsIGZyb20ueSwgdG8ueCwgdG8ueSwgc3RhcnQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55KTtcclxuICB9XHJcbiAgaW50ZXJzZWN0aW9uVGltZXModG86IFZlY3RvcjIsIHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjIpOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiBWZWN0b3IyLmludGVyc2VjdGlvblRpbWVzKHRoaXMsIHRvLCBzdGFydCwgZW5kKTtcclxuICB9XHJcbiAgc3RhdGljIGludGVyc2VjdGlvblJhdyhcclxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXHJcbiAgICBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyXHJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCB0aW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZngsIGZ5LCB0eCwgdHksIHN4LCBzeSwgZXgsIGV5KTtcclxuICAgIGlmICh0aW1lcykge1xyXG4gICAgICB0aW1lcy55ID0gZnkgKyAodHkgLSBmeSkgKiB0aW1lcy54O1xyXG4gICAgICB0aW1lcy54ID0gZnggKyAodHggLSBmeCkgKiB0aW1lcy54O1xyXG4gICAgICByZXR1cm4gdGltZXM7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb24oZnJvbTogVmVjdG9yMiwgdG86IFZlY3RvcjIsIHN0YXJ0OiBWZWN0b3IyLCBlbmQ6IFZlY3RvcjIpOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcclxuICAgIHJldHVybiB0aGlzLmludGVyc2VjdGlvblJhdyhmcm9tLngsIGZyb20ueSwgdG8ueCwgdG8ueSwgc3RhcnQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55KTtcclxuICB9XHJcbiAgaW50ZXJzZWN0aW9uKHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb24odGhpcywgdG8sIHN0YXJ0LCBlbmQpO1xyXG4gIH1cclxuICBhbmdsZShvdGhlcj86IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgaWYgKG90aGVyKSB7XHJcbiAgICAgICBjb25zdCBhMSA9IHRoaXMuYW5nbGUoKTtcclxuICAgICAgIGNvbnN0IGEyID0gb3RoZXIuYW5nbGUoKTtcclxuICAgICAgIGlmIChhMiA8IGExKSB7XHJcbiAgICAgICAgcmV0dXJuIGEyICsgMiAqIE1hdGguUEkgLSBhMTtcclxuICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgcmV0dXJuIGEyIC0gYTE7XHJcbiAgICAgICB9XHJcbiAgICB9IGVsc2UgaWYgKHRoaXMueSA+IDApIHtcclxuICAgICAgcmV0dXJuIE1hdGguYWNvcyh0aGlzLnggLyB0aGlzLmxlbigpKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHJldHVybiAyICogTWF0aC5QSSAtIE1hdGguYWNvcyh0aGlzLnggLyB0aGlzLmxlbigpKTtcclxuICAgIH1cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIExpbmUge1xyXG4gIHN0YXRpYyBmcm9tVmVjdG9ycyh2MTogVmVjdG9yMiwgdjI6IFZlY3RvcjIpOiBMaW5lIHtcclxuICAgIGNvbnN0IGxpbmUgPSBuZXcgTGluZSgpO1xyXG4gICAgbGluZS52MSA9IHYxO1xyXG4gICAgbGluZS52MiA9IHYyO1xyXG4gICAgcmV0dXJuIGxpbmU7XHJcbiAgfVxyXG4gIHYxOiBWZWN0b3IyO1xyXG4gIHYyOiBWZWN0b3IyO1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgeDE/OiBudW1iZXIsXHJcbiAgICB5MT86IG51bWJlcixcclxuICAgIHgyPzogbnVtYmVyLFxyXG4gICAgeTI/OiBudW1iZXJcclxuICApIHtcclxuICAgIHRoaXMudjEgPSBuZXcgVmVjdG9yMih4MSwgeTEpO1xyXG4gICAgdGhpcy52MiA9IG5ldyBWZWN0b3IyKHgyLCB5Mik7XHJcbiAgfVxyXG4gIGdldCB4MSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEueDtcclxuICB9XHJcbiAgZ2V0IHkxKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52MS55O1xyXG4gIH1cclxuICBnZXQgeDIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYyLng7XHJcbiAgfVxyXG4gIGdldCB5MigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjIueTtcclxuICB9XHJcbiAgbGVuKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52Mi5zdWIodGhpcy52MSkubGVuKCk7XHJcbiAgfVxyXG4gIHBvaW50QXQodDogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy52MS5hZGQodGhpcy52Mi5zdWIodGhpcy52MSkubXVsKHQpKTtcclxuICB9XHJcbiAgYmVmb3JlKHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCgtdCAvIHRoaXMubGVuKCkpKTtcclxuICB9XHJcbiAgYWZ0ZXIodDogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy52MS5hZGQodGhpcy52Mi5zdWIodGhpcy52MSkubXVsKCh0aGlzLmxlbigpICsgdCkgLyB0aGlzLmxlbigpKSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvblRpbWVzV2l0aChvdGhlcjogTGluZSk6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuaW50ZXJzZWN0aW9uVGltZXModGhpcy52Miwgb3RoZXIudjEsIG90aGVyLnYyKTtcclxuICB9XHJcbiAgdXBkYXRlKGR4MSA9IDAsIGR5MSA9IDAsIGR4MiA9IDAsIGR5MiA9IDApOiB2b2lkIHtcclxuICAgIHRoaXMudjEueCArPSBkeDE7XHJcbiAgICB0aGlzLnYxLnkgKz0gZHkxO1xyXG4gICAgdGhpcy52Mi54ICs9IGR4MjtcclxuICAgIHRoaXMudjIueSArPSBkeTI7XHJcbiAgfVxyXG4gIG5lYXJlc3RUbyhwOiBWZWN0b3IyKTogVmVjdG9yMiB7XHJcbiAgICBpZiAodGhpcy52MS5lcXVhbHModGhpcy52MikpIHtcclxuICAgICAgcmV0dXJuIG5ldyBWZWN0b3IyKHRoaXMudjEueCwgdGhpcy52MS55KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHUgPSB0aGlzLnYyLnN1Yih0aGlzLnYxKTtcclxuICAgIGNvbnN0IHQgPSB1LmRvdChwLnN1Yih0aGlzLnYxKSkgLyB1LmxlbjIoKTtcclxuICAgIHJldHVybiB0aGlzLnBvaW50QXQoTWF0aC5tYXgoMCwgTWF0aC5taW4odCwgMSkpKTtcclxuICB9XHJcbn0iLCJleHBvcnQgY2xhc3MgTGl0aG9sb2dpY2FsTGF5ZXIge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIHR5cGU6IHN0cmluZyxcclxuICAgIHB1YmxpYyBkZXB0aDogbnVtYmVyLFxyXG4gICkge1xyXG5cclxuICB9XHJcbn0iLCJpbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vbGluZVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFBvbHlnb24ge1xyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHZlcnRpY2VzOiBWZWN0b3IyW10gPSBbXSkge1xyXG5cclxuICB9XHJcbiAgcHJpdmF0ZSBhcmVhQmV0d2VlbihpOiBudW1iZXIsIGo6IG51bWJlcik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gKHRoaXMudmVydGljZXNbal0ueCAtIHRoaXMudmVydGljZXNbaV0ueCkgKiAodGhpcy52ZXJ0aWNlc1tpXS55ICsgdGhpcy52ZXJ0aWNlc1tqXS55KSAvIDI7XHJcbiAgfVxyXG4gIGFyZWEoKTogbnVtYmVyIHtcclxuICAgIGxldCBhID0gMDtcclxuICAgIGxldCBpID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxO1xyXG4gICAgZm9yIChsZXQgaiA9IDA7IGogPCB0aGlzLnZlcnRpY2VzLmxlbmd0aDsgaisrKSB7XHJcbiAgICAgIGEgKz0gdGhpcy5hcmVhQmV0d2VlbihpLCBqKTtcclxuICAgICAgaSA9IGo7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gYTtcclxuICB9XHJcbiAgY29udGFpbnModjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgbGV0IGMgPSBmYWxzZTtcclxuICAgIGZvciAobGV0IGkgPSAwLCBqID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxOyBpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGogPSBpKyspIHtcclxuICAgICAgaWYgKFxyXG4gICAgICAgIHRoaXMudmVydGljZXNbaV0ueSA+IHYueSAhPT0gdGhpcy52ZXJ0aWNlc1tqXS55ID4gdi55ICYmXHJcbiAgICAgICAgdi54IDwgKHRoaXMudmVydGljZXNbal0ueCAtIHRoaXMudmVydGljZXNbaV0ueCkgKiAodi55IC0gdGhpcy52ZXJ0aWNlc1tpXS55KSAvICh0aGlzLnZlcnRpY2VzW2pdLnkgLSB0aGlzLnZlcnRpY2VzW2ldLnkpICsgdGhpcy52ZXJ0aWNlc1tpXS54XHJcbiAgICAgICkge1xyXG4gICAgICAgIGMgPSAhYztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIGM7XHJcbiAgfVxyXG4gIHJldmVyc2UoKTogdm9pZCB7XHJcbiAgICB0aGlzLnZlcnRpY2VzLnJldmVyc2UoKTtcclxuICB9XHJcbiAgZWRnZUNvdW50KCk6IG51bWJlciB7XHJcbiAgICBpZiAodGhpcy52ZXJ0aWNlcy5sZW5ndGggPiAxKSB7XHJcbiAgICAgIHJldHVybiB0aGlzLnZlcnRpY2VzLmxlbmd0aDtcclxuICAgIH1cclxuICAgIHJldHVybiAwO1xyXG4gIH1cclxuICBlZGdlcygpOiBMaW5lW10ge1xyXG4gICAgaWYgKHRoaXMudmVydGljZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcy5tYXAoKHYsIGkpID0+IExpbmUuZnJvbVZlY3RvcnModGhpcy52ZXJ0aWNlc1tpXSwgdGhpcy52ZXJ0aWNlc1tpIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxID8gaSArIDEgOiAwXSkpO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIFtdO1xyXG4gIH1cclxuICB0b1N0cmluZygpOiBzdHJpbmcge1xyXG4gICAgcmV0dXJuIGAke3RoaXMudmVydGljZXMubGVuZ3RofSBwb2ludHM6IGAgKyB0aGlzLnZlcnRpY2VzLm1hcCh2ID0+IGAoJHt2LngudG9GaXhlZCgpfSwgJHt2LnkudG9GaXhlZCgpfSlgKS5qb2luKCcsICcpICsgYCAoYXJlYTogJHt0aGlzLmFyZWEoKS50b0ZpeGVkKCl9KWA7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgTGl0aG9sb2dpY2FsTGF5ZXIgfSBmcm9tIFwiLi9saXRob2xvZ2ljYWwtbGF5ZXJcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdXJ2ZXkge1xyXG4gIGNvbnN0cnVjdG9yKFxyXG4gICAgcHVibGljIGNvb3JkaW5hdGVzOiBWZWN0b3IyLFxyXG4gICAgcHVibGljIGxpdGhvbG9neTogTGl0aG9sb2dpY2FsTGF5ZXJbXSxcclxuICAgIHB1YmxpYyBwb2x5Z29uOiBQb2x5Z29uLFxyXG4gICkge1xyXG5cclxuICB9XHJcbiAgZGVwdGgoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxpdGhvbG9neS5yZWR1Y2UoKGRlcHRoLCBsYXllcikgPT4gZGVwdGggKyBsYXllci5kZXB0aCwgMCk7XHJcbiAgfVxyXG4gIHF1YW50aXRpZXMoKTogTWFwPHN0cmluZywgbnVtYmVyPiB7XHJcbiAgICBjb25zdCBxdWFudGl0aWVzID0gbmV3IE1hcDxzdHJpbmcsIG51bWJlcj4oKTtcclxuICAgIGlmICh0aGlzLnBvbHlnb24pIHtcclxuICAgICAgY29uc3QgYXJlYSA9IHRoaXMucG9seWdvbi5hcmVhKCk7XHJcbiAgICAgIHRoaXMubGl0aG9sb2d5LmZvckVhY2gobGl0aG9sb2dpY2FsTGF5ZXIgPT4ge1xyXG4gICAgICAgIGxldCBxdWFudGl0eSA9IHF1YW50aXRpZXMuZ2V0KGxpdGhvbG9naWNhbExheWVyLnR5cGUpIHx8IDA7XHJcbiAgICAgICAgcXVhbnRpdGllcy5zZXQobGl0aG9sb2dpY2FsTGF5ZXIudHlwZSwgcXVhbnRpdHkgKyBNYXRoLnJvdW5kKGFyZWEgKiBsaXRob2xvZ2ljYWxMYXllci5kZXB0aCkpO1xyXG4gICAgICB9KTtcclxuICAgIH1cclxuICAgIHJldHVybiBxdWFudGl0aWVzO1xyXG4gIH1cclxufSIsImltcG9ydCB7IFBvbHBsb3RSZW5kZXJlciB9IGZyb20gXCIuL2ludGVyZmFjZXMvcG9scGxvdC1yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vbGluZVwiO1xyXG5pbXBvcnQgeyBMaXRob2xvZ2ljYWxMYXllciB9IGZyb20gXCIuL2xpdGhvbG9naWNhbC1sYXllclwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSBcIi4vcG9seWdvblwiO1xyXG5pbXBvcnQgeyBTdXJ2ZXkgfSBmcm9tIFwiLi9zdXJ2ZXlcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmNvbnN0IENMSUNLX1RIUkVTSE9MRCA9IDIwO1xyXG5cclxuY29uc3QgZW51bSBNb2RlcyB7XHJcbiAgQ29udG91cixcclxuICBMaW5lLFxyXG4gIFN1cnZleVxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgUG9scGxvdCB7XHJcbiAgYXhlczogTGluZVtdID0gW107XHJcbiAgY29udG91ciA9IG5ldyBQb2x5Z29uKCk7XHJcbiAgaW50ZXJzZWN0aW9uVGltZXM6IG51bWJlcltdW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25zOiBWZWN0b3IyW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25JbmRleDogbnVtYmVyW11bXSA9IFtdO1xyXG4gIHBvbHlnb25zOiBQb2x5Z29uW10gPSBbXTtcclxuICBzdXJ2ZXlzOiBTdXJ2ZXlbXSA9IFtdO1xyXG4gIHF1YW50aXRpZXMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gIG1vZGUgPSBNb2Rlcy5Db250b3VyO1xyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlbmRlcmVyOiBQb2xwbG90UmVuZGVyZXIpIHtcclxuICAgIC8vIHJlbW92ZSBuZXh0IGhhY2t5IGV2ZW50TGlzdGVuZXJcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAncycpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5TdXJ2ZXk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnYycpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5Db250b3VyO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuY2xlYXJTdXJ2ZXkoKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdsJykge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IE1vZGVzLkxpbmU7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhclN1cnZleSgpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyU3VydmV5KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBkcmFnZ2VkTGluZUluZGV4ID0gLTE7XHJcbiAgICBsZXQgZHJhZ2dlZFZlY3RvcjI6IFZlY3RvcjI7XHJcbiAgICBsZXQgZHJhZ2dlZFN1cnZleUluZGV4ID0gLTE7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlRG93bkhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICAvLyByZXR1cm4gaWYgY2xpY2sgaXMgbm90IGZyb20gbW91c2UgbGVmdCBidXR0b25cclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBjb25zdCBtb3VzZSA9IG5ldyBWZWN0b3IyKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5MaW5lIHx8IHRoaXMubW9kZSA9PT0gTW9kZXMuQ29udG91cikge1xyXG4gICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLm5lYXJlc3RMaW5lSW5kZXhGcm9tKFxyXG4gICAgICAgICAgbW91c2UsXHJcbiAgICAgICAgICBDTElDS19USFJFU0hPTEQsXHJcbiAgICAgICAgICB0aGlzLm1vZGUgPT09IE1vZGVzLkxpbmVcclxuICAgICAgICAgICAgPyB0aGlzLmF4ZXNcclxuICAgICAgICAgICAgOiB0aGlzLmNvbnRvdXIuZWRnZXMoKVxyXG4gICAgICAgICk7XHJcbiAgICAgICAgaWYgKGRyYWdnZWRMaW5lSW5kZXggPT09IC0xKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5MaW5lKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkTGluZShuZXcgTGluZShtb3VzZS54LCBtb3VzZS55LCBtb3VzZS54LCBtb3VzZS55KSk7XHJcbiAgICAgICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLmxpbmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICAgIGRyYWdnZWRWZWN0b3IyID0gdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MjtcclxuICAgICAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5Db250b3VyKSB7XHJcbiAgICAgICAgICAgIHRoaXMuYWRkQ29udG91cihuZXcgTGluZShtb3VzZS54LCBtb3VzZS55LCBtb3VzZS54LCBtb3VzZS55KSk7XHJcbiAgICAgICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSAwO1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjE7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLkxpbmUpIHtcclxuICAgICAgICAgICAgZHJhZ2dlZExpbmVJbmRleCArPSB0aGlzLmNvbnRvdXIuZWRnZUNvdW50KCk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpZiAobW91c2Uuc3ViKHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjEpLmxlbigpIDwgQ0xJQ0tfVEhSRVNIT0xEKSB7XHJcbiAgICAgICAgICAgIGRyYWdnZWRWZWN0b3IyID0gdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MTtcclxuICAgICAgICAgIH0gZWxzZSBpZiAobW91c2Uuc3ViKHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjIpLmxlbigpIDwgQ0xJQ0tfVEhSRVNIT0xEKSB7XHJcbiAgICAgICAgICAgIGRyYWdnZWRWZWN0b3IyID0gdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MjtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5TdXJ2ZXkpIHtcclxuICAgICAgICBkcmFnZ2VkU3VydmV5SW5kZXggPSB0aGlzLm5lYXJlc3RTdXJ2ZXlJbmRleEZyb20obW91c2UsIENMSUNLX1RIUkVTSE9MRCk7XHJcbiAgICAgICAgaWYgKGRyYWdnZWRTdXJ2ZXlJbmRleCA9PT0gLTEpIHtcclxuICAgICAgICAgIHRoaXMuYWRkU3VydmV5KG1vdXNlKTtcclxuICAgICAgICAgIGRyYWdnZWRTdXJ2ZXlJbmRleCA9IHRoaXMuc3VydmV5cy5sZW5ndGggLSAxO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IGFjdGl2ZVN1cnZleTogU3VydmV5O1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZVVwSGFuZGxlcihldmVudCA9PiB7XHJcbiAgICAgIC8vIHJldHVybiBpZiBjbGljayBpcyBub3QgZnJvbSBtb3VzZSBsZWZ0IGJ1dHRvblxyXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLkxpbmUgfHwgdGhpcy5tb2RlID09PSBNb2Rlcy5Db250b3VyKSB7XHJcbiAgICAgICAgZHJhZ2dlZExpbmVJbmRleCA9IC0xO1xyXG4gICAgICAgIGRyYWdnZWRWZWN0b3IyID0gbnVsbDtcclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLlN1cnZleSkge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkU3VydmV5SW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICBhY3RpdmVTdXJ2ZXkgPSB0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1N1cnZleShhY3RpdmVTdXJ2ZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhY3RpdmVTdXJ2ZXkgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcmFnZ2VkU3VydmV5SW5kZXggPSAtMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHBvbHlnb25Db250YWluZXI6IFBvbHlnb247XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlTW92ZUhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICAvLyByZXR1cm4gaWYgY2xpY2sgaXMgbm90IGZyb20gbW91c2UgbGVmdCBidXR0b25cclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5MaW5lIHx8IHRoaXMubW9kZSA9PT0gTW9kZXMuQ29udG91cikge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkVmVjdG9yMiB8fCBkcmFnZ2VkTGluZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgaWYgKGRyYWdnZWRWZWN0b3IyKSB7XHJcbiAgICAgICAgICAgIGRyYWdnZWRWZWN0b3IyLnggKz0gZXZlbnQubW92ZW1lbnRYO1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMi55ICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udXBkYXRlKGV2ZW50Lm1vdmVtZW50WCwgZXZlbnQubW92ZW1lbnRZLCBldmVudC5tb3ZlbWVudFgsIGV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKGRyYWdnZWRMaW5lSW5kZXgpO1xyXG4gICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKFxyXG4gICAgICAgICAgICAgIHRoaXMuYXhlc1tkcmFnZ2VkTGluZUluZGV4IC0gdGhpcy5jb250b3VyLmVkZ2VDb3VudCgpXSxcclxuICAgICAgICAgICAgICAoZHJhZ2dlZExpbmVJbmRleCAtIHRoaXMuY29udG91ci5lZGdlQ291bnQoKSkudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRyYWdnZWRMaW5lSW5kZXggPT09IHRoaXMuY29udG91ci5lZGdlQ291bnQoKSAtIDEpIHtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKGRyYWdnZWRMaW5lSW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRyYWdnZWRMaW5lSW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKHRoaXMuY29udG91ci5lZGdlQ291bnQoKSAtIDEpO1xyXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhkcmFnZ2VkTGluZUluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhkcmFnZ2VkTGluZUluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3Q29udG91cih0aGlzLmNvbnRvdXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLlN1cnZleSkge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkU3VydmV5SW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XS5jb29yZGluYXRlcy54ICs9IGV2ZW50Lm1vdmVtZW50WDtcclxuICAgICAgICAgIHRoaXMuc3VydmV5c1tkcmFnZ2VkU3VydmV5SW5kZXhdLmNvb3JkaW5hdGVzLnkgKz0gZXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVTdXJ2ZXkodGhpcy5zdXJ2ZXlzW2RyYWdnZWRTdXJ2ZXlJbmRleF0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICAvLyBUT0RPOiBzaG91bGQgYmUgaW4gYSBmdW5jdGlvblxyXG4gICAgICBjb25zdCBtb3VzZSA9IG5ldyBWZWN0b3IyKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICBsZXQgaXNJbnNpZGUgPSBmYWxzZTtcclxuICAgICAgbGV0IG9sZFBvbHlnb25Db250YWluZXIgPSBwb2x5Z29uQ29udGFpbmVyO1xyXG4gICAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgdGhpcy5wb2x5Z29ucykge1xyXG4gICAgICAgIGlmIChwb2x5Z29uLmNvbnRhaW5zKG1vdXNlKSkge1xyXG4gICAgICAgICAgaWYgKHBvbHlnb24gIT09IHBvbHlnb25Db250YWluZXIpIHtcclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihwb2x5Z29uLCAncmVkJyk7XHJcbiAgICAgICAgICAgIHBvbHlnb25Db250YWluZXIgPSBwb2x5Z29uO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaXNJbnNpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGlmICghaXNJbnNpZGUpIHtcclxuICAgICAgICBwb2x5Z29uQ29udGFpbmVyID0gbnVsbDtcclxuICAgICAgfVxyXG4gICAgICBpZiAob2xkUG9seWdvbkNvbnRhaW5lciAmJiBvbGRQb2x5Z29uQ29udGFpbmVyICE9PSBwb2x5Z29uQ29udGFpbmVyKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihvbGRQb2x5Z29uQ29udGFpbmVyLCAnd2hpdGUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG5cclxuICAgIGxldCBkcmFnZ2VkTGl0aG9sb2d5TGF5ZXI6IExpdGhvbG9naWNhbExheWVyO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaWRlYmFyTW91c2VEb3duSGFuZGxlcihldmVudCA9PiB7XHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKGFjdGl2ZVN1cnZleSkge1xyXG4gICAgICAgIGNvbnN0IG1vdXNlID0gbmV3IFZlY3RvcjIoZXZlbnQub2Zmc2V0WCwgZXZlbnQub2Zmc2V0WSk7XHJcbiAgICAgICAgY29uc3Qgb2Zmc2V0ID0gbmV3IFZlY3RvcjIoMzAwLCAxMDApO1xyXG4gICAgICAgIGZvciAoY29uc3QgbGl0aG9sb2dpY2FsTGF5ZXIgb2YgYWN0aXZlU3VydmV5LmxpdGhvbG9neSkge1xyXG4gICAgICAgICAgY29uc3QgcG9seWdvbiA9IG5ldyBQb2x5Z29uKFtcclxuICAgICAgICAgICAgb2Zmc2V0LmFkZChuZXcgVmVjdG9yMigtMjUsIDApKSxcclxuICAgICAgICAgICAgb2Zmc2V0LmFkZChuZXcgVmVjdG9yMigyNSwgMCkpLFxyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKDI1LCBsaXRob2xvZ2ljYWxMYXllci5kZXB0aCkpLFxyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKC0yNSwgbGl0aG9sb2dpY2FsTGF5ZXIuZGVwdGgpKSxcclxuICAgICAgICAgIF0pO1xyXG4gICAgICAgICAgb2Zmc2V0LnkgKz0gbGl0aG9sb2dpY2FsTGF5ZXIuZGVwdGg7XHJcbiAgICAgICAgICBpZiAocG9seWdvbi5jb250YWlucyhtb3VzZSkpIHtcclxuICAgICAgICAgICAgZHJhZ2dlZExpdGhvbG9neUxheWVyID0gbGl0aG9sb2dpY2FsTGF5ZXI7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRTaWRlYmFyTW91c2VVcEhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGRyYWdnZWRMaXRob2xvZ3lMYXllciA9IG51bGw7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpZGViYXJNb3VzZU1vdmVIYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoZHJhZ2dlZExpdGhvbG9neUxheWVyKSB7XHJcbiAgICAgICAgZHJhZ2dlZExpdGhvbG9neUxheWVyLmRlcHRoICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdTdXJ2ZXkoYWN0aXZlU3VydmV5KTtcclxuICAgICAgICB0aGlzLnVwZGF0ZVF1YW50aXRpZXMoKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgdGhpcy5yZW5kZXJlci5saXRob0NoYW5nZUhhbmRsZXIgPSAoKSA9PiB7XHJcbiAgICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gICAgfTtcclxuICB9XHJcbiAgZ2V0IGxpbmVzKCk6IExpbmVbXSB7XHJcbiAgICByZXR1cm4gdGhpcy5jb250b3VyLmVkZ2VzKCkuY29uY2F0KHRoaXMuYXhlcyk7XHJcbiAgfVxyXG4gIG5lYXJlc3RMaW5lSW5kZXhGcm9tKHY6IFZlY3RvcjIsIHRocmVzaG9sZCA9ICtJbmZpbml0eSwgbGluZXMgPSB0aGlzLmxpbmVzKTogbnVtYmVyIHtcclxuICAgIGxldCBuZWFyZXN0TGluZUluZGV4ID0gLTE7XHJcbiAgICBsZXQgbmVhcmVzdERpc3QgPSArSW5maW5pdHk7XHJcbiAgICBsZXQgZGlzdDogbnVtYmVyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBkaXN0ID0gbGluZXNbaV0ubmVhcmVzdFRvKHYpLnN1Yih2KS5sZW4oKTtcclxuICAgICAgaWYgKGRpc3QgPCB0aHJlc2hvbGQgJiYgZGlzdCA8IG5lYXJlc3REaXN0KSB7XHJcbiAgICAgICAgbmVhcmVzdERpc3QgPSBkaXN0O1xyXG4gICAgICAgIG5lYXJlc3RMaW5lSW5kZXggPSBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmVhcmVzdExpbmVJbmRleDtcclxuICB9XHJcbiAgbmVhcmVzdFN1cnZleUluZGV4RnJvbSh2OiBWZWN0b3IyLCB0aHJlc2hvbGQgPSArSW5maW5pdHkpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgbGV0IG5lYXJlc3REaXN0ID0gK0luZmluaXR5O1xyXG4gICAgbGV0IGRpc3Q6IG51bWJlcjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdXJ2ZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGRpc3QgPSB0aGlzLnN1cnZleXNbaV0uY29vcmRpbmF0ZXMuc3ViKHYpLmxlbigpO1xyXG4gICAgICBpZiAoZGlzdCA8IHRocmVzaG9sZCAmJiBkaXN0IDwgbmVhcmVzdERpc3QpIHtcclxuICAgICAgICBuZWFyZXN0RGlzdCA9IGRpc3Q7XHJcbiAgICAgICAgbmVhcmVzdFN1cnZleUluZGV4ID0gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5lYXJlc3RTdXJ2ZXlJbmRleDtcclxuICB9XHJcbiAgYWRkU3VydmV5KGNvb3JkaW5hdGVzOiBWZWN0b3IyKTogdm9pZCB7XHJcbiAgICBsZXQgY29udGFpbmVyOiBQb2x5Z29uO1xyXG4gICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIHRoaXMucG9seWdvbnMpIHtcclxuICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMoY29vcmRpbmF0ZXMpKSB7XHJcbiAgICAgICAgY29udGFpbmVyID0gcG9seWdvbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc3VydmV5ID0gbmV3IFN1cnZleShjb29yZGluYXRlcywgW1xyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgXSwgY29udGFpbmVyKTtcclxuICAgIHRoaXMuc3VydmV5cy5wdXNoKHN1cnZleSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdQb2ludChjb29yZGluYXRlcywgY29udGFpbmVyID8gKGNvbnRhaW5lci5hcmVhKCkgLyAoMTAgKiAxMCkpLnRvRml4ZWQoMikgKyAnIG0yJyA6ICcnKTtcclxuICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gIH1cclxuICAvLyBUT0RPOiBjbGVhbnVwIGFkZCB1cGRhdGUgcmVuZGVyIGFuZCBvdGhlciB3ZWlyZCBmdW5jdGlvbnNcclxuICB1cGRhdGVTdXJ2ZXkoc3VydmV5OiBTdXJ2ZXkpOiB2b2lkIHtcclxuICAgIHN1cnZleS5wb2x5Z29uID0gbnVsbDtcclxuICAgIGZvciAoY29uc3QgcG9seWdvbiBvZiB0aGlzLnBvbHlnb25zKSB7XHJcbiAgICAgIGlmIChwb2x5Z29uLmNvbnRhaW5zKHN1cnZleS5jb29yZGluYXRlcykpIHtcclxuICAgICAgICBzdXJ2ZXkucG9seWdvbiA9IHBvbHlnb247XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvaW50KHN1cnZleS5jb29yZGluYXRlcywgc3VydmV5LnBvbHlnb24gPyAoc3VydmV5LnBvbHlnb24uYXJlYSgpIC8gKDEwICogMTApKS50b0ZpeGVkKDIpICsgJyBtMicgOiAnJyk7XHJcbiAgICB0aGlzLnVwZGF0ZVF1YW50aXRpZXMoKTtcclxuICB9XHJcbiAgdXBkYXRlUXVhbnRpdGllcygpOiB2b2lkIHtcclxuICAgIHRoaXMucXVhbnRpdGllcy5jbGVhcigpO1xyXG4gICAgdGhpcy5zdXJ2ZXlzLmZvckVhY2goc3VydmV5ID0+IHtcclxuICAgICAgc3VydmV5LnF1YW50aXRpZXMoKS5mb3JFYWNoKChxdWFudGl0eSwgdHlwZSkgPT4ge1xyXG4gICAgICAgIHRoaXMucXVhbnRpdGllcy5zZXQodHlwZSwgKHRoaXMucXVhbnRpdGllcy5nZXQodHlwZSkgfHwgMCkgKyBxdWFudGl0eSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdRdWFudGl0aWVzKHRoaXMucXVhbnRpdGllcyk7XHJcbiAgfVxyXG4gIGluaXRJbnRlcnNlY3Rpb25EYXRhKFxyXG4gICAgYXQgPSB0aGlzLmxpbmVzLmxlbmd0aCxcclxuICAgIGxpbmVDb3VudCA9IHRoaXMubGluZXMubGVuZ3RoLFxyXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzLFxyXG4gICAgaW50ZXJzZWN0aW9ucyA9IHRoaXMuaW50ZXJzZWN0aW9ucyxcclxuICAgIGludGVyc2VjdGlvbkluZGV4ID0gdGhpcy5pbnRlcnNlY3Rpb25JbmRleCxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IG5ld0ludGVyc2VjdGlvblRpbWVzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgbmV3SW50ZXJzZWN0aW9uSW5kZXg6IG51bWJlcltdID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVDb3VudDsgaSsrKSB7XHJcbiAgICAgIGludGVyc2VjdGlvblRpbWVzW2ldLnNwbGljZShhdCwgMCwgTmFOKTtcclxuICAgICAgaW50ZXJzZWN0aW9ucy5wdXNoKG5ldyBWZWN0b3IyKCkpO1xyXG4gICAgICBpbnRlcnNlY3Rpb25JbmRleFtpXS5zcGxpY2UoYXQsIDAsIGludGVyc2VjdGlvbnMubGVuZ3RoIC0gMSk7XHJcbiAgICAgIG5ld0ludGVyc2VjdGlvblRpbWVzLnB1c2goTmFOKTtcclxuICAgICAgbmV3SW50ZXJzZWN0aW9uSW5kZXgucHVzaChpbnRlcnNlY3Rpb25zLmxlbmd0aCAtIDEpO1xyXG4gICAgfVxyXG4gICAgbmV3SW50ZXJzZWN0aW9uVGltZXMuc3BsaWNlKGF0LCAwLCBOYU4pO1xyXG4gICAgbmV3SW50ZXJzZWN0aW9uSW5kZXguc3BsaWNlKGF0LCAwLCAtMSk7XHJcbiAgICBpbnRlcnNlY3Rpb25UaW1lcy5zcGxpY2UoYXQsIDAsIG5ld0ludGVyc2VjdGlvblRpbWVzKTtcclxuICAgIGludGVyc2VjdGlvbkluZGV4LnNwbGljZShhdCwgMCwgbmV3SW50ZXJzZWN0aW9uSW5kZXgpO1xyXG4gIH1cclxuICBhZGRMaW5lKGxpbmU6IExpbmUpOiB2b2lkIHtcclxuICAgIC8vIGFwcGVuZCBuZXcgY29udG91ciBhdCB0aGUgZW5kIG9mIGxpbmVzXHJcbiAgICBjb25zdCBsaW5lcyA9IHRoaXMubGluZXM7XHJcbiAgICBjb25zdCBhdCA9IGxpbmVzLmxlbmd0aDtcclxuICAgIHRoaXMuaW5pdEludGVyc2VjdGlvbkRhdGEoYXQsIGF0KTtcclxuICAgIHRoaXMuYXhlcy5wdXNoKGxpbmUpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3TGluZShsaW5lLCBhdC50b1N0cmluZygpKTtcclxuICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoYXQpO1xyXG4gIH1cclxuICBhZGRDb250b3VyKGxpbmU6IExpbmUpOiB2b2lkIHtcclxuICAgIC8vIFRPRE8gb3B0aW1pemF0aW9uXHJcbiAgICAvLyBhcHBlbmQgbmV3IGNvbnRvdXIgYXQgdGhlIGJlZ2luIG9mIGxpbmVzXHJcbiAgICBjb25zdCBlZGdlQ291bnQgPSB0aGlzLmNvbnRvdXIuZWRnZUNvdW50KCk7XHJcbiAgICBsZXQgbGluZUNvdW50ID0gZWRnZUNvdW50ICsgdGhpcy5heGVzLmxlbmd0aDtcclxuICAgIHRoaXMuaW5pdEludGVyc2VjdGlvbkRhdGEoMCwgbGluZUNvdW50KyspO1xyXG4gICAgdGhpcy5pbml0SW50ZXJzZWN0aW9uRGF0YSgwLCBsaW5lQ291bnQrKyk7XHJcbiAgICB0aGlzLmNvbnRvdXIudmVydGljZXMuc3BsaWNlKDAsIDAsIGxpbmUudjEsIGxpbmUudjIpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3Q29udG91cih0aGlzLmNvbnRvdXIpO1xyXG4gICAgY29uc3QgbGluZXMgPSB0aGlzLmxpbmVzO1xyXG4gICAgaWYgKGVkZ2VDb3VudCA9PT0gMCkge1xyXG4gICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDAsIGxpbmVzLCB0cnVlKTtcclxuICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcygxLCBsaW5lcyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDAsIGxpbmVzLCB0cnVlKTtcclxuICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcygxLCBsaW5lcywgdHJ1ZSk7XHJcbiAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMobGluZUNvdW50IC0gMSwgbGluZXMpO1xyXG4gICAgfVxyXG4gIH1cclxuICB1cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhcclxuICAgIGF0OiBudW1iZXIsXHJcbiAgICBsaW5lcyA9IHRoaXMubGluZXMsXHJcbiAgICBza2lwUmVuZGVyID0gZmFsc2UsXHJcbiAgICBpbnRlcnNlY3Rpb25UaW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3Rpb25zLFxyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXggPSB0aGlzLmludGVyc2VjdGlvbkluZGV4LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgbGluZSA9IGxpbmVzW2F0XTtcclxuICAgIGxldCB0aW1lczogVmVjdG9yMjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGkgIT09IGF0KSB7XHJcbiAgICAgICAgdGltZXMgPSBsaW5lc1tpXS5pbnRlcnNlY3Rpb25UaW1lc1dpdGgobGluZSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9uVGltZXNbaV1bYXRdID0gdGltZXMueDtcclxuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1thdF1baV0gPSB0aW1lcy55O1xyXG4gICAgICAgIGlmIChpIDwgYXQpIHtcclxuICAgICAgICAgIGludGVyc2VjdGlvbnNbaW50ZXJzZWN0aW9uSW5kZXhbaV1bYXRdXSA9IGxpbmVzW2ldLnBvaW50QXQodGltZXMueCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGludGVyc2VjdGlvbnNbaW50ZXJzZWN0aW9uSW5kZXhbYXRdW2ldXSA9IGxpbmVzW2ldLnBvaW50QXQodGltZXMueCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBpZiAoIXNraXBSZW5kZXIpIHtcclxuICAgICAgdGhpcy5yZW5kZXJJbnRlcnNlY3Rpb25zKCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHJlbmRlckludGVyc2VjdGlvbnMoKTogdm9pZCB7XHJcbiAgICAvLyB0aGlzLnJlbmRlcmVyLmNsZWFySW50ZXJzZWN0aW9ucygpO1xyXG4gICAgLy8gdGhpcy5pbnRlcnNlY3Rpb25zLmZvckVhY2goaW50ZXJzZWN0aW9uID0+IHtcclxuICAgIC8vICAgdGhpcy5yZW5kZXJlci5kcmF3UG9pbnQoaW50ZXJzZWN0aW9uKTtcclxuICAgIC8vIH0pO1xyXG4gICAgdGhpcy5yZW5kZXJlci5jbGVhclBvbHlnb25zKCk7XHJcbiAgICB0aGlzLnBvbHlnb25zID0gW107XHJcbiAgICBjb25zdCBwYXJ0aWFscyA9IHRoaXMuYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcygpO1xyXG4gICAgY29uc3QgcG9seWdvbkluZGV4ZXMgPSB0aGlzLmJ1aWxkUG9seWdvbkluZGV4ZXNGcm9tUGFydGlhbHMocGFydGlhbHMpO1xyXG4gICAgY29uc3QgcG9seWdvbnMgPSBwb2x5Z29uSW5kZXhlcy5tYXAocG9seWdvbkluZGV4ID0+IG5ldyBQb2x5Z29uKHBvbHlnb25JbmRleC5tYXAoaSA9PiB0aGlzLmludGVyc2VjdGlvbnNbaV0pKSk7XHJcbiAgICBwb2x5Z29ucy5mb3JFYWNoKHBvbHlnb24gPT4ge1xyXG4gICAgICBpZiAocG9seWdvbi5hcmVhKCkgPiAwKSB7XHJcbiAgICAgICAgdGhpcy5wb2x5Z29ucy5wdXNoKHBvbHlnb24pO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvbHlnb24ocG9seWdvbiwgJ3doaXRlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gICAgdGhpcy5zdXJ2ZXlzLmZvckVhY2goc3VydmV5ID0+IHRoaXMudXBkYXRlU3VydmV5KHN1cnZleSkpO1xyXG4gIH1cclxuICB0ZXN0U2lkZSh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyLCB3OiBWZWN0b3IyKTogYm9vbGVhbiB7XHJcbiAgICByZXR1cm4gdi5zdWIodSkuY3Jvc3Mody5zdWIodSkpID4gMDtcclxuICB9XHJcbiAgcGFydGlhbHNPdmVybGFwcyhwMTogbnVtYmVyW10sIHAyOiBudW1iZXJbXSk6IDIgfCAwIHtcclxuICAgIHJldHVybiBwMVtwMS5sZW5ndGggLSAyXSA9PT0gcDJbMF0gJiYgcDFbcDEubGVuZ3RoIC0gMV0gPT09IHAyWzFdID8gMiA6IDA7XHJcbiAgfVxyXG4gIHBhcnRpYWxzTWVldChwMTogbnVtYmVyW10sIHAyOiBudW1iZXJbXSk6IDEgfCAwIHtcclxuICAgIHJldHVybiBwMVtwMS5sZW5ndGggLSAxXSA9PT0gcDJbMF0gPyAxIDogMDtcclxuICB9XHJcbiAgYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25JbmRleGVzKFxyXG4gICAgY2VudGVyOiBudW1iZXIsXHJcbiAgICBpbmRleGVzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlciwgbnVtYmVyXSxcclxuICApOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSB7XHJcbiAgICBjb25zdCBwYXJ0czogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgaW5kZXhlcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAodHlwZW9mIGluZGV4ZXNbaV0gPT09ICdudW1iZXInKSB7XHJcbiAgICAgICAgbGV0IGogPSBpICsgMTtcclxuICAgICAgICBpZiAoaiA9PT0gaW5kZXhlcy5sZW5ndGgpIHtcclxuICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgIH1cclxuICAgICAgICB3aGlsZSAodHlwZW9mIGluZGV4ZXNbal0gIT09ICdudW1iZXInKcKge1xyXG4gICAgICAgICAgaisrO1xyXG4gICAgICAgICAgaWYgKGogPT09IGluZGV4ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICAgIGogPSAwO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgICBpZiAoaSAhPT0gaikge1xyXG4gICAgICAgICAgcGFydHMucHVzaChbaW5kZXhlc1tpXSwgY2VudGVyLCBpbmRleGVzW2pdXSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcGFydHM7XHJcbiAgfVxyXG4gIGJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBsaW5lcyA9IHRoaXMubGluZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25UaW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25JbmRleCA9IHRoaXMuaW50ZXJzZWN0aW9uSW5kZXhcclxuICApOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSB7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcycpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJy0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0nKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdsaW5lcy5sZW5ndGggPSAnLCBsaW5lcy5sZW5ndGgpO1xyXG4gICAgY29uc3QgZWRnZUNvdW50ID0gdGhpcy5jb250b3VyLmVkZ2VDb3VudCgpO1xyXG4gICAgY29uc3QgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5ID0gaW50ZXJzZWN0aW9uVGltZXNcclxuICAgICAgLm1hcCgoaW50ZXJzZWN0aW9uVGltZXNBdEksIGkpID0+IHtcclxuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uVGltZXNBdElcclxuICAgICAgICAgIC5tYXAoKF8sIGopID0+IGopXHJcbiAgICAgICAgICAuZmlsdGVyKGogPT4ge1xyXG4gICAgICAgICAgICByZXR1cm4gIWlzTmFOKGludGVyc2VjdGlvblRpbWVzQXRJW2pdKSAmJiAwIDw9IGludGVyc2VjdGlvblRpbWVzQXRJW2pdICYmIGludGVyc2VjdGlvblRpbWVzQXRJW2pdIDw9IDEgJiZcclxuICAgICAgICAgICAgICAhaXNOYU4oaW50ZXJzZWN0aW9uVGltZXNbal1baV0pICYmIDAgPD0gaW50ZXJzZWN0aW9uVGltZXNbal1baV0gJiYgaW50ZXJzZWN0aW9uVGltZXNbal1baV0gPD0gMSAmJlxyXG4gICAgICAgICAgICAgIChpIDwgZWRnZUNvdW50IHx8IGogPCBlZGdlQ291bnQgfHwgdGhpcy5jb250b3VyLmNvbnRhaW5zKHRoaXMuaW50ZXJzZWN0aW9uc1tpbnRlcnNlY3Rpb25JbmRleFtpXVtqXV0pKTtcclxuICAgICAgICAgIH0pXHJcbiAgICAgICAgICAuc29ydCgoaSwgaikgPT4gaW50ZXJzZWN0aW9uVGltZXNBdElbaV0gLSBpbnRlcnNlY3Rpb25UaW1lc0F0SVtqXSk7XHJcbiAgICAgIH0pO1xyXG4gICAgLy8gY29uc29sZS5sb2coaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5KTtcclxuICAgIGNvbnN0IHBhcnRpYWxzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgbG9jYWxJbmRleCA9IDA7IGxvY2FsSW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkubGVuZ3RoOyBsb2NhbEluZGV4KyspIHtcclxuICAgICAgZm9yIChsZXQgbG9jYWxJbnRlckluZGV4ID0gMDsgbG9jYWxJbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdLmxlbmd0aDsgbG9jYWxJbnRlckluZGV4KyspIHtcclxuICAgICAgICBjb25zdCBmb3JlaWduSW5kZXggPSBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF1bbG9jYWxJbnRlckluZGV4XTtcclxuICAgICAgICBpZiAobG9jYWxJbmRleCA8IGZvcmVpZ25JbmRleCkge1xyXG4gICAgICAgICAgY29uc3QgaW50ZXIgPSBpbnRlcnNlY3Rpb25JbmRleFtsb2NhbEluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF1bbG9jYWxJbnRlckluZGV4XV07XHJcblxyXG4gICAgICAgICAgY29uc3QgcHJldkxvY2FsSW50ZXJJbmRleCA9IGxvY2FsSW50ZXJJbmRleCAtIDE7XHJcbiAgICAgICAgICBjb25zdCBuZXh0TG9jYWxJbnRlckluZGV4ID0gbG9jYWxJbnRlckluZGV4ICsgMTtcclxuXHJcbiAgICAgICAgICBjb25zdCBmb3JlaWduSW50ZXJJbmRleCA9IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdLmZpbmRJbmRleChpID0+IGkgPT09IGxvY2FsSW5kZXgpO1xyXG4gICAgICAgICAgY29uc3QgZm9yZWlnbmlzUmlnaHRTaWRlZCA9IHRoaXMudGVzdFNpZGUobGluZXNbbG9jYWxJbmRleF0udjEsIGxpbmVzW2xvY2FsSW5kZXhdLnYyLCBsaW5lc1tmb3JlaWduSW5kZXhdLnYxKTtcclxuICAgICAgICAgIGNvbnN0IHByZXZGb3JlaWduSW50ZXJJbmRleCA9IGZvcmVpZ25pc1JpZ2h0U2lkZWQgPyBmb3JlaWduSW50ZXJJbmRleCAtIDEgOiBmb3JlaWduSW50ZXJJbmRleCArIDE7XHJcbiAgICAgICAgICBjb25zdCBuZXh0Rm9yZWlnbkludGVySW5kZXggPSBmb3JlaWduaXNSaWdodFNpZGVkID8gZm9yZWlnbkludGVySW5kZXggKyAxIDogZm9yZWlnbkludGVySW5kZXggLSAxO1xyXG5cclxuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgIC8vICAgbG9jYWxJbmRleDogJHtsb2NhbEluZGV4fVxyXG4gICAgICAgICAgLy8gICBsb2NhbEludGVyc2VjdGlvbnMgJHtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF1cclxuICAgICAgICAgIC8vICAgICAubWFwKChfLCBpKSA9PiBpID09PSBsb2NhbEludGVySW5kZXggPyBgWyR7X31dYCA6IF8pXHJcbiAgICAgICAgICAvLyAgICAgLmpvaW4oJywgJyl9XHJcbiAgICAgICAgICAvLyAgIGZvcmVpZ25JbmRleDogJHtmb3JlaWduSW5kZXh9XHJcbiAgICAgICAgICAvLyAgIGZvcmVpZ25JbnRlcnNlY3Rpb25zICR7aW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF1cclxuICAgICAgICAgIC8vICAgICAubWFwKChfLCBpKSA9PiBpID09PSBmb3JlaWduSW50ZXJJbmRleCA/IGBbJHtffV1gIDogXylcclxuICAgICAgICAgIC8vICAgICAuam9pbignLCAnKX1cclxuICAgICAgICAgIC8vIGApO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHByZXZMb2NhbEludGVyID0gMCA8IGxvY2FsSW50ZXJJbmRleFxyXG4gICAgICAgICAgICA/IGludGVyc2VjdGlvbkluZGV4W2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtwcmV2TG9jYWxJbnRlckluZGV4XV1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgY29uc3QgbmV4dExvY2FsSW50ZXIgPSBsb2NhbEludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF0ubGVuZ3RoIC0gMVxyXG4gICAgICAgICAgICA/IGludGVyc2VjdGlvbkluZGV4W2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtuZXh0TG9jYWxJbnRlckluZGV4XV1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgY29uc3QgcHJldkZvcmVpZ25JbnRlciA9IC0xIDwgcHJldkZvcmVpZ25JbnRlckluZGV4ICYmIHByZXZGb3JlaWduSW50ZXJJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdLmxlbmd0aFxyXG4gICAgICAgICAgICA/IGludGVyc2VjdGlvbkluZGV4W2ZvcmVpZ25JbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF1bcHJldkZvcmVpZ25JbnRlckluZGV4XV1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgY29uc3QgbmV4dEZvcmVpZ25JbnRlciA9IC0xIDwgbmV4dEZvcmVpZ25JbnRlckluZGV4ICYmIG5leHRGb3JlaWduSW50ZXJJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdLmxlbmd0aFxyXG4gICAgICAgICAgICA/IGludGVyc2VjdGlvbkluZGV4W2ZvcmVpZ25JbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF1bbmV4dEZvcmVpZ25JbnRlckluZGV4XV1cclxuICAgICAgICAgICAgOiBudWxsO1xyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICBeXHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgIG5leHRGb3JlaWduSW50ZXJcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICAgICAgLy8gIC0tLXByZXZMb2NhbEludGVyLS0taW50ZXItLS1uZXh0TG9jYWxJbnRlci0tLT5cclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgcHJldkZvcmVpZ25JbnRlclxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMuYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25JbmRleGVzKFxyXG4gICAgICAgICAgICBpbnRlcixcclxuICAgICAgICAgICAgW1xyXG4gICAgICAgICAgICAgIHByZXZMb2NhbEludGVyLFxyXG4gICAgICAgICAgICAgIG5leHRGb3JlaWduSW50ZXIsXHJcbiAgICAgICAgICAgICAgbmV4dExvY2FsSW50ZXIsXHJcbiAgICAgICAgICAgICAgcHJldkZvcmVpZ25JbnRlclxyXG4gICAgICAgICAgICBdXHJcbiAgICAgICAgICApO1xyXG4gICAgICAgICAgcGFydGlhbHMucHVzaCguLi5wYXJ0cyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZygncGFydGlhbHMnLCBwYXJ0aWFscyk7XHJcbiAgICByZXR1cm4gcGFydGlhbHM7XHJcbiAgfVxyXG4gIGJ1aWxkUG9seWdvbkluZGV4ZXNGcm9tUGFydGlhbHMocGFydGlhbHM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdKTogbnVtYmVyW11bXSB7XHJcbiAgICBjb25zdCBwb2x5Z29uSW5kZXhlczogbnVtYmVyW11bXSA9IFtdO1xyXG4gICAgbGV0IGkgPSAwO1xyXG4gICAgbGV0IG92ZXJsYXA6IG51bWJlcjtcclxuICAgIHdoaWxlIChpIDwgcGFydGlhbHMubGVuZ3RoKSB7XHJcbiAgICAgIGZvciAobGV0IGogPSAwOyBqIDwgcGFydGlhbHMubGVuZ3RoOyBqKyspwqB7XHJcbiAgICAgICAgaWYgKGkgIT09IGopIHtcclxuICAgICAgICAgIGlmICh0aGlzLnBhcnRpYWxzT3ZlcmxhcHMocGFydGlhbHNbaV0sIHBhcnRpYWxzW2pdKSkge1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXHJcbiAgICAgICAgICAgIC8vICAgcGFydGlhbHNbaV06ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX0sXHJcbiAgICAgICAgICAgIC8vICAgcGFydGlhbHNbal06ICR7cGFydGlhbHNbal0udG9TdHJpbmcoKX0sXHJcbiAgICAgICAgICAgIC8vIGApO1xyXG4gICAgICAgICAgICBwYXJ0aWFsc1tpXS5zcGxpY2UoLTIsIDIsIC4uLnBhcnRpYWxzW2pdKTtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYFxyXG4gICAgICAgICAgICAvLyAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9IFtORVddLFxyXG4gICAgICAgICAgICAvLyBgKTtcclxuICAgICAgICAgICAgcGFydGlhbHMuc3BsaWNlKGosIDEpO1xyXG4gICAgICAgICAgICBpZiAoaiA8IGkpIHtcclxuICAgICAgICAgICAgICBpLS07XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgb3ZlcmxhcCA9IHRoaXMucGFydGlhbHNPdmVybGFwcyhwYXJ0aWFsc1tpXSwgcGFydGlhbHNbaV0pIHx8IHRoaXMucGFydGlhbHNNZWV0KHBhcnRpYWxzW2ldLCBwYXJ0aWFsc1tpXSk7XHJcbiAgICAgICAgICAgIGlmIChvdmVybGFwID4gMCkge1xyXG4gICAgICAgICAgICAgIHBhcnRpYWxzW2ldLnNwbGljZSgwLCBvdmVybGFwKTtcclxuICAgICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXHJcbiAgICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tpXTogJHtwYXJ0aWFsc1tpXS50b1N0cmluZygpfSBbQ0xPU0VEXSxcclxuICAgICAgICAgICAgICAvLyBgKTtcclxuICAgICAgICAgICAgICBwb2x5Z29uSW5kZXhlcy5wdXNoKHBhcnRpYWxzW2ldKTtcclxuICAgICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaSwgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaSA9IC0xO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaSsrO1xyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coJ2luY29tcGxldGUgcG9seWdvbnMnKTtcclxuICAgIC8vIHBhcnRpYWxzLm1hcChwID0+IGNvbnNvbGUubG9nKHAudG9TdHJpbmcoKSkpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ3BvbHlnb25zJywgcG9seWdvbnMpO1xyXG4gICAgLy8gcG9seWdvbnMubWFwKHAgPT4gY29uc29sZS5sb2cocC50b1N0cmluZygpKSk7XHJcbiAgICByZXR1cm4gcG9seWdvbkluZGV4ZXM7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9scGxvdFJlbmRlcmVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9wb2xwbG90LXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9saW5lXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFN1cnZleSB9IGZyb20gXCIuL3N1cnZleVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuLy8gbGluZVxyXG5jb25zdCBnVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuZ1RlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XHJcbmdUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjRweCcpO1xyXG5cclxuY29uc3QgbGluZVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdsaW5lJyk7XHJcbmxpbmVUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnMTAsIDQsIDEsIDQnKTtcclxuXHJcbmNvbnN0IGFuY2hvclRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbmFuY2hvclRlbXBsYXRlLnNldEF0dHJpYnV0ZShcclxuICAnZCcsXHJcbiAgJ00gMCwgMCAnICtcclxuICAnQSAxMCwgMTAsIDAsIDAsIDAsIC01LCAtNSAnICtcclxuICAnQSAxMCwgMTAsIDAsIDEsIDEsIDUsIC01ICcgK1xyXG4gICdBIDEwLCAxMCwgMCwgMCwgMCwgMCwgMCdcclxuKTtcclxuYW5jaG9yVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3doaXRlJyk7XHJcblxyXG5jb25zdCB0ZXh0VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3RleHQnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XHJcbnRleHRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2FsaWdubWVudC1iYXNlbGluZScsICdjZW50cmFsJyk7XHJcbnRleHRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ2NvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBjb3VyaWVyLCBtb25vc3BhY2UnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC13ZWlnaHQnLCAnMTAwJyk7XHJcbnRleHRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNHB4Jyk7XHJcblxyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQobGluZVRlbXBsYXRlKTtcclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKGFuY2hvclRlbXBsYXRlKTtcclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKGFuY2hvclRlbXBsYXRlLmNsb25lTm9kZSgpKTtcclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKHRleHRUZW1wbGF0ZSk7XHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZCh0ZXh0VGVtcGxhdGUuY2xvbmVOb2RlKCkpO1xyXG5cclxuLy8gcG9pbnRcclxuY29uc3QgZ1BvaW50VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuZ1BvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcclxuZ1BvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC40cHgnKTtcclxuXHJcbmNvbnN0IHBvaW50VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2NpcmNsZScpO1xyXG5wb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdncmVlbicpO1xyXG5wb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgncicsICczJyk7XHJcblxyXG5jb25zdCB0ZXh0UG9pbnRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAndGV4dCcpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMCwgMTApJyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndGV4dC1hbmNob3InLCAnbWlkZGxlJyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2hhbmdpbmcnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsICdjb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgY291cmllciwgbW9ub3NwYWNlJyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC13ZWlnaHQnLCAnMTAwJyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzE0cHgnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXN0eWxlJywgJ2l0YWxpYycpO1xyXG5cclxuZ1BvaW50VGVtcGxhdGUuYXBwZW5kQ2hpbGQocG9pbnRUZW1wbGF0ZSk7XHJcbmdQb2ludFRlbXBsYXRlLmFwcGVuZENoaWxkKHRleHRQb2ludFRlbXBsYXRlKTtcclxuXHJcbi8vIHBvbHlnb25cclxuY29uc3QgcG9seWdvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnZ3JlZW4nKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgJzAuNycpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC44cHgnKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsICc1LCAyJyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5cclxuLy8gc3VydmV5XHJcbmNvbnN0IGdTdXJ2ZXlUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5nU3VydmV5VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDMwMCwgMTAwKScpO1xyXG5cclxuY29uc3Qgc3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbnN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAndXJsKCNlYXJ0aC1oYXRjaCknKTtcclxuc3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAnKTtcclxuXHJcbmNvbnN0IHN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5zdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMCcpO1xyXG5zdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcclxuc3VydmV5VG9wUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuOHB4Jyk7XHJcblxyXG5jb25zdCBzdXJ2ZXlMaXRob2xvZ3lUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5cclxuZ1N1cnZleVRlbXBsYXRlLmFwcGVuZENoaWxkKHN1cnZleUxpdGhvbG9neVRlbXBsYXRlKTtcclxuZ1N1cnZleVRlbXBsYXRlLmFwcGVuZENoaWxkKHN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZSk7XHJcbmdTdXJ2ZXlUZW1wbGF0ZS5hcHBlbmRDaGlsZChzdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUpO1xyXG5cclxuLy8gbGl0aG9sb2dpY2FsTGF5ZXJcclxuY29uc3QgbGl0aG9sb2dpY2FsTGF5ZXJSZWN0VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3JlY3QnKTtcclxuXHJcbi8vIGVhcnRoSGF0Y2hcclxuY29uc3QgaGF0Y2hQYXR0ZXJuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXR0ZXJuJyk7XHJcbmhhdGNoUGF0dGVybi5pZCA9ICdlYXJ0aC1oYXRjaCc7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ3BhdHRlcm5Vbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCd3aWR0aCcsICcyNScpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMjUnKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyMyMjJkMzInKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XHJcblxyXG5sZXQgaGF0Y2hQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbmNvbnN0IGhhdGNoRHMgPSBbXHJcbiAgJ00tMSwxIGwyLC0yJyxcclxuICAnTS0xLDkgbDEwLC0xMCcsXHJcblxyXG4gICdNLTEsMTggbDQsLTQnLFxyXG4gICdNLTEsMjYgbDgsLTgnLFxyXG4gIC8vICdNNiwyNiBsNCwtNCcsXHJcbiAgJ003LDI2IGw0LC00JyxcclxuXHJcbiAgLy8gJ00xNSwyNiBsMTAsLTEwJyxcclxuICAnTTE2LDI2IGwxMCwtMTAnLFxyXG4gIC8vICdNMjMsMjYgbDIsLTInLFxyXG4gICdNMjQsMjYgbDIsLTInLFxyXG5cclxuICAnTTE0LDMgbDQsLTQnLFxyXG4gICdNMTgsNyBsOCwtOCcsXHJcbiAgJ00yMiwxMSBsNCwtNCcsXHJcblxyXG4gICdNMiwxMSBsMTMsMTMnLFxyXG4gICdNNiw3IGwxMywxMycsXHJcbiAgJ00xMCwzIGwxMywxMycsXHJcbl07XHJcbmZvciAoY29uc3QgZCBvZiBoYXRjaERzKSB7XHJcbiAgaGF0Y2hQYXRoLnNldEF0dHJpYnV0ZSgnZCcsIGQpO1xyXG4gIGhhdGNoUGF0dGVybi5hcHBlbmRDaGlsZChoYXRjaFBhdGgpO1xyXG4gIGhhdGNoUGF0aCA9IGhhdGNoUGF0aC5jbG9uZU5vZGUoKSBhcyBTVkdQYXRoRWxlbWVudFxyXG59XHJcblxyXG4vLyB0eXBlIHNlbGVjdFxyXG5jb25zdCBzZWxlY3RUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3NlbGVjdCcpO1xyXG5zZWxlY3RUZW1wbGF0ZS5zdHlsZS5wb3NpdGlvbiA9ICdhYnNvbHV0ZSc7XHJcbnNlbGVjdFRlbXBsYXRlLnN0eWxlLnRyYW5zZm9ybSA9ICd0cmFuc2xhdGVZKC00OSUpJztcclxuc2VsZWN0VGVtcGxhdGUuc3R5bGUubGVmdCA9ICcyNHB4JztcclxubGV0IG9wdGlvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnb3B0aW9uJyk7XHJcbmNvbnN0IHZhbHVlcyA9IFtcclxuICAnbm9uIGlkZW50aWZpw6knLFxyXG4gICdhcmdpbGUnLFxyXG4gICdjYWxjYWlyZSdcclxuXTtcclxuY29uc3QgY29sb3JzID0gbmV3IE1hcChbXHJcbiAgW3ZhbHVlc1swXSwgJyNmZGUzMTInXSxcclxuICBbdmFsdWVzWzFdLCAnIzI4OWZkZSddLFxyXG4gIFt2YWx1ZXNbMl0sICcjYWJmZTEyJ11cclxuXSk7XHJcblxyXG5mb3IgKGNvbnN0IHZhbHVlIG9mIHZhbHVlcykge1xyXG4gIG9wdGlvblRlbXBsYXRlLmlubmVySFRNTCA9IHZhbHVlO1xyXG4gIG9wdGlvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndmFsdWUnLCB2YWx1ZSk7XHJcbiAgc2VsZWN0VGVtcGxhdGUuYXBwZW5kQ2hpbGQob3B0aW9uVGVtcGxhdGUpO1xyXG4gIG9wdGlvblRlbXBsYXRlID0gb3B0aW9uVGVtcGxhdGUuY2xvbmVOb2RlKCkgYXMgSFRNTE9wdGlvbkVsZW1lbnQ7XHJcbn1cclxuXHJcbi8vIHF1YW50aXR5XHJcbmNvbnN0IHBUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ3AnKTtcclxucFRlbXBsYXRlLnN0eWxlLmJvcmRlckxlZnRXaWR0aCA9ICcxNHB4JztcclxucFRlbXBsYXRlLnN0eWxlLmZvbnRGYW1pbHkgPSAnY29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIGNvdXJpZXIsIG1vbm9zcGFjZSc7XHJcbnBUZW1wbGF0ZS5zdHlsZS5mb250V2VpZ2h0ID0gJzEwMCc7XHJcbnBUZW1wbGF0ZS5zdHlsZS5mb250U2l6ZSA9ICcxNHB4JztcclxucFRlbXBsYXRlLnN0eWxlLmhlaWdodCA9ICcxNHB4JztcclxucFRlbXBsYXRlLnN0eWxlLnBhZGRpbmdMZWZ0ID0gJzhweCc7XHJcblxyXG4vLyBjb250b3VyXHJcbmNvbnN0IGNvbnRvdXJUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5jb250b3VyVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XHJcblxyXG5leHBvcnQgY2xhc3MgU3ZnUmVuZGVyZXIgaW1wbGVtZW50cyBQb2xwbG90UmVuZGVyZXIge1xyXG4gIHByaXZhdGUgc3ZnOiBTVkdFbGVtZW50O1xyXG4gIHByaXZhdGUgc2lkZWJhckRpdjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBzaWRlYmFyU3ZnOiBTVkdFbGVtZW50O1xyXG4gIHByaXZhdGUgc2VsZWN0Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnZGl2Jyk7XHJcbiAgcHJpdmF0ZSBwb2ludENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgcG9seWdvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgbGluZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgc3VydmV5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbiAgcHJpdmF0ZSBxdWFudGl0aWVzQ29udGFpbmVyOiBIVE1MRGl2RWxlbWVudDtcclxuICBwcml2YXRlIHN2Z0dCeUxpbmUgPSBuZXcgTWFwPExpbmUsIFNWR0dFbGVtZW50PigpO1xyXG4gIHByaXZhdGUgc3ZnUGF0aEJ5UG9seWdvbiA9IG5ldyBNYXA8UG9seWdvbiwgU1ZHUGF0aEVsZW1lbnQ+KCk7XHJcbiAgcHJpdmF0ZSBzdmdHQnlQb2ludCA9IG5ldyBNYXA8VmVjdG9yMiwgU1ZHR0VsZW1lbnQ+KCk7XHJcbiAgcHJpdmF0ZSBoYW5kbGVyczogUmVjb3JkPHN0cmluZywgKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkPiA9IHt9O1xyXG4gIHB1YmxpYyBsaXRob0NoYW5nZUhhbmRsZXI6ICgpID0+IHZvaWQ7XHJcbiAgcHJpdmF0ZSBzdmdDb250b3VyUGF0aDogU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgY29uc3RydWN0b3IoKSB7XHJcbiAgICB0aGlzLnN2Z0NvbnRvdXJQYXRoID0gY29udG91clRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgdGhpcy5zdmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpO1xyXG4gICAgdGhpcy5zaWRlYmFyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXInKTtcclxuICAgIHRoaXMuc2lkZWJhclN2ZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyID4gc3ZnJyk7XHJcbiAgICB0aGlzLnN2Zy5wcmVwZW5kKHRoaXMuc3ZnQ29udG91clBhdGgpO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoaGF0Y2hQYXR0ZXJuKTtcclxuICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMucG9seWdvbkNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLmxpbmVDb250YWluZXIpO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5wb2ludENvbnRhaW5lcik7XHJcbiAgICB0aGlzLnF1YW50aXRpZXNDb250YWluZXIgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcucXVhbnRpdGllcy5jb250YWluZXInKTtcclxuICAgIHRoaXMuc2lkZWJhclN2Zy5hcHBlbmRDaGlsZCh0aGlzLnN1cnZleUNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnNpZGViYXJEaXYuYXBwZW5kQ2hpbGQodGhpcy5zZWxlY3RDb250YWluZXIpO1xyXG4gIH1cclxuICBwcml2YXRlIF9zZXRFdmVudEhhbmRsZXIoc3ZnOiBTVkdFbGVtZW50LCBldmVudDogc3RyaW5nLCBoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIGlmICh0aGlzLmhhbmRsZXJzW2V2ZW50XSkge1xyXG4gICAgICBzdmcucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5oYW5kbGVyc1tldmVudF0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVyc1tldmVudF0gPSBoYW5kbGVyO1xyXG4gICAgc3ZnLmFkZEV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuaGFuZGxlcnNbZXZlbnRdKTtcclxuICB9XHJcbiAgc2V0TW91c2VEb3duSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnN2ZywgJ21vdXNlZG93bicsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBzZXRNb3VzZVVwSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnN2ZywgJ21vdXNldXAnLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0TW91c2VNb3ZlSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnN2ZywgJ21vdXNlbW92ZScsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBzZXRTaWRlYmFyTW91c2VEb3duSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnNpZGViYXJTdmcsICdtb3VzZWRvd24nLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0U2lkZWJhck1vdXNlVXBIYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc2lkZWJhclN2ZywgJ21vdXNldXAnLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0U2lkZWJhck1vdXNlTW92ZUhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zaWRlYmFyU3ZnLCAnbW91c2Vtb3ZlJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIGRyYXdMaW5lKGxpbmU6IExpbmUsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbGV0IHN2Z0c6IFNWR0dFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLnN2Z0dCeUxpbmUuaGFzKGxpbmUpKSB7XHJcbiAgICAgIHN2Z0cgPSBnVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgICB0aGlzLmxpbmVDb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnRyk7XHJcbiAgICAgIHRoaXMuc3ZnR0J5TGluZS5zZXQobGluZSwgc3ZnRyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdmdHID0gdGhpcy5zdmdHQnlMaW5lLmdldChsaW5lKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN2Z0xpbmUgPSBzdmdHLmNoaWxkcmVuWzBdIGFzIFNWR0xpbmVFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnUGF0aEFuY2hvclN0YXJ0ID0gc3ZnRy5jaGlsZHJlblsxXSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1BhdGhBbmNob3JFbmQgPSBzdmdHLmNoaWxkcmVuWzJdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnVGV4dFN0YXJ0ID0gc3ZnRy5jaGlsZHJlblszXSBhcyBTVkdUZXh0RWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1RleHRFbmQgPSBzdmdHLmNoaWxkcmVuWzRdIGFzIFNWR1RleHRFbGVtZW50O1xyXG4gICAgY29uc3QgeDEgPSBsaW5lLngxLnRvRml4ZWQoKTtcclxuICAgIGNvbnN0IHkxID0gbGluZS55MS50b0ZpeGVkKCk7XHJcbiAgICBjb25zdCB4MiA9IGxpbmUueDIudG9GaXhlZCgpO1xyXG4gICAgY29uc3QgeTIgPSBsaW5lLnkyLnRvRml4ZWQoKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MScsIHgxKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd5MScsIHkxKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MicsIHgyKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd5MicsIHkyKTtcclxuICAgIHN2Z1RleHRTdGFydC5pbm5lckhUTUwgPSBuYW1lO1xyXG4gICAgc3ZnVGV4dEVuZC5pbm5lckhUTUwgPSBuYW1lO1xyXG4gICAgY29uc3QgYW5nbGUgPSAxODAgKiAobGluZS52Mi5zdWIobGluZS52MSkuYW5nbGUoKSAtIE1hdGguUEkgLyAyKSAvIE1hdGguUEk7XHJcbiAgICBjb25zdCBiZWZvcmUgPSBsaW5lLmJlZm9yZSgxNCk7XHJcbiAgICBjb25zdCBhZnRlciA9IGxpbmUuYWZ0ZXIoMTQpO1xyXG4gICAgc3ZnUGF0aEFuY2hvclN0YXJ0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3gxfSwgJHt5MX0pIHJvdGF0ZSgke2lzTmFOKGFuZ2xlKSA/IDAgOiBhbmdsZX0pYCk7XHJcbiAgICBzdmdQYXRoQW5jaG9yRW5kLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3gyfSwgJHt5Mn0pIHJvdGF0ZSgke2lzTmFOKGFuZ2xlKSA/IDAgOiAxODAgKyBhbmdsZX0pYCk7XHJcbiAgICBzdmdUZXh0U3RhcnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7aXNOYU4oYmVmb3JlLngpID8geDEgOiBiZWZvcmUueC50b0ZpeGVkKCl9LCAke2lzTmFOKGJlZm9yZS55KSA/IHkxIDogYmVmb3JlLnkudG9GaXhlZCgpfSlgKTtcclxuICAgIHN2Z1RleHRFbmQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7aXNOYU4oYWZ0ZXIueCkgPyB4MiA6IGFmdGVyLngudG9GaXhlZCgpfSwgJHtpc05hTihhZnRlci55KSA/IHkyIDogYWZ0ZXIueS50b0ZpeGVkKCl9KWApO1xyXG4gIH1cclxuICBlcmFzZUxpbmUobGluZTogTGluZSk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3ZnRyA9IHRoaXMuc3ZnR0J5TGluZS5nZXQobGluZSk7XHJcbiAgICBpZiAoc3ZnRykge1xyXG4gICAgICB0aGlzLmxpbmVDb250YWluZXIucmVtb3ZlQ2hpbGQoc3ZnRyk7XHJcbiAgICAgIHRoaXMuc3ZnR0J5TGluZS5kZWxldGUobGluZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGRyYXdQb2ludChwb2ludDogVmVjdG9yMiwgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBsZXQgc3ZnRzogU1ZHR0VsZW1lbnQ7XHJcbiAgICBpZiAoIXRoaXMuc3ZnR0J5UG9pbnQuaGFzKHBvaW50KSkge1xyXG4gICAgICBzdmdHID0gZ1BvaW50VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgICB0aGlzLnBvaW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z0cpO1xyXG4gICAgICB0aGlzLnN2Z0dCeVBvaW50LnNldChwb2ludCwgc3ZnRyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdmdHID0gdGhpcy5zdmdHQnlQb2ludC5nZXQocG9pbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3ZnVGV4dCA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHVGV4dEVsZW1lbnQ7XHJcbiAgICBzdmdHLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3BvaW50LngudG9GaXhlZCgpfSwgJHtwb2ludC55LnRvRml4ZWQoKX0pYCk7XHJcbiAgICBzdmdUZXh0LmlubmVySFRNTCA9IG5hbWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgY2xlYXJDb250YWluZXIoY29udGFpbmVyOiBFbGVtZW50KTogdm9pZCB7XHJcbiAgICB3aGlsZSAoY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcclxuICAgICAgY29udGFpbmVyLnJlbW92ZUNoaWxkKGNvbnRhaW5lci5maXJzdENoaWxkKTtcclxuICAgIH1cclxuICB9XHJcbiAgY2xlYXJJbnRlcnNlY3Rpb25zKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnBvaW50Q29udGFpbmVyKTtcclxuICB9XHJcbiAgZHJhd1BvbHlnb24ocG9seWdvbjogUG9seWdvbiwgZmlsbCA9ICcjJyArIChNYXRoLmZsb29yKCgxNjc3NzIxNSAtIDFlNSkgKiBNYXRoLnJhbmRvbSgpKSArIDFlNSkudG9TdHJpbmcoMTYpKTogdm9pZCB7XHJcbiAgICBsZXQgc3ZnUGF0aDogU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBpZiAoIXRoaXMuc3ZnUGF0aEJ5UG9seWdvbi5oYXMocG9seWdvbikpIHtcclxuICAgICAgc3ZnUGF0aCA9IHBvbHlnb25UZW1wbGF0ZS5jbG9uZU5vZGUoKSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgICAgdGhpcy5wb2x5Z29uQ29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z1BhdGgpO1xyXG4gICAgICB0aGlzLnN2Z1BhdGhCeVBvbHlnb24uc2V0KHBvbHlnb24sIHN2Z1BhdGgpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3ZnUGF0aCA9IHRoaXMuc3ZnUGF0aEJ5UG9seWdvbi5nZXQocG9seWdvbik7XHJcbiAgICB9XHJcbiAgICBzdmdQYXRoLnNldEF0dHJpYnV0ZSgnZCcsICdNICcgKyBwb2x5Z29uLnZlcnRpY2VzLm1hcCh2ID0+IGAke3YueC50b0ZpeGVkKCl9ICR7di55LnRvRml4ZWQoKX1gKS5qb2luKCcgTCAnKSArICcgWicpO1xyXG4gICAgc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBmaWxsKTtcclxuICB9XHJcbiAgZHJhd0NvbnRvdXIocG9seWdvbjogUG9seWdvbik6IHZvaWQge1xyXG4gICAgdGhpcy5zdmdDb250b3VyUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCAnTSAnICsgcG9seWdvbi52ZXJ0aWNlcy5tYXAodiA9PiBgJHt2LngudG9GaXhlZCgpfSAke3YueS50b0ZpeGVkKCl9YCkuam9pbignIEwgJykgKyAnIFonKTtcclxuICB9XHJcbiAgY2xlYXJQb2x5Z29ucygpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5wb2x5Z29uQ29udGFpbmVyKTtcclxuICB9XHJcblxyXG4gIGRyYXdTdXJ2ZXkoc3VydmV5OiBTdXJ2ZXkpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5zdXJ2ZXlDb250YWluZXIpO1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnNlbGVjdENvbnRhaW5lcik7XHJcbiAgICBjb25zdCBXSURUSCA9IDIwMDtcclxuICAgIGNvbnN0IFRISUNLTkVTUyA9IDEwO1xyXG4gICAgY29uc3QgRElBTUVURVIgPSA1MDtcclxuICAgIGNvbnN0IGQgPSBgTSAkeygtV0lEVEggLyAyKS50b0ZpeGVkKCl9LCAwIGAgK1xyXG4gICAgICBgaCAkeygoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAke3N1cnZleS5kZXB0aCgpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGBoICR7RElBTUVURVIudG9GaXhlZCgpfSBgICtcclxuICAgICAgYHYgJHstc3VydmV5LmRlcHRoKCkudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfWA7XHJcbiAgICBjb25zdCBkQm90dG9tID0gZCArICcgJyArXHJcbiAgICAgIGB2ICR7VEhJQ0tORVNTLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGBoICR7KFRISUNLTkVTUyAtIChXSURUSCAtIERJQU1FVEVSKSAvIDIpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGB2ICR7c3VydmV5LmRlcHRoKCkudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoLSgyICogVEhJQ0tORVNTICsgRElBTUVURVIpKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAkey1zdXJ2ZXkuZGVwdGgoKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAkeyhUSElDS05FU1MgLSAoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9IFpgO1xyXG5cclxuICAgIGNvbnN0IHN2Z0cgPSBnU3VydmV5VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgY29uc3QgbGl0aG9sb2d5ID0gc3ZnRy5jaGlsZHJlblswXSBhcyBTVkdHRWxlbWVudDtcclxuICAgIGNvbnN0IGJvdHRvbVBvbHlnb24gPSBzdmdHLmNoaWxkcmVuWzFdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgY29uc3QgdG9wUG9seWdvbiA9IHN2Z0cuY2hpbGRyZW5bMl0gYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBib3R0b21Qb2x5Z29uLnNldEF0dHJpYnV0ZSgnZCcsIGRCb3R0b20pO1xyXG4gICAgdG9wUG9seWdvbi5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcclxuXHJcbiAgICBsZXQgdG9wID0gMDtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgc3VydmV5LmxpdGhvbG9neS5sZW5ndGg7IGkrKykge1xyXG4gICAgICBjb25zdCBsaXRob2xvZ2ljYWxMYXllciA9IGxpdGhvbG9naWNhbExheWVyUmVjdFRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIFNWR1JlY3RFbGVtZW50O1xyXG4gICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ3gnLCAoLURJQU1FVEVSIC8gMikudG9GaXhlZCgpKTtcclxuICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCd5JywgdG9wLnRvRml4ZWQoKSk7XHJcbiAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCBESUFNRVRFUi50b0ZpeGVkKCkpO1xyXG4gICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsIHN1cnZleS5saXRob2xvZ3lbaV0uZGVwdGgudG9GaXhlZCgpKTtcclxuICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCdmaWxsJywgY29sb3JzLmdldChzdXJ2ZXkubGl0aG9sb2d5W2ldLnR5cGUpKTtcclxuICAgICAgbGl0aG9sb2d5LmFwcGVuZENoaWxkKGxpdGhvbG9naWNhbExheWVyKTtcclxuXHJcbiAgICAgIGNvbnN0IHNlbGVjdCA9IHNlbGVjdFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKSBhcyBIVE1MU2VsZWN0RWxlbWVudDtcclxuICAgICAgc2VsZWN0LnF1ZXJ5U2VsZWN0b3IoYG9wdGlvblt2YWx1ZT1cIiR7c3VydmV5LmxpdGhvbG9neVtpXS50eXBlfVwiXWApLnNldEF0dHJpYnV0ZSgnc2VsZWN0ZWQnLCAnc2VsZWN0ZWQnKTtcclxuICAgICAgc2VsZWN0LmFkZEV2ZW50TGlzdGVuZXIoJ2NoYW5nZScsIGV2ZW50ID0+IHtcclxuICAgICAgICBzdXJ2ZXkubGl0aG9sb2d5W2ldLnR5cGUgPSBzZWxlY3QudmFsdWU7XHJcbiAgICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCdmaWxsJywgY29sb3JzLmdldChzZWxlY3QudmFsdWUpKTtcclxuICAgICAgICB0aGlzLmxpdGhvQ2hhbmdlSGFuZGxlcigpO1xyXG4gICAgICB9KTtcclxuICAgICAgc2VsZWN0LnN0eWxlLnRvcCA9ICh0b3AgKyAxMDAgKyBzdXJ2ZXkubGl0aG9sb2d5W2ldLmRlcHRoIC8gMikudG9GaXhlZCgpICsgJ3B4JztcclxuXHJcbiAgICAgIHRoaXMuc2VsZWN0Q29udGFpbmVyLmFwcGVuZENoaWxkKHNlbGVjdCk7XHJcblxyXG4gICAgICB0b3AgKz0gc3VydmV5LmxpdGhvbG9neVtpXS5kZXB0aDtcclxuICAgIH1cclxuXHJcbiAgICB0aGlzLnN1cnZleUNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdHKTtcclxuICAgIHRoaXMuc2lkZWJhckRpdi5jbGFzc0xpc3QuYWRkKCd2aXNpYmxlJyk7XHJcbiAgfVxyXG4gIGNsZWFyU3VydmV5KCk6IHZvaWQge1xyXG4gICAgdGhpcy5zaWRlYmFyRGl2LmNsYXNzTGlzdC5yZW1vdmUoJ3Zpc2libGUnKTtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5zdXJ2ZXlDb250YWluZXIpO1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnNlbGVjdENvbnRhaW5lcik7XHJcbiAgfVxyXG4gIGRyYXdRdWFudGl0aWVzKHF1YW50aXRpZXM6IE1hcDxzdHJpbmcsIG51bWJlcj4pOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5xdWFudGl0aWVzQ29udGFpbmVyKTtcclxuICAgIHF1YW50aXRpZXMuZm9yRWFjaCgocXVhbnRpdHksIHR5cGUpID0+IHtcclxuICAgICAgY29uc3QgcCA9IHBUZW1wbGF0ZS5jbG9uZU5vZGUoKSBhcyBIVE1MUGFyYWdyYXBoRWxlbWVudDtcclxuICAgICAgcC5pbm5lckhUTUwgPSBgJHt0eXBlfSAoJHsocXVhbnRpdHkgLyAoMTAgKiAxMCAqIDUwKSkudG9GaXhlZCgyKX0gbcKzKWA7XHJcbiAgICAgIHAuc3R5bGUuYm9yZGVyTGVmdCA9IGA4cHggc29saWQgJHtjb2xvcnMuZ2V0KHR5cGUpfWA7XHJcbiAgICAgIHRoaXMucXVhbnRpdGllc0NvbnRhaW5lci5hcHBlbmRDaGlsZChwKTtcclxuICAgIH0pO1xyXG4gIH1cclxufSIsImltcG9ydCB7IFBvbHBsb3QgfSBmcm9tIFwiLi9wb2xwbG90XCI7XHJcbmltcG9ydCB7IFN2Z1JlbmRlcmVyIH0gZnJvbSBcIi4vc3ZnLXJlbmRlcmVyXCI7XHJcblxyXG5jb25zdCBzdmdSZW5kZXJlciA9IG5ldyBTdmdSZW5kZXJlcigpO1xyXG5jb25zdCBwb2xwbG90ID0gbmV3IFBvbHBsb3Qoc3ZnUmVuZGVyZXIpOyJdLCJzb3VyY2VSb290IjoiIn0=