(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var h=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/h,this.crossRaw(i-e,r-n,e-o,n-s)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(t,e){this.type=t,this.depth=e},i=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),r=function(){function t(t,e,n){this.coordinates=t,this.lithology=e,this.polygon=n}return t.prototype.depth=function(){return this.lithology.reduce((function(t,e){return t+e.depth}),0)},t.prototype.quantities=function(){var t=new Map;if(this.polygon){var e=this.polygon.area();this.lithology.forEach((function(n){var i=t.get(n.type)||0;t.set(n.type,i+Math.round(e*n.depth))}))}return t},t}(),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},s=function(){function s(n){var r=this;this.renderer=n,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.quantities=new Map,this.mode=1,document.addEventListener("keyup",(function(t){"s"===t.key?r.mode=2:"l"===t.key?(r.mode=1,r.renderer.clearSurvey()):"Escape"===t.key&&r.renderer.clearSurvey()}));var o,s,a,u,h=-1,l=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);1===r.mode?-1===(h=r.nearestLineIndexFrom(i,20))?(r.addLine(new e(i.x,i.y,i.x,i.y)),h=r.lines.length-1,o=r.lines[h].v2):i.sub(r.lines[h].v1).len()<20?o=r.lines[h].v1:i.sub(r.lines[h].v2).len()<20&&(o=r.lines[h].v2):2===r.mode&&-1===(l=r.nearestSurveyIndexFrom(i,20))&&(r.addSurvey(i),l=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===r.mode?(h=-1,o=null):2===r.mode&&(-1!==l?(s=r.surveys[l],r.renderer.drawSurvey(s)):s=null,l=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button){1===r.mode?o?(o.x+=e.movementX,o.y+=e.movementY,r.updateIntersectionTimes(r.lines[h]),r.renderer.drawLine(r.lines[h],h.toString())):-1!==h&&(r.lines[h].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(r.lines[h]),r.renderer.drawLine(r.lines[h],h.toString())):2===r.mode&&-1!==l&&(r.surveys[l].coordinates.x+=e.movementX,r.surveys[l].coordinates.y+=e.movementY,r.updateSurvey(r.surveys[l]));for(var n=new t(e.clientX,e.clientY),i=!1,s=a,u=0,d=r.polygons;u<d.length;u++){var c=d[u];if(c.contains(n)){c!==a&&(r.renderer.drawPolygon(c,"red"),a=c),i=!0;break}}i||(a=null),s&&s!==a&&r.renderer.drawPolygon(s,"white")}})),this.renderer.setSidebarMouseDownHandler((function(e){if(!e.button&&s)for(var n=new t(e.offsetX,e.offsetY),r=new t(300,100),o=0,a=s.lithology;o<a.length;o++){var h=a[o],l=new i([r.add(new t(-25,0)),r.add(new t(25,0)),r.add(new t(25,h.depth)),r.add(new t(-25,h.depth))]);if(r.y+=h.depth,l.contains(n)){u=h;break}}})),this.renderer.setSidebarMouseUpHandler((function(t){t.button||(u=null)})),this.renderer.setSidebarMouseMoveHandler((function(t){t.button||u&&(u.depth+=t.movementY,r.renderer.drawSurvey(s),r.updateQuantities())})),this.renderer.lithoChangeHandler=function(){r.updateQuantities()}}return s.prototype.nearestLineIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.lines.length;o++)(n=this.lines[o].nearestTo(t).sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].coordinates.sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.addSurvey=function(t){for(var e,i=0,o=this.polygons;i<o.length;i++){var s=o[i];if(s.contains(t)){e=s;break}}var a=new r(t,[new n("non identifié",50),new n("non identifié",50),new n("non identifié",50)],e);this.surveys.push(a),this.renderer.drawPoint(t,e?(e.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateSurvey=function(t){t.polygon=null;for(var e=0,n=this.polygons;e<n.length;e++){var i=n[e];if(i.contains(t.coordinates)){t.polygon=i;break}}this.renderer.drawPoint(t.coordinates,t.polygon?(t.polygon.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateQuantities=function(){var t=this;this.quantities.clear(),this.surveys.forEach((function(e){e.quantities().forEach((function(e,n){t.quantities.set(n,(t.quantities.get(n)||0)+e)}))})),this.renderer.drawQuantities(this.quantities)},s.prototype.addLine=function(e,n,i,r,o,s){void 0===n&&(n=this.lines.length),void 0===i&&(i=this.lines),void 0===r&&(r=this.intersectionTimes),void 0===o&&(o=this.intersections),void 0===s&&(s=this.intersectionIndex);for(var a=[],u=[],h=0;h<i.length;h++)r[h].splice(n,0,NaN),o.push(new t),s[h].splice(n,0,o.length-1),a.push(NaN),u.push(o.length-1);a.splice(n,0,NaN),u.splice(n,0,-1),r.splice(n,0,a),s.splice(n,0,u),this.lines.splice(n,0,e),this.renderer.drawLine(e,n.toString()),this.updateIntersectionTimes(e)},s.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=e.indexOf(t),a=0;a<e.length;a++)a!==s&&(o=e[a].intersectionTimesWith(t),n[a][s]=o.x,n[s][a]=o.y,a<s?i[r[a][s]]=e[a].pointAt(o.x):i[r[s][a]]=e[a].pointAt(o.x));this.renderIntersections()},s.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new i(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},s.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},s.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},s.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},s.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},s.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],o=function(e){for(var o=0;o<i[e].length;o++){var a=i[e][o];if(e<a){var u=n[e][i[e][o]],h=o-1,l=o+1,d=i[a].findIndex((function(t){return t===e})),c=s.testSide(t[e].v1,t[e].v2,t[a].v1),p=c?d-1:d+1,v=c?d+1:d-1,y=0<o?n[e][i[e][h]]:null,f=o<i[e].length-1?n[e][i[e][l]]:null,g=-1<p&&p<i[a].length?n[a][i[a][p]]:null,w=-1<v&&v<i[a].length?n[a][i[a][v]]:null,m=s.buildPartialsFromIntersectionIndexes(u,[y,w,f,g]);r.push.apply(r,m)}}},s=this,a=0;a<i.length;a++)o(a);return r},s.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],r=0;r<t.length;){for(var s=0;s<t.length;s++)if(r!==s&&this.partialsOverlaps(t[r],t[s])){(e=t[r]).splice.apply(e,o([-2,2],t[s])),t.splice(s,1),s<r&&r--,(n=this.partialsOverlaps(t[r],t[r])||this.partialsMeet(t[r],t[r]))>0&&(t[r].splice(0,n),i.push(t[r]),t.splice(r,1)),r=-1;break}r++}return i},s}(),a=document.createElementNS("http://www.w3.org/2000/svg","g");a.setAttribute("stroke","black"),a.setAttribute("stroke-width","0.4px");var u=document.createElementNS("http://www.w3.org/2000/svg","line");u.setAttribute("stroke-dasharray","10, 4, 1, 4");var h=document.createElementNS("http://www.w3.org/2000/svg","path");h.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),h.setAttribute("fill","white");var l=document.createElementNS("http://www.w3.org/2000/svg","text");l.setAttribute("text-anchor","middle"),l.setAttribute("alignment-baseline","central"),l.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),l.setAttribute("font-weight","100"),l.setAttribute("font-size","14px"),a.appendChild(u),a.appendChild(h),a.appendChild(h.cloneNode()),a.appendChild(l),a.appendChild(l.cloneNode());var d=document.createElementNS("http://www.w3.org/2000/svg","g");d.setAttribute("stroke","black"),d.setAttribute("stroke-width","0.4px");var c=document.createElementNS("http://www.w3.org/2000/svg","circle");c.setAttribute("fill","green"),c.setAttribute("r","3");var p=document.createElementNS("http://www.w3.org/2000/svg","text");p.setAttribute("transform","translate(0, 10)"),p.setAttribute("text-anchor","middle"),p.setAttribute("alignment-baseline","hanging"),p.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),p.setAttribute("font-weight","100"),p.setAttribute("font-size","14px"),p.setAttribute("font-style","italic"),d.appendChild(c),d.appendChild(p);var v=document.createElementNS("http://www.w3.org/2000/svg","path");v.setAttribute("fill","green"),v.setAttribute("fill-opacity","0.7"),v.setAttribute("stroke-width","0.8px"),v.setAttribute("stroke-dasharray","5, 2"),v.setAttribute("stroke","black");var y=document.createElementNS("http://www.w3.org/2000/svg","g");y.setAttribute("transform","translate(300, 100)");var f=document.createElementNS("http://www.w3.org/2000/svg","path");f.setAttribute("fill","url(#earth-hatch)"),f.setAttribute("stroke-width","0");var g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("fill-opacity","0"),g.setAttribute("stroke","black"),g.setAttribute("stroke-width","0.8px");var w=document.createElementNS("http://www.w3.org/2000/svg","g");y.appendChild(w),y.appendChild(f),y.appendChild(g);var m=document.createElementNS("http://www.w3.org/2000/svg","rect"),b=document.createElementNS("http://www.w3.org/2000/svg","pattern");b.id="earth-hatch",b.setAttribute("patternUnits","userSpaceOnUse"),b.setAttribute("width","25"),b.setAttribute("height","25"),b.setAttribute("stroke","#222d32"),b.setAttribute("stroke-width","0.4px");for(var x=document.createElementNS("http://www.w3.org/2000/svg","path"),A=0,C=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];A<C.length;A++){var M=C[A];x.setAttribute("d",M),b.appendChild(x),x=x.cloneNode()}var S=document.createElement("select");S.style.position="absolute",S.style.transform="translateY(-49%)",S.style.left="24px";for(var N=document.createElement("option"),F=["non identifié","argile","calcaire"],E=new Map([[F[0],"#fde312"],[F[1],"#289fde"],[F[2],"#abfe12"]]),P=0,L=F;P<L.length;P++){var R=L[P];N.innerHTML=R,N.setAttribute("value",R),S.appendChild(N),N=N.cloneNode()}var I=document.createElement("p");I.style.borderLeftWidth="14px",I.style.fontFamily='consolas, "Liberation Mono", courier, monospace',I.style.fontWeight="100",I.style.fontSize="14px",I.style.height="14px",I.style.paddingLeft="8px",new s(new(function(){function t(){this.selectContainer=document.createElement("div"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svg=document.querySelector(".content"),this.sidebarDiv=document.querySelector(".sidebar"),this.sidebarSvg=document.querySelector(".sidebar > svg"),this.svg.appendChild(b),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.quantitiesContainer=document.querySelector(".quantities.container"),this.sidebarSvg.appendChild(this.surveyContainer),this.sidebarDiv.appendChild(this.selectContainer)}return t.prototype._setEventHandler=function(t,e,n){this.handlers[e]&&t.removeEventListener(e,this.handlers[e]),this.handlers[e]=n,t.addEventListener(e,this.handlers[e])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler(this.svg,"mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler(this.svg,"mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler(this.svg,"mousemove",t)},t.prototype.setSidebarMouseDownHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousedown",t)},t.prototype.setSidebarMouseUpHandler=function(t){this._setEventHandler(this.sidebarSvg,"mouseup",t)},t.prototype.setSidebarMouseMoveHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=a.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],s=n.children[3],u=n.children[4],h=t.x1.toFixed(),l=t.y1.toFixed(),d=t.x2.toFixed(),c=t.y2.toFixed();i.setAttribute("x1",h),i.setAttribute("y1",l),i.setAttribute("x2",d),i.setAttribute("y2",c),s.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+h+", "+l+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+d+", "+c+") rotate("+(isNaN(p)?0:180+p)+")"),s.setAttribute("transform","translate("+(isNaN(v.x)?h:v.x.toFixed())+", "+(isNaN(v.y)?l:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?d:y.x.toFixed())+", "+(isNaN(y.y)?c:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=d.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=v.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e=this;this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer);var n="M "+(-100).toFixed()+", 0 h "+75..toFixed()+" v "+t.depth().toFixed()+" h "+50..toFixed()+" v "+-t.depth().toFixed()+" h "+75..toFixed(),i=n+" v "+10..toFixed()+" h "+(-65).toFixed()+" v "+t.depth().toFixed()+" h "+(-70).toFixed()+" v "+-t.depth().toFixed()+" h "+(-65).toFixed()+" Z",r=y.cloneNode(!0),o=r.children[0],s=r.children[1],a=r.children[2];s.setAttribute("d",i),a.setAttribute("d",n);for(var u=0,h=function(n){var i=m.cloneNode();i.setAttribute("x",(-25).toFixed()),i.setAttribute("y",u.toFixed()),i.setAttribute("width",50..toFixed()),i.setAttribute("height",t.lithology[n].depth.toFixed()),i.setAttribute("fill",E.get(t.lithology[n].type)),o.appendChild(i);var r=S.cloneNode(!0);r.querySelector('option[value="'+t.lithology[n].type+'"]').setAttribute("selected","selected"),r.addEventListener("change",(function(o){t.lithology[n].type=r.value,i.setAttribute("fill",E.get(r.value)),e.lithoChangeHandler()})),r.style.top=(u+100+t.lithology[n].depth/2).toFixed()+"px",l.selectContainer.appendChild(r),u+=t.lithology[n].depth},l=this,d=0;d<t.lithology.length;d++)h(d);this.surveyContainer.appendChild(r),this.sidebarDiv.classList.add("visible")},t.prototype.clearSurvey=function(){this.sidebarDiv.classList.remove("visible"),this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer)},t.prototype.drawQuantities=function(t){var e=this;this.clearContainer(this.quantitiesContainer),t.forEach((function(t,n){var i=I.cloneNode();i.innerHTML=n+" ("+(t/5e3).toFixed(2)+" m³)",i.style.borderLeft="8px solid "+E.get(n),e.quantitiesContainer.appendChild(i)}))},t}()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9saW5lLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvbGl0aG9sb2dpY2FsLWxheWVyLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvcG9seWdvbi50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3N1cnZleS50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3BvbHBsb3QudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9zdmctcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ4IiwieSIsImRvdFJhdyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG90IiwidSIsInYiLCJ0aGlzIiwib3RoZXIiLCJWZWN0b3IyIiwiY3Jvc3NSYXciLCJjcm9zcyIsImxlbjJSYXciLCJNYXRoIiwicG93IiwibGVuMiIsImxlblJhdyIsInNxcnQiLCJsZW4iLCJub3JtYWxpemVSYXciLCJieSIsImNvZWYiLCJtdWxSYXciLCJub3JtYWxpemUiLCJlcXVhbHNSYXciLCJlcXVhbHMiLCJhZGRSYXciLCJhZGQiLCJzdWJSYXciLCJzdWIiLCJtdWwiLCJpbnRlcnNlY3Rpb25UaW1lc1JhdyIsImZ4IiwiZnkiLCJ0eCIsInR5Iiwic3giLCJzeSIsImV4IiwiZXkiLCJkZXQiLCJpbnRlcnNlY3Rpb25UaW1lcyIsImZyb20iLCJ0byIsInN0YXJ0IiwiZW5kIiwiaW50ZXJzZWN0aW9uUmF3IiwidGltZXMiLCJpbnRlcnNlY3Rpb24iLCJhbmdsZSIsImExIiwiYTIiLCJQSSIsImFjb3MiLCJ2MSIsInYyIiwicG9pbnRBdCIsInQiLCJiZWZvcmUiLCJhZnRlciIsImludGVyc2VjdGlvblRpbWVzV2l0aCIsInVwZGF0ZSIsImR4MSIsImR5MSIsImR4MiIsImR5MiIsIm5lYXJlc3RUbyIsInAiLCJtYXgiLCJtaW4iLCJ0eXBlIiwiZGVwdGgiLCJ2ZXJ0aWNlcyIsImFyZWFCZXR3ZWVuIiwiaSIsImoiLCJhcmVhIiwiYSIsImxlbmd0aCIsImNvbnRhaW5zIiwiYyIsInJldmVyc2UiLCJ0b1N0cmluZyIsIm1hcCIsInRvRml4ZWQiLCJqb2luIiwiY29vcmRpbmF0ZXMiLCJsaXRob2xvZ3kiLCJwb2x5Z29uIiwicmVkdWNlIiwibGF5ZXIiLCJxdWFudGl0aWVzIiwiTWFwIiwiZm9yRWFjaCIsImxpdGhvbG9naWNhbExheWVyIiwicXVhbnRpdHkiLCJnZXQiLCJzZXQiLCJyb3VuZCIsInJlbmRlcmVyIiwibGluZXMiLCJpbnRlcnNlY3Rpb25zIiwiaW50ZXJzZWN0aW9uSW5kZXgiLCJwb2x5Z29ucyIsInN1cnZleXMiLCJtb2RlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJjbGVhclN1cnZleSIsImRyYWdnZWRWZWN0b3IyIiwiYWN0aXZlU3VydmV5IiwicG9seWdvbkNvbnRhaW5lciIsImRyYWdnZWRMaXRob2xvZ3lMYXllciIsImRyYWdnZWRMaW5lSW5kZXgiLCJkcmFnZ2VkU3VydmV5SW5kZXgiLCJzZXRNb3VzZURvd25IYW5kbGVyIiwiYnV0dG9uIiwibW91c2UiLCJjbGllbnRYIiwiY2xpZW50WSIsIm5lYXJlc3RMaW5lSW5kZXhGcm9tIiwiYWRkTGluZSIsIkxpbmUiLCJuZWFyZXN0U3VydmV5SW5kZXhGcm9tIiwiYWRkU3VydmV5Iiwic2V0TW91c2VVcEhhbmRsZXIiLCJkcmF3U3VydmV5Iiwic2V0TW91c2VNb3ZlSGFuZGxlciIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsInVwZGF0ZUludGVyc2VjdGlvblRpbWVzIiwiZHJhd0xpbmUiLCJ1cGRhdGVTdXJ2ZXkiLCJpc0luc2lkZSIsIm9sZFBvbHlnb25Db250YWluZXIiLCJkcmF3UG9seWdvbiIsInNldFNpZGViYXJNb3VzZURvd25IYW5kbGVyIiwib2Zmc2V0WCIsIm9mZnNldFkiLCJvZmZzZXQiLCJQb2x5Z29uIiwic2V0U2lkZWJhck1vdXNlVXBIYW5kbGVyIiwic2V0U2lkZWJhck1vdXNlTW92ZUhhbmRsZXIiLCJ1cGRhdGVRdWFudGl0aWVzIiwibGl0aG9DaGFuZ2VIYW5kbGVyIiwidGhyZXNob2xkIiwiZGlzdCIsIm5lYXJlc3RMaW5lSW5kZXgiLCJuZWFyZXN0RGlzdCIsIm5lYXJlc3RTdXJ2ZXlJbmRleCIsImNvbnRhaW5lciIsInN1cnZleSIsIlN1cnZleSIsIkxpdGhvbG9naWNhbExheWVyIiwicHVzaCIsImRyYXdQb2ludCIsImNsZWFyIiwiZHJhd1F1YW50aXRpZXMiLCJsaW5lIiwiYXQiLCJuZXdJbnRlcnNlY3Rpb25UaW1lcyIsIm5ld0ludGVyc2VjdGlvbkluZGV4Iiwic3BsaWNlIiwiTmFOIiwiaW5kZXgiLCJpbmRleE9mIiwicmVuZGVySW50ZXJzZWN0aW9ucyIsImNsZWFyUG9seWdvbnMiLCJwYXJ0aWFscyIsImJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMiLCJidWlsZFBvbHlnb25JbmRleGVzRnJvbVBhcnRpYWxzIiwicG9seWdvbkluZGV4IiwidGVzdFNpZGUiLCJ3IiwicGFydGlhbHNPdmVybGFwcyIsInAxIiwicDIiLCJwYXJ0aWFsc01lZXQiLCJidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMiLCJjZW50ZXIiLCJpbmRleGVzIiwicGFydHMiLCJpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkiLCJpbnRlcnNlY3Rpb25UaW1lc0F0SSIsIl8iLCJmaWx0ZXIiLCJpc05hTiIsInNvcnQiLCJsb2NhbEluZGV4IiwibG9jYWxJbnRlckluZGV4IiwiZm9yZWlnbkluZGV4IiwiaW50ZXIiLCJwcmV2TG9jYWxJbnRlckluZGV4IiwibmV4dExvY2FsSW50ZXJJbmRleCIsImZvcmVpZ25JbnRlckluZGV4IiwiZmluZEluZGV4IiwiZm9yZWlnbmlzUmlnaHRTaWRlZCIsInByZXZGb3JlaWduSW50ZXJJbmRleCIsIm5leHRGb3JlaWduSW50ZXJJbmRleCIsInByZXZMb2NhbEludGVyIiwibmV4dExvY2FsSW50ZXIiLCJwcmV2Rm9yZWlnbkludGVyIiwibmV4dEZvcmVpZ25JbnRlciIsIm92ZXJsYXAiLCJwb2x5Z29uSW5kZXhlcyIsImdUZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImxpbmVUZW1wbGF0ZSIsImFuY2hvclRlbXBsYXRlIiwidGV4dFRlbXBsYXRlIiwiYXBwZW5kQ2hpbGQiLCJjbG9uZU5vZGUiLCJnUG9pbnRUZW1wbGF0ZSIsInBvaW50VGVtcGxhdGUiLCJ0ZXh0UG9pbnRUZW1wbGF0ZSIsInBvbHlnb25UZW1wbGF0ZSIsImdTdXJ2ZXlUZW1wbGF0ZSIsInN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZSIsInN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZSIsInN1cnZleUxpdGhvbG9neVRlbXBsYXRlIiwibGl0aG9sb2dpY2FsTGF5ZXJSZWN0VGVtcGxhdGUiLCJoYXRjaFBhdHRlcm4iLCJpZCIsImhhdGNoUGF0aCIsImQiLCJzZWxlY3RUZW1wbGF0ZSIsImNyZWF0ZUVsZW1lbnQiLCJzdHlsZSIsInBvc2l0aW9uIiwidHJhbnNmb3JtIiwibGVmdCIsIm9wdGlvblRlbXBsYXRlIiwidmFsdWVzIiwiY29sb3JzIiwidmFsdWUiLCJpbm5lckhUTUwiLCJwVGVtcGxhdGUiLCJib3JkZXJMZWZ0V2lkdGgiLCJmb250RmFtaWx5IiwiZm9udFdlaWdodCIsImZvbnRTaXplIiwiaGVpZ2h0IiwicGFkZGluZ0xlZnQiLCJQb2xwbG90Iiwic2VsZWN0Q29udGFpbmVyIiwicG9pbnRDb250YWluZXIiLCJsaW5lQ29udGFpbmVyIiwic3VydmV5Q29udGFpbmVyIiwic3ZnR0J5TGluZSIsInN2Z1BhdGhCeVBvbHlnb24iLCJzdmdHQnlQb2ludCIsImhhbmRsZXJzIiwic3ZnIiwicXVlcnlTZWxlY3RvciIsInNpZGViYXJEaXYiLCJzaWRlYmFyU3ZnIiwicXVhbnRpdGllc0NvbnRhaW5lciIsIl9zZXRFdmVudEhhbmRsZXIiLCJoYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm5hbWUiLCJzdmdHIiwiaGFzIiwic3ZnTGluZSIsImNoaWxkcmVuIiwic3ZnUGF0aEFuY2hvclN0YXJ0Iiwic3ZnUGF0aEFuY2hvckVuZCIsInN2Z1RleHRTdGFydCIsInN2Z1RleHRFbmQiLCJlcmFzZUxpbmUiLCJyZW1vdmVDaGlsZCIsImRlbGV0ZSIsInBvaW50Iiwic3ZnVGV4dCIsImNsZWFyQ29udGFpbmVyIiwiZmlyc3RDaGlsZCIsImNsZWFySW50ZXJzZWN0aW9ucyIsImZpbGwiLCJzdmdQYXRoIiwiZmxvb3IiLCJyYW5kb20iLCJkQm90dG9tIiwiYm90dG9tUG9seWdvbiIsInRvcFBvbHlnb24iLCJ0b3AiLCJzZWxlY3QiLCJjbGFzc0xpc3QiLCJyZW1vdmUiLCJib3JkZXJMZWZ0Il0sIm1hcHBpbmdzIjoibUJBQUEsaUJBQ0UsV0FBbUJBLEVBQWNDLFFBQWQsSUFBQUQsTUFBQSxRQUFjLElBQUFDLE1BQUEsR0FBZCxLQUFBRCxJQUFjLEtBQUFDLElBcUluQyxPQXBJUyxFQUFBQyxPQUFQLFNBQWNDLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2hELE9BQU9ILEVBQUtFLEVBQUtELEVBQUtFLEdBRWpCLEVBQUFDLElBQVAsU0FBV0MsRUFBWUMsR0FDckIsT0FBT0MsS0FBS1IsT0FBT00sRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFdEMsWUFBQU0sSUFBQSxTQUFJSSxHQUNGLE9BQU9DLEVBQVFMLElBQUlHLEtBQU1DLElBRXBCLEVBQUFFLFNBQVAsU0FBZ0JWLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2xELE9BQU9ILEVBQUtHLEVBQUtELEVBQUtELEdBRWpCLEVBQUFVLE1BQVAsU0FBYU4sRUFBWUMsR0FDdkIsT0FBT0MsS0FBS0csU0FBU0wsRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFeEMsWUFBQWEsTUFBQSxTQUFNSCxHQUNKLE9BQU9DLEVBQVFFLE1BQU1KLEtB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RyxFQUFPbEUsVUFBVWIsR0FBR0osS0FBSSxNQUFNMkksYUFBYSxXQUFZLFlBQzdGK0UsRUFBT3JMLGlCQUFpQixVQUFVLFNBQUFDLEdBQ2hDNkMsRUFBT2xFLFVBQVViLEdBQUdKLEtBQU8wTixFQUFPbkQsTUFDbEMvSSxFQUFrQm1ILGFBQWEsT0FBUTJCLEVBQU81SSxJQUFJZ00sRUFBT25ELFFBQ3pELEVBQUszRix3QkFFUDhJLEVBQU8xRCxNQUFNeUQsS0FBT0EsRUFBTSxJQUFNdEksRUFBT2xFLFVBQVViLEdBQUdILE1BQVEsR0FBR2EsVUFBWSxLQUUzRSxFQUFLbUssZ0JBQWdCbEMsWUFBWTJFLEdBRWpDRCxHQUFPdEksRUFBT2xFLFVBQVViLEdBQUdILE8sT0FwQnBCRyxFQUFJLEVBQUdBLEVBQUkrRSxFQUFPbEUsVUFBVVQsT0FBUUosSSxFQUFwQ0EsR0F1QlRuRSxLQUFLbVAsZ0JBQWdCckMsWUFBWW1ELEdBQ2pDalEsS0FBSzBQLFdBQVdnQyxVQUFVdFEsSUFBSSxZQUVoQyxZQUFBbUYsWUFBQSxXQUNFdkcsS0FBSzBQLFdBQVdnQyxVQUFVQyxPQUFPLFdBQ2pDM1IsS0FBSzhRLGVBQWU5USxLQUFLbVAsaUJBQ3pCblAsS0FBSzhRLGVBQWU5USxLQUFLZ1Asa0JBRTNCLFlBQUF4RixlQUFBLFNBQWVwRSxHQUFmLFdBQ0VwRixLQUFLOFEsZUFBZTlRLEtBQUs0UCxxQkFDekJ4SyxFQUFXRSxTQUFRLFNBQUNFLEVBQVV6QixHQUM1QixJQUFNSCxFQUFJNEssRUFBVXpCLFlBQ3BCbkosRUFBRTJLLFVBQWV4SyxFQUFJLE1BQU15QixFQUFXLEtBQWdCWCxRQUFRLEdBQUUsT0FDaEVqQixFQUFFbUssTUFBTTZELFdBQWEsYUFBYXZELEVBQU81SSxJQUFJMUIsR0FDN0MsRUFBSzZMLG9CQUFvQjlDLFlBQVlsSixPQUczQyxFQXBNQSxNIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmVjdG9yMiB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHggPSAwLCBwdWJsaWMgeSA9IDApIHt9XHJcbiAgc3RhdGljIGRvdFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB4MSAqIHgyICsgeTEgKiB5MjtcclxuICB9XHJcbiAgc3RhdGljIGRvdCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRvdFJhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBkb3Qob3RoZXI6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZG90KHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGNyb3NzUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHgxICogeTIgLSB4MiAqIHkxO1xyXG4gIH1cclxuICBzdGF0aWMgY3Jvc3ModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jcm9zc1Jhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBjcm9zcyhvdGhlcjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5jcm9zcyh0aGlzLCBvdGhlcik7XHJcbiAgfVxyXG4gIHN0YXRpYyBsZW4yUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuMih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlbjJSYXcodS54LCB1LnkpO1xyXG4gIH1cclxuICBsZW4yKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5sZW4yKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW4yUmF3KHgsIHkpKTtcclxuICB9XHJcbiAgc3RhdGljIGxlbih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlblJhdyh1LngsIHUueSk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIubGVuKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbm9ybWFsaXplUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xyXG4gICAgY29uc3QgY29lZiA9IGJ5IC8gdGhpcy5sZW5SYXcoeCwgeSk7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcoeCwgeSwgY29lZik7XHJcbiAgfVxyXG4gIHN0YXRpYyBub3JtYWxpemUodTogVmVjdG9yMiwgYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVJhdyh1LngsIHUueSwgYnkpO1xyXG4gIH1cclxuICBub3JtYWxpemUoYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHNSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHgxID09PSB4MiAmJiB5MSA9PT0geTI7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXF1YWxzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGVxdWFscyhvdGhlcjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZXF1YWxzKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGFkZFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgKyB4MiwgeTEgKyB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBhZGQodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGFkZChvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuYWRkKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIHN1YlJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgLSB4MiwgeTEgLSB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBzdWIodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuc3ViUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIHN1YihvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIG11bFJhdyh4OiBudW1iZXIsIHk6IG51bWJlciwgYnk6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHggKiBieSwgeSAqIGJ5KTtcclxuICB9XHJcbiAgc3RhdGljIG11bCh1OiBWZWN0b3IyLCBieTogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcodS54LCB1LnksIGJ5KTtcclxuICB9XHJcbiAgbXVsKGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm11bCh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25UaW1lc1JhdyhcclxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXHJcbiAgICBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyXHJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBkZXQgPSB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGV4IC0gc3gsIGV5IC0gc3kpO1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KGV4IC0gc3gsIGV5IC0gc3ksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0LFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0XHJcbiAgICApO1xyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBmcm9tOiBWZWN0b3IyLCB0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMlxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvblRpbWVzKHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb25UaW1lcyh0aGlzLCB0bywgc3RhcnQsIGVuZCk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25SYXcoXHJcbiAgICBmeDogbnVtYmVyLCBmeTogbnVtYmVyLCB0eDogbnVtYmVyLCB0eTogbnVtYmVyLFxyXG4gICAgc3g6IG51bWJlciwgc3k6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlclxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgdGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzUmF3KGZ4LCBmeSwgdHgsIHR5LCBzeCwgc3ksIGV4LCBleSk7XHJcbiAgICBpZiAodGltZXMpIHtcclxuICAgICAgdGltZXMueSA9IGZ5ICsgKHR5IC0gZnkpICogdGltZXMueDtcclxuICAgICAgdGltZXMueCA9IGZ4ICsgKHR4IC0gZngpICogdGltZXMueDtcclxuICAgICAgcmV0dXJuIHRpbWVzO1xyXG4gICAgfVxyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uKGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25SYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvbih0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuaW50ZXJzZWN0aW9uKHRoaXMsIHRvLCBzdGFydCwgZW5kKTtcclxuICB9XHJcbiAgYW5nbGUob3RoZXI/OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIGlmIChvdGhlcikge1xyXG4gICAgICAgY29uc3QgYTEgPSB0aGlzLmFuZ2xlKCk7XHJcbiAgICAgICBjb25zdCBhMiA9IG90aGVyLmFuZ2xlKCk7XHJcbiAgICAgICBpZiAoYTIgPCBhMSkge1xyXG4gICAgICAgIHJldHVybiBhMiArIDIgKiBNYXRoLlBJIC0gYTE7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhMiAtIGExO1xyXG4gICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPiAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMiAqIE1hdGguUEkgLSBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lIHtcclxuICB2MTogVmVjdG9yMjtcclxuICB2MjogVmVjdG9yMjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHgxPzogbnVtYmVyLFxyXG4gICAgeTE/OiBudW1iZXIsXHJcbiAgICB4Mj86IG51bWJlcixcclxuICAgIHkyPzogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLnYxID0gbmV3IFZlY3RvcjIoeDEsIHkxKTtcclxuICAgIHRoaXMudjIgPSBuZXcgVmVjdG9yMih4MiwgeTIpO1xyXG4gIH1cclxuICBnZXQgeDEoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLng7XHJcbiAgfVxyXG4gIGdldCB5MSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEueTtcclxuICB9XHJcbiAgZ2V0IHgyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52Mi54O1xyXG4gIH1cclxuICBnZXQgeTIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYyLnk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjIuc3ViKHRoaXMudjEpLmxlbigpO1xyXG4gIH1cclxuICBwb2ludEF0KHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCh0KSk7XHJcbiAgfVxyXG4gIGJlZm9yZSh0OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmFkZCh0aGlzLnYyLnN1Yih0aGlzLnYxKS5tdWwoLXQgLyB0aGlzLmxlbigpKSk7XHJcbiAgfVxyXG4gIGFmdGVyKHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCgodGhpcy5sZW4oKSArIHQpIC8gdGhpcy5sZW4oKSkpO1xyXG4gIH1cclxuICBpbnRlcnNlY3Rpb25UaW1lc1dpdGgob3RoZXI6IExpbmUpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmludGVyc2VjdGlvblRpbWVzKHRoaXMudjIsIG90aGVyLnYxLCBvdGhlci52Mik7XHJcbiAgfVxyXG4gIHVwZGF0ZShkeDEgPSAwLCBkeTEgPSAwLCBkeDIgPSAwLCBkeTIgPSAwKTogdm9pZCB7XHJcbiAgICB0aGlzLnYxLnggKz0gZHgxO1xyXG4gICAgdGhpcy52MS55ICs9IGR5MTtcclxuICAgIHRoaXMudjIueCArPSBkeDI7XHJcbiAgICB0aGlzLnYyLnkgKz0gZHkyO1xyXG4gIH1cclxuICBuZWFyZXN0VG8ocDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgaWYgKHRoaXMudjEuZXF1YWxzKHRoaXMudjIpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnYxLngsIHRoaXMudjEueSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1ID0gdGhpcy52Mi5zdWIodGhpcy52MSk7XHJcbiAgICBjb25zdCB0ID0gdS5kb3QocC5zdWIodGhpcy52MSkpIC8gdS5sZW4yKCk7XHJcbiAgICByZXR1cm4gdGhpcy5wb2ludEF0KE1hdGgubWF4KDAsIE1hdGgubWluKHQsIDEpKSk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIExpdGhvbG9naWNhbExheWVyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgZGVwdGg6IG51bWJlcixcclxuICApIHtcclxuXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2x5Z29uIHtcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSB2ZXJ0aWNlczogVmVjdG9yMltdID0gW10pIHtcclxuXHJcbiAgfVxyXG4gIHByaXZhdGUgYXJlYUJldHdlZW4oaTogbnVtYmVyLCBqOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHRoaXMudmVydGljZXNbaV0ueSArIHRoaXMudmVydGljZXNbal0ueSkgLyAyO1xyXG4gIH1cclxuICBhcmVhKCk6IG51bWJlciB7XHJcbiAgICBsZXQgYSA9IDA7XHJcbiAgICBsZXQgaSA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhICs9IHRoaXMuYXJlYUJldHdlZW4oaSwgaik7XHJcbiAgICAgIGkgPSBqO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbiAgfVxyXG4gIGNvbnRhaW5zKHY6IFZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgIGxldCBjID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBqID0gaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnZlcnRpY2VzW2ldLnkgPiB2LnkgIT09IHRoaXMudmVydGljZXNbal0ueSA+IHYueSAmJlxyXG4gICAgICAgIHYueCA8ICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHYueSAtIHRoaXMudmVydGljZXNbaV0ueSkgLyAodGhpcy52ZXJ0aWNlc1tqXS55IC0gdGhpcy52ZXJ0aWNlc1tpXS55KSArIHRoaXMudmVydGljZXNbaV0ueFxyXG4gICAgICApIHtcclxuICAgICAgICBjID0gIWM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuICByZXZlcnNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy52ZXJ0aWNlcy5yZXZlcnNlKCk7XHJcbiAgfVxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy52ZXJ0aWNlcy5sZW5ndGh9IHBvaW50czogYCArIHRoaXMudmVydGljZXMubWFwKHYgPT4gYCgke3YueC50b0ZpeGVkKCl9LCAke3YueS50b0ZpeGVkKCl9KWApLmpvaW4oJywgJykgKyBgIChhcmVhOiAke3RoaXMuYXJlYSgpLnRvRml4ZWQoKX0pYDtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBMaXRob2xvZ2ljYWxMYXllciB9IGZyb20gXCIuL2xpdGhvbG9naWNhbC1sYXllclwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSBcIi4vcG9seWdvblwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN1cnZleSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgY29vcmRpbmF0ZXM6IFZlY3RvcjIsXHJcbiAgICBwdWJsaWMgbGl0aG9sb2d5OiBMaXRob2xvZ2ljYWxMYXllcltdLFxyXG4gICAgcHVibGljIHBvbHlnb246IFBvbHlnb24sXHJcbiAgKSB7XHJcblxyXG4gIH1cclxuICBkZXB0aCgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMubGl0aG9sb2d5LnJlZHVjZSgoZGVwdGgsIGxheWVyKSA9PiBkZXB0aCArIGxheWVyLmRlcHRoLCAwKTtcclxuICB9XHJcbiAgcXVhbnRpdGllcygpOiBNYXA8c3RyaW5nLCBudW1iZXI+IHtcclxuICAgIGNvbnN0IHF1YW50aXRpZXMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gICAgaWYgKHRoaXMucG9seWdvbikge1xyXG4gICAgICBjb25zdCBhcmVhID0gdGhpcy5wb2x5Z29uLmFyZWEoKTtcclxuICAgICAgdGhpcy5saXRob2xvZ3kuZm9yRWFjaChsaXRob2xvZ2ljYWxMYXllciA9PiB7XHJcbiAgICAgICAgbGV0IHF1YW50aXR5ID0gcXVhbnRpdGllcy5nZXQobGl0aG9sb2dpY2FsTGF5ZXIudHlwZSkgfHwgMDtcclxuICAgICAgICBxdWFudGl0aWVzLnNldChsaXRob2xvZ2ljYWxMYXllci50eXBlLCBxdWFudGl0eSArIE1hdGgucm91bmQoYXJlYSAqIGxpdGhvbG9naWNhbExheWVyLmRlcHRoKSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIHF1YW50aXRpZXM7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9scGxvdFJlbmRlcmVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9wb2xwbG90LXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9saW5lXCI7XHJcbmltcG9ydCB7IExpdGhvbG9naWNhbExheWVyIH0gZnJvbSBcIi4vbGl0aG9sb2dpY2FsLWxheWVyXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFN1cnZleSB9IGZyb20gXCIuL3N1cnZleVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuY29uc3QgQ0xJQ0tfVEhSRVNIT0xEID0gMjA7XHJcblxyXG5jb25zdCBlbnVtIE1vZGVzIHtcclxuICBQb2x5Z29uLFxyXG4gIExpbmUsXHJcbiAgU3VydmV5XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2xwbG90IHtcclxuICBsaW5lczogTGluZVtdID0gW107XHJcbiAgaW50ZXJzZWN0aW9uVGltZXM6IG51bWJlcltdW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25zOiBWZWN0b3IyW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25JbmRleDogbnVtYmVyW11bXSA9IFtdO1xyXG4gIHBvbHlnb25zOiBQb2x5Z29uW10gPSBbXTtcclxuICBzdXJ2ZXlzOiBTdXJ2ZXlbXSA9IFtdO1xyXG4gIHF1YW50aXRpZXMgPSBuZXcgTWFwPHN0cmluZywgbnVtYmVyPigpO1xyXG4gIG1vZGUgPSBNb2Rlcy5MaW5lO1xyXG4gIGNvbnN0cnVjdG9yKHJlYWRvbmx5IHJlbmRlcmVyOiBQb2xwbG90UmVuZGVyZXIpIHtcclxuICAgIC8vIHJlbW92ZSBuZXh0IGhhY2t5IGV2ZW50TGlzdGVuZXJcclxuICAgIGRvY3VtZW50LmFkZEV2ZW50TGlzdGVuZXIoJ2tleXVwJywgZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQua2V5ID09PSAncycpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5TdXJ2ZXk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnbCcpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5MaW5lO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuY2xlYXJTdXJ2ZXkoKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdFc2NhcGUnKSB7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhclN1cnZleSgpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgZHJhZ2dlZExpbmVJbmRleCA9IC0xO1xyXG4gICAgbGV0IGRyYWdnZWRWZWN0b3IyOiBWZWN0b3IyO1xyXG4gICAgbGV0IGRyYWdnZWRTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZURvd25IYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLm5lYXJlc3RMaW5lSW5kZXhGcm9tKG1vdXNlLCBDTElDS19USFJFU0hPTEQpO1xyXG4gICAgICAgIGlmIChkcmFnZ2VkTGluZUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5hZGRMaW5lKG5ldyBMaW5lKG1vdXNlLngsIG1vdXNlLnksIG1vdXNlLngsIG1vdXNlLnkpKTtcclxuICAgICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLmxpbmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb3VzZS5zdWIodGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MSkubGVuKCkgPCBDTElDS19USFJFU0hPTEQpIHtcclxuICAgICAgICAgIGRyYWdnZWRWZWN0b3IyID0gdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1vdXNlLnN1Yih0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYyKS5sZW4oKSA8IENMSUNLX1RIUkVTSE9MRCkge1xyXG4gICAgICAgICAgZHJhZ2dlZFZlY3RvcjIgPSB0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLlN1cnZleSkge1xyXG4gICAgICAgIGRyYWdnZWRTdXJ2ZXlJbmRleCA9IHRoaXMubmVhcmVzdFN1cnZleUluZGV4RnJvbShtb3VzZSwgQ0xJQ0tfVEhSRVNIT0xEKTtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5hZGRTdXJ2ZXkobW91c2UpO1xyXG4gICAgICAgICAgZHJhZ2dlZFN1cnZleUluZGV4ID0gdGhpcy5zdXJ2ZXlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgYWN0aXZlU3VydmV5OiBTdXJ2ZXk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlVXBIYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSAtMTtcclxuICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5TdXJ2ZXkpIHtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgYWN0aXZlU3VydmV5ID0gdGhpcy5zdXJ2ZXlzW2RyYWdnZWRTdXJ2ZXlJbmRleF07XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdTdXJ2ZXkoYWN0aXZlU3VydmV5KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgYWN0aXZlU3VydmV5ID0gbnVsbDtcclxuICAgICAgICB9XHJcbiAgICAgICAgZHJhZ2dlZFN1cnZleUluZGV4ID0gLTE7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGxldCBwb2x5Z29uQ29udGFpbmVyOiBQb2x5Z29uO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZU1vdmVIYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkVmVjdG9yMikge1xyXG4gICAgICAgICAgZHJhZ2dlZFZlY3RvcjIueCArPSBldmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgICBkcmFnZ2VkVmVjdG9yMi55ICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXModGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XSk7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0sIGRyYWdnZWRMaW5lSW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfSBlbHNlIGlmIChkcmFnZ2VkTGluZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS51cGRhdGUoZXZlbnQubW92ZW1lbnRYLCBldmVudC5tb3ZlbWVudFksIGV2ZW50Lm1vdmVtZW50WCwgZXZlbnQubW92ZW1lbnRZKTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXModGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XSk7XHJcbiAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0sIGRyYWdnZWRMaW5lSW5kZXgudG9TdHJpbmcoKSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuU3VydmV5KSB7XHJcbiAgICAgICAgaWYgKGRyYWdnZWRTdXJ2ZXlJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgIHRoaXMuc3VydmV5c1tkcmFnZ2VkU3VydmV5SW5kZXhdLmNvb3JkaW5hdGVzLnggKz0gZXZlbnQubW92ZW1lbnRYO1xyXG4gICAgICAgICAgdGhpcy5zdXJ2ZXlzW2RyYWdnZWRTdXJ2ZXlJbmRleF0uY29vcmRpbmF0ZXMueSArPSBldmVudC5tb3ZlbWVudFk7XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZVN1cnZleSh0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XSk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIC8vIFRPRE86IHNob3VsZCBiZSBpbiBhIGZ1bmN0aW9uXHJcbiAgICAgIGNvbnN0IG1vdXNlID0gbmV3IFZlY3RvcjIoZXZlbnQuY2xpZW50WCwgZXZlbnQuY2xpZW50WSk7XHJcbiAgICAgIGxldCBpc0luc2lkZSA9IGZhbHNlO1xyXG4gICAgICBsZXQgb2xkUG9seWdvbkNvbnRhaW5lciA9IHBvbHlnb25Db250YWluZXI7XHJcbiAgICAgIGZvciAoY29uc3QgcG9seWdvbiBvZiB0aGlzLnBvbHlnb25zKSB7XHJcbiAgICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMobW91c2UpKSB7XHJcbiAgICAgICAgICBpZiAocG9seWdvbiAhPT0gcG9seWdvbkNvbnRhaW5lcikge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdQb2x5Z29uKHBvbHlnb24sICdyZWQnKTtcclxuICAgICAgICAgICAgcG9seWdvbkNvbnRhaW5lciA9IHBvbHlnb247XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICBpc0luc2lkZSA9IHRydWU7XHJcbiAgICAgICAgICBicmVhaztcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgaWYgKCFpc0luc2lkZSkge1xyXG4gICAgICAgIHBvbHlnb25Db250YWluZXIgPSBudWxsO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChvbGRQb2x5Z29uQ29udGFpbmVyICYmIG9sZFBvbHlnb25Db250YWluZXIgIT09IHBvbHlnb25Db250YWluZXIpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdQb2x5Z29uKG9sZFBvbHlnb25Db250YWluZXIsICd3aGl0ZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgbGV0IGRyYWdnZWRMaXRob2xvZ3lMYXllcjogTGl0aG9sb2dpY2FsTGF5ZXI7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpZGViYXJNb3VzZURvd25IYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYWN0aXZlU3VydmV5KSB7XHJcbiAgICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSBuZXcgVmVjdG9yMigzMDAsIDEwMCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBsaXRob2xvZ2ljYWxMYXllciBvZiBhY3RpdmVTdXJ2ZXkubGl0aG9sb2d5KSB7XHJcbiAgICAgICAgICBjb25zdCBwb2x5Z29uID0gbmV3IFBvbHlnb24oW1xyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKC0yNSwgMCkpLFxyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKDI1LCAwKSksXHJcbiAgICAgICAgICAgIG9mZnNldC5hZGQobmV3IFZlY3RvcjIoMjUsIGxpdGhvbG9naWNhbExheWVyLmRlcHRoKSksXHJcbiAgICAgICAgICAgIG9mZnNldC5hZGQobmV3IFZlY3RvcjIoLTI1LCBsaXRob2xvZ2ljYWxMYXllci5kZXB0aCkpLFxyXG4gICAgICAgICAgXSk7XHJcbiAgICAgICAgICBvZmZzZXQueSArPSBsaXRob2xvZ2ljYWxMYXllci5kZXB0aDtcclxuICAgICAgICAgIGlmIChwb2x5Z29uLmNvbnRhaW5zKG1vdXNlKSkge1xyXG4gICAgICAgICAgICBkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIgPSBsaXRob2xvZ2ljYWxMYXllcjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpZGViYXJNb3VzZVVwSGFuZGxlcihldmVudCA9PiB7XHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZHJhZ2dlZExpdGhvbG9neUxheWVyID0gbnVsbDtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIuc2V0U2lkZWJhck1vdXNlTW92ZUhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIpIHtcclxuICAgICAgICBkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIuZGVwdGggKz0gZXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1N1cnZleShhY3RpdmVTdXJ2ZXkpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLmxpdGhvQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVRdWFudGl0aWVzKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBuZWFyZXN0TGluZUluZGV4RnJvbSh2OiBWZWN0b3IyLCB0aHJlc2hvbGQgPSArSW5maW5pdHkpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RMaW5lSW5kZXggPSAtMTtcclxuICAgIGxldCBuZWFyZXN0RGlzdCA9ICtJbmZpbml0eTtcclxuICAgIGxldCBkaXN0OiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZGlzdCA9IHRoaXMubGluZXNbaV0ubmVhcmVzdFRvKHYpLnN1Yih2KS5sZW4oKTtcclxuICAgICAgaWYgKGRpc3QgPCB0aHJlc2hvbGQgJiYgZGlzdCA8IG5lYXJlc3REaXN0KSB7XHJcbiAgICAgICAgbmVhcmVzdERpc3QgPSBkaXN0O1xyXG4gICAgICAgIG5lYXJlc3RMaW5lSW5kZXggPSBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmVhcmVzdExpbmVJbmRleDtcclxuICB9XHJcbiAgbmVhcmVzdFN1cnZleUluZGV4RnJvbSh2OiBWZWN0b3IyLCB0aHJlc2hvbGQgPSArSW5maW5pdHkpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgbGV0IG5lYXJlc3REaXN0ID0gK0luZmluaXR5O1xyXG4gICAgbGV0IGRpc3Q6IG51bWJlcjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdXJ2ZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGRpc3QgPSB0aGlzLnN1cnZleXNbaV0uY29vcmRpbmF0ZXMuc3ViKHYpLmxlbigpO1xyXG4gICAgICBpZiAoZGlzdCA8IHRocmVzaG9sZCAmJiBkaXN0IDwgbmVhcmVzdERpc3QpIHtcclxuICAgICAgICBuZWFyZXN0RGlzdCA9IGRpc3Q7XHJcbiAgICAgICAgbmVhcmVzdFN1cnZleUluZGV4ID0gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5lYXJlc3RTdXJ2ZXlJbmRleDtcclxuICB9XHJcbiAgYWRkU3VydmV5KGNvb3JkaW5hdGVzOiBWZWN0b3IyKTogdm9pZCB7XHJcbiAgICBsZXQgY29udGFpbmVyOiBQb2x5Z29uO1xyXG4gICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIHRoaXMucG9seWdvbnMpIHtcclxuICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMoY29vcmRpbmF0ZXMpKSB7XHJcbiAgICAgICAgY29udGFpbmVyID0gcG9seWdvbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgY29uc3Qgc3VydmV5ID0gbmV3IFN1cnZleShjb29yZGluYXRlcywgW1xyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgICBuZXcgTGl0aG9sb2dpY2FsTGF5ZXIoJ25vbiBpZGVudGlmacOpJywgNTApLFxyXG4gICAgXSwgY29udGFpbmVyKTtcclxuICAgIHRoaXMuc3VydmV5cy5wdXNoKHN1cnZleSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdQb2ludChjb29yZGluYXRlcywgY29udGFpbmVyID8gKGNvbnRhaW5lci5hcmVhKCkgLyAoMTAgKiAxMCkpLnRvRml4ZWQoMikgKyAnIG0yJyA6ICcnKTtcclxuICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gIH1cclxuICAvLyBUT0RPOiBjbGVhbnVwIGFkZCB1cGRhdGUgcmVuZGVyIGFuZCBvdGhlciB3ZWlyZCBmdW5jdGlvbnNcclxuICB1cGRhdGVTdXJ2ZXkoc3VydmV5OiBTdXJ2ZXkpOiB2b2lkIHtcclxuICAgIHN1cnZleS5wb2x5Z29uID0gbnVsbDtcclxuICAgIGZvciAoY29uc3QgcG9seWdvbiBvZiB0aGlzLnBvbHlnb25zKSB7XHJcbiAgICAgIGlmIChwb2x5Z29uLmNvbnRhaW5zKHN1cnZleS5jb29yZGluYXRlcykpIHtcclxuICAgICAgICBzdXJ2ZXkucG9seWdvbiA9IHBvbHlnb247XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvaW50KHN1cnZleS5jb29yZGluYXRlcywgc3VydmV5LnBvbHlnb24gPyAoc3VydmV5LnBvbHlnb24uYXJlYSgpIC8gKDEwICogMTApKS50b0ZpeGVkKDIpICsgJyBtMicgOiAnJyk7XHJcbiAgICB0aGlzLnVwZGF0ZVF1YW50aXRpZXMoKTtcclxuICB9XHJcbiAgdXBkYXRlUXVhbnRpdGllcygpOiB2b2lkIHtcclxuICAgIHRoaXMucXVhbnRpdGllcy5jbGVhcigpO1xyXG4gICAgdGhpcy5zdXJ2ZXlzLmZvckVhY2goc3VydmV5ID0+IHtcclxuICAgICAgc3VydmV5LnF1YW50aXRpZXMoKS5mb3JFYWNoKChxdWFudGl0eSwgdHlwZSkgPT4ge1xyXG4gICAgICAgIHRoaXMucXVhbnRpdGllcy5zZXQodHlwZSwgKHRoaXMucXVhbnRpdGllcy5nZXQodHlwZSkgfHwgMCkgKyBxdWFudGl0eSk7XHJcbiAgICAgIH0pO1xyXG4gICAgfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdRdWFudGl0aWVzKHRoaXMucXVhbnRpdGllcyk7XHJcbiAgfVxyXG4gIGFkZExpbmUoXHJcbiAgICBsaW5lOiBMaW5lLFxyXG4gICAgYXQgPSB0aGlzLmxpbmVzLmxlbmd0aCxcclxuICAgIGxpbmVzID0gdGhpcy5saW5lcyxcclxuICAgIGludGVyc2VjdGlvblRpbWVzID0gdGhpcy5pbnRlcnNlY3Rpb25UaW1lcyxcclxuICAgIGludGVyc2VjdGlvbnMgPSB0aGlzLmludGVyc2VjdGlvbnMsXHJcbiAgICBpbnRlcnNlY3Rpb25JbmRleCA9IHRoaXMuaW50ZXJzZWN0aW9uSW5kZXgsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBjb25zdCBuZXdJbnRlcnNlY3Rpb25UaW1lczogbnVtYmVyW10gPSBbXTtcclxuICAgIGNvbnN0IG5ld0ludGVyc2VjdGlvbkluZGV4OiBudW1iZXJbXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXS5zcGxpY2UoYXQsIDAsIE5hTik7XHJcbiAgICAgIGludGVyc2VjdGlvbnMucHVzaChuZXcgVmVjdG9yMigpKTtcclxuICAgICAgaW50ZXJzZWN0aW9uSW5kZXhbaV0uc3BsaWNlKGF0LCAwLCBpbnRlcnNlY3Rpb25zLmxlbmd0aCAtIDEpO1xyXG4gICAgICBuZXdJbnRlcnNlY3Rpb25UaW1lcy5wdXNoKE5hTik7XHJcbiAgICAgIG5ld0ludGVyc2VjdGlvbkluZGV4LnB1c2goaW50ZXJzZWN0aW9ucy5sZW5ndGggLSAxKTtcclxuICAgIH1cclxuICAgIG5ld0ludGVyc2VjdGlvblRpbWVzLnNwbGljZShhdCwgMCwgTmFOKTtcclxuICAgIG5ld0ludGVyc2VjdGlvbkluZGV4LnNwbGljZShhdCwgMCwgLTEpO1xyXG4gICAgaW50ZXJzZWN0aW9uVGltZXMuc3BsaWNlKGF0LCAwLCBuZXdJbnRlcnNlY3Rpb25UaW1lcyk7XHJcbiAgICBpbnRlcnNlY3Rpb25JbmRleC5zcGxpY2UoYXQsIDAsIG5ld0ludGVyc2VjdGlvbkluZGV4KTtcclxuICAgIHRoaXMubGluZXMuc3BsaWNlKGF0LCAwLCBsaW5lKTtcclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUobGluZSwgYXQudG9TdHJpbmcoKSk7XHJcbiAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKGxpbmUpO1xyXG4gIH1cclxuICB1cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhcclxuICAgIGxpbmU6IExpbmUsXHJcbiAgICBsaW5lcyA9IHRoaXMubGluZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25UaW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3Rpb25zLFxyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXggPSB0aGlzLmludGVyc2VjdGlvbkluZGV4LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgaW5kZXggPSBsaW5lcy5pbmRleE9mKGxpbmUpO1xyXG4gICAgbGV0IHRpbWVzOiBWZWN0b3IyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaSAhPT0gaW5kZXgpIHtcclxuICAgICAgICB0aW1lcyA9IGxpbmVzW2ldLmludGVyc2VjdGlvblRpbWVzV2l0aChsaW5lKTtcclxuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXVtpbmRleF0gPSB0aW1lcy54O1xyXG4gICAgICAgIGludGVyc2VjdGlvblRpbWVzW2luZGV4XVtpXSA9IHRpbWVzLnk7XHJcbiAgICAgICAgaWYgKGkgPCBpbmRleCkge1xyXG4gICAgICAgICAgaW50ZXJzZWN0aW9uc1tpbnRlcnNlY3Rpb25JbmRleFtpXVtpbmRleF1dID0gbGluZXNbaV0ucG9pbnRBdCh0aW1lcy54KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaW50ZXJzZWN0aW9uc1tpbnRlcnNlY3Rpb25JbmRleFtpbmRleF1baV1dID0gbGluZXNbaV0ucG9pbnRBdCh0aW1lcy54KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVySW50ZXJzZWN0aW9ucygpO1xyXG4gIH1cclxuICByZW5kZXJJbnRlcnNlY3Rpb25zKCk6IHZvaWQge1xyXG4gICAgLy8gdGhpcy5yZW5kZXJlci5jbGVhckludGVyc2VjdGlvbnMoKTtcclxuICAgIC8vIHRoaXMuaW50ZXJzZWN0aW9ucy5mb3JFYWNoKGludGVyc2VjdGlvbiA9PiB7XHJcbiAgICAvLyAgIHRoaXMucmVuZGVyZXIuZHJhd1BvaW50KGludGVyc2VjdGlvbik7XHJcbiAgICAvLyB9KTtcclxuICAgIHRoaXMucmVuZGVyZXIuY2xlYXJQb2x5Z29ucygpO1xyXG4gICAgdGhpcy5wb2x5Z29ucyA9IFtdO1xyXG4gICAgY29uc3QgcGFydGlhbHMgPSB0aGlzLmJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMoKTtcclxuICAgIGNvbnN0IHBvbHlnb25JbmRleGVzID0gdGhpcy5idWlsZFBvbHlnb25JbmRleGVzRnJvbVBhcnRpYWxzKHBhcnRpYWxzKTtcclxuICAgIGNvbnN0IHBvbHlnb25zID0gcG9seWdvbkluZGV4ZXMubWFwKHBvbHlnb25JbmRleCA9PiBuZXcgUG9seWdvbihwb2x5Z29uSW5kZXgubWFwKGkgPT4gdGhpcy5pbnRlcnNlY3Rpb25zW2ldKSkpO1xyXG4gICAgcG9seWdvbnMuZm9yRWFjaChwb2x5Z29uID0+IHtcclxuICAgICAgaWYgKHBvbHlnb24uYXJlYSgpID4gMCkge1xyXG4gICAgICAgIHRoaXMucG9seWdvbnMucHVzaChwb2x5Z29uKTtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdQb2x5Z29uKHBvbHlnb24sICd3aGl0ZScpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuICAgIHRoaXMuc3VydmV5cy5mb3JFYWNoKHN1cnZleSA9PiB0aGlzLnVwZGF0ZVN1cnZleShzdXJ2ZXkpKTtcclxuICB9XHJcbiAgdGVzdFNpZGUodTogVmVjdG9yMiwgdjogVmVjdG9yMiwgdzogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHYuc3ViKHUpLmNyb3NzKHcuc3ViKHUpKSA+IDA7XHJcbiAgfVxyXG4gIHBhcnRpYWxzT3ZlcmxhcHMocDE6IG51bWJlcltdLCBwMjogbnVtYmVyW10pOiAyIHwgMCB7XHJcbiAgICByZXR1cm4gcDFbcDEubGVuZ3RoIC0gMl0gPT09IHAyWzBdICYmIHAxW3AxLmxlbmd0aCAtIDFdID09PSBwMlsxXSA/IDIgOiAwO1xyXG4gIH1cclxuICBwYXJ0aWFsc01lZXQocDE6IG51bWJlcltdLCBwMjogbnVtYmVyW10pOiAxIHwgMCB7XHJcbiAgICByZXR1cm4gcDFbcDEubGVuZ3RoIC0gMV0gPT09IHAyWzBdID8gMSA6IDA7XHJcbiAgfVxyXG4gIGJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uSW5kZXhlcyhcclxuICAgIGNlbnRlcjogbnVtYmVyLFxyXG4gICAgaW5kZXhlczogW251bWJlciwgbnVtYmVyLCBudW1iZXIsIG51bWJlcl0sXHJcbiAgKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10ge1xyXG4gICAgY29uc3QgcGFydHM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdID0gW107XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGluZGV4ZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKHR5cGVvZiBpbmRleGVzW2ldID09PSAnbnVtYmVyJykge1xyXG4gICAgICAgIGxldCBqID0gaSArIDE7XHJcbiAgICAgICAgaWYgKGogPT09IGluZGV4ZXMubGVuZ3RoKSB7XHJcbiAgICAgICAgICBqID0gMDtcclxuICAgICAgICB9XHJcbiAgICAgICAgd2hpbGUgKHR5cGVvZiBpbmRleGVzW2pdICE9PSAnbnVtYmVyJynCoHtcclxuICAgICAgICAgIGorKztcclxuICAgICAgICAgIGlmIChqID09PSBpbmRleGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgICBqID0gMDtcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKGkgIT09IGopIHtcclxuICAgICAgICAgIHBhcnRzLnB1c2goW2luZGV4ZXNbaV0sIGNlbnRlciwgaW5kZXhlc1tqXV0pO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIHBhcnRzO1xyXG4gIH1cclxuICBidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzKFxyXG4gICAgbGluZXMgPSB0aGlzLmxpbmVzLFxyXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzLFxyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXggPSB0aGlzLmludGVyc2VjdGlvbkluZGV4XHJcbiAgKTogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10ge1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2J1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMnKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCctLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnbGluZXMubGVuZ3RoID0gJywgbGluZXMubGVuZ3RoKTtcclxuICAgIGNvbnN0IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheSA9IGludGVyc2VjdGlvblRpbWVzXHJcbiAgICAgIC5tYXAoKGludGVyc2VjdGlvblRpbWVzQXRJLCBpKSA9PiB7XHJcbiAgICAgICAgcmV0dXJuIGludGVyc2VjdGlvblRpbWVzQXRJXHJcbiAgICAgICAgICAubWFwKChfLCBqKSA9PiBqKVxyXG4gICAgICAgICAgLmZpbHRlcihqID0+IHtcclxuICAgICAgICAgICAgcmV0dXJuICFpc05hTihpbnRlcnNlY3Rpb25UaW1lc0F0SVtqXSkgJiYgMCA8PSBpbnRlcnNlY3Rpb25UaW1lc0F0SVtqXSAmJiBpbnRlcnNlY3Rpb25UaW1lc0F0SVtqXSA8PSAxICYmXHJcbiAgICAgICAgICAgICAgIWlzTmFOKGludGVyc2VjdGlvblRpbWVzW2pdW2ldKSAmJiAwIDw9IGludGVyc2VjdGlvblRpbWVzW2pdW2ldICYmIGludGVyc2VjdGlvblRpbWVzW2pdW2ldIDw9IDE7XHJcbiAgICAgICAgICB9KVxyXG4gICAgICAgICAgLnNvcnQoKGksIGopID0+IGludGVyc2VjdGlvblRpbWVzQXRJW2ldIC0gaW50ZXJzZWN0aW9uVGltZXNBdElbal0pO1xyXG4gICAgICB9KTtcclxuICAgIC8vIGNvbnNvbGUubG9nKGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheSk7XHJcbiAgICBjb25zdCBwYXJ0aWFsczogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10gPSBbXTtcclxuICAgIGZvciAobGV0IGxvY2FsSW5kZXggPSAwOyBsb2NhbEluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5Lmxlbmd0aDsgbG9jYWxJbmRleCsrKSB7XHJcbiAgICAgIGZvciAobGV0IGxvY2FsSW50ZXJJbmRleCA9IDA7IGxvY2FsSW50ZXJJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XS5sZW5ndGg7IGxvY2FsSW50ZXJJbmRleCsrKSB7XHJcbiAgICAgICAgY29uc3QgZm9yZWlnbkluZGV4ID0gaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW2xvY2FsSW50ZXJJbmRleF07XHJcbiAgICAgICAgaWYgKGxvY2FsSW5kZXggPCBmb3JlaWduSW5kZXgpIHtcclxuICAgICAgICAgIGNvbnN0IGludGVyID0gaW50ZXJzZWN0aW9uSW5kZXhbbG9jYWxJbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW2xvY2FsSW50ZXJJbmRleF1dO1xyXG5cclxuICAgICAgICAgIGNvbnN0IHByZXZMb2NhbEludGVySW5kZXggPSBsb2NhbEludGVySW5kZXggLSAxO1xyXG4gICAgICAgICAgY29uc3QgbmV4dExvY2FsSW50ZXJJbmRleCA9IGxvY2FsSW50ZXJJbmRleCArIDE7XHJcblxyXG4gICAgICAgICAgY29uc3QgZm9yZWlnbkludGVySW5kZXggPSBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XS5maW5kSW5kZXgoaSA9PiBpID09PSBsb2NhbEluZGV4KTtcclxuICAgICAgICAgIGNvbnN0IGZvcmVpZ25pc1JpZ2h0U2lkZWQgPSB0aGlzLnRlc3RTaWRlKGxpbmVzW2xvY2FsSW5kZXhdLnYxLCBsaW5lc1tsb2NhbEluZGV4XS52MiwgbGluZXNbZm9yZWlnbkluZGV4XS52MSk7XHJcbiAgICAgICAgICBjb25zdCBwcmV2Rm9yZWlnbkludGVySW5kZXggPSBmb3JlaWduaXNSaWdodFNpZGVkID8gZm9yZWlnbkludGVySW5kZXggLSAxIDogZm9yZWlnbkludGVySW5kZXggKyAxO1xyXG4gICAgICAgICAgY29uc3QgbmV4dEZvcmVpZ25JbnRlckluZGV4ID0gZm9yZWlnbmlzUmlnaHRTaWRlZCA/IGZvcmVpZ25JbnRlckluZGV4ICsgMSA6IGZvcmVpZ25JbnRlckluZGV4IC0gMTtcclxuXHJcbiAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXHJcbiAgICAgICAgICAvLyAgIGxvY2FsSW5kZXg6ICR7bG9jYWxJbmRleH1cclxuICAgICAgICAgIC8vICAgbG9jYWxJbnRlcnNlY3Rpb25zICR7aW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdXHJcbiAgICAgICAgICAvLyAgICAgLm1hcCgoXywgaSkgPT4gaSA9PT0gbG9jYWxJbnRlckluZGV4ID8gYFske199XWAgOiBfKVxyXG4gICAgICAgICAgLy8gICAgIC5qb2luKCcsICcpfVxyXG4gICAgICAgICAgLy8gICBmb3JlaWduSW5kZXg6ICR7Zm9yZWlnbkluZGV4fVxyXG4gICAgICAgICAgLy8gICBmb3JlaWduSW50ZXJzZWN0aW9ucyAke2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdXHJcbiAgICAgICAgICAvLyAgICAgLm1hcCgoXywgaSkgPT4gaSA9PT0gZm9yZWlnbkludGVySW5kZXggPyBgWyR7X31dYCA6IF8pXHJcbiAgICAgICAgICAvLyAgICAgLmpvaW4oJywgJyl9XHJcbiAgICAgICAgICAvLyBgKTtcclxuXHJcbiAgICAgICAgICBjb25zdCBwcmV2TG9jYWxJbnRlciA9IDAgPCBsb2NhbEludGVySW5kZXhcclxuICAgICAgICAgICAgPyBpbnRlcnNlY3Rpb25JbmRleFtsb2NhbEluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF1bcHJldkxvY2FsSW50ZXJJbmRleF1dXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgIGNvbnN0IG5leHRMb2NhbEludGVyID0gbG9jYWxJbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdLmxlbmd0aCAtIDFcclxuICAgICAgICAgICAgPyBpbnRlcnNlY3Rpb25JbmRleFtsb2NhbEluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF1bbmV4dExvY2FsSW50ZXJJbmRleF1dXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgIGNvbnN0IHByZXZGb3JlaWduSW50ZXIgPSAtMSA8IHByZXZGb3JlaWduSW50ZXJJbmRleCAmJiBwcmV2Rm9yZWlnbkludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XS5sZW5ndGhcclxuICAgICAgICAgICAgPyBpbnRlcnNlY3Rpb25JbmRleFtmb3JlaWduSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdW3ByZXZGb3JlaWduSW50ZXJJbmRleF1dXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgIGNvbnN0IG5leHRGb3JlaWduSW50ZXIgPSAtMSA8IG5leHRGb3JlaWduSW50ZXJJbmRleCAmJiBuZXh0Rm9yZWlnbkludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XS5sZW5ndGhcclxuICAgICAgICAgICAgPyBpbnRlcnNlY3Rpb25JbmRleFtmb3JlaWduSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdW25leHRGb3JlaWduSW50ZXJJbmRleF1dXHJcbiAgICAgICAgICAgIDogbnVsbDtcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgXlxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICBuZXh0Rm9yZWlnbkludGVyXHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAgICAgIC8vICAtLS1wcmV2TG9jYWxJbnRlci0tLWludGVyLS0tbmV4dExvY2FsSW50ZXItLS0+XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHByZXZGb3JlaWduSW50ZXJcclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICAgICAgY29uc3QgcGFydHMgPSB0aGlzLmJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uSW5kZXhlcyhcclxuICAgICAgICAgICAgaW50ZXIsXHJcbiAgICAgICAgICAgIFtcclxuICAgICAgICAgICAgICBwcmV2TG9jYWxJbnRlcixcclxuICAgICAgICAgICAgICBuZXh0Rm9yZWlnbkludGVyLFxyXG4gICAgICAgICAgICAgIG5leHRMb2NhbEludGVyLFxyXG4gICAgICAgICAgICAgIHByZXZGb3JlaWduSW50ZXJcclxuICAgICAgICAgICAgXVxyXG4gICAgICAgICAgKTtcclxuICAgICAgICAgIHBhcnRpYWxzLnB1c2goLi4ucGFydHMpO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgLy8gY29uc29sZS5sb2coJ3BhcnRpYWxzJywgcGFydGlhbHMpO1xyXG4gICAgcmV0dXJuIHBhcnRpYWxzO1xyXG4gIH1cclxuICBidWlsZFBvbHlnb25JbmRleGVzRnJvbVBhcnRpYWxzKHBhcnRpYWxzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSk6IG51bWJlcltdW10ge1xyXG4gICAgY29uc3QgcG9seWdvbkluZGV4ZXM6IG51bWJlcltdW10gPSBbXTtcclxuICAgIGxldCBpID0gMDtcclxuICAgIGxldCBvdmVybGFwOiBudW1iZXI7XHJcbiAgICB3aGlsZSAoaSA8IHBhcnRpYWxzLmxlbmd0aCkge1xyXG4gICAgICBmb3IgKGxldCBqID0gMDsgaiA8IHBhcnRpYWxzLmxlbmd0aDsgaisrKcKge1xyXG4gICAgICAgIGlmIChpICE9PSBqKSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5wYXJ0aWFsc092ZXJsYXBzKHBhcnRpYWxzW2ldLCBwYXJ0aWFsc1tqXSkpIHtcclxuICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYFxyXG4gICAgICAgICAgICAvLyAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9LFxyXG4gICAgICAgICAgICAvLyAgIHBhcnRpYWxzW2pdOiAke3BhcnRpYWxzW2pdLnRvU3RyaW5nKCl9LFxyXG4gICAgICAgICAgICAvLyBgKTtcclxuICAgICAgICAgICAgcGFydGlhbHNbaV0uc3BsaWNlKC0yLCAyLCAuLi5wYXJ0aWFsc1tqXSk7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tpXTogJHtwYXJ0aWFsc1tpXS50b1N0cmluZygpfSBbTkVXXSxcclxuICAgICAgICAgICAgLy8gYCk7XHJcbiAgICAgICAgICAgIHBhcnRpYWxzLnNwbGljZShqLCAxKTtcclxuICAgICAgICAgICAgaWYgKGogPCBpKSB7XHJcbiAgICAgICAgICAgICAgaS0tO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIG92ZXJsYXAgPSB0aGlzLnBhcnRpYWxzT3ZlcmxhcHMocGFydGlhbHNbaV0sIHBhcnRpYWxzW2ldKSB8fCB0aGlzLnBhcnRpYWxzTWVldChwYXJ0aWFsc1tpXSwgcGFydGlhbHNbaV0pO1xyXG4gICAgICAgICAgICBpZiAob3ZlcmxhcCA+IDApIHtcclxuICAgICAgICAgICAgICBwYXJ0aWFsc1tpXS5zcGxpY2UoMCwgb3ZlcmxhcCk7XHJcbiAgICAgICAgICAgICAgLy8gY29uc29sZS5sb2coYFxyXG4gICAgICAgICAgICAgIC8vICAgcGFydGlhbHNbaV06ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX0gW0NMT1NFRF0sXHJcbiAgICAgICAgICAgICAgLy8gYCk7XHJcbiAgICAgICAgICAgICAgcG9seWdvbkluZGV4ZXMucHVzaChwYXJ0aWFsc1tpXSk7XHJcbiAgICAgICAgICAgICAgcGFydGlhbHMuc3BsaWNlKGksIDEpO1xyXG4gICAgICAgICAgICB9XHJcbiAgICAgICAgICAgIGkgPSAtMTtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICAgIGkrKztcclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKCdpbmNvbXBsZXRlIHBvbHlnb25zJyk7XHJcbiAgICAvLyBwYXJ0aWFscy5tYXAocCA9PiBjb25zb2xlLmxvZyhwLnRvU3RyaW5nKCkpKTtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdwb2x5Z29ucycsIHBvbHlnb25zKTtcclxuICAgIC8vIHBvbHlnb25zLm1hcChwID0+IGNvbnNvbGUubG9nKHAudG9TdHJpbmcoKSkpO1xyXG4gICAgcmV0dXJuIHBvbHlnb25JbmRleGVzO1xyXG4gIH1cclxufSIsImltcG9ydCB7IFBvbHBsb3RSZW5kZXJlciB9IGZyb20gXCIuL2ludGVyZmFjZXMvcG9scGxvdC1yZW5kZXJlclwiO1xyXG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vbGluZVwiO1xyXG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSBcIi4vcG9seWdvblwiO1xyXG5pbXBvcnQgeyBTdXJ2ZXkgfSBmcm9tIFwiLi9zdXJ2ZXlcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbi8vIGxpbmVcclxuY29uc3QgZ1RlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbmdUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5nVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC40cHgnKTtcclxuXHJcbmNvbnN0IGxpbmVUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnbGluZScpO1xyXG5saW5lVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgJzEwLCA0LCAxLCA0Jyk7XHJcblxyXG5jb25zdCBhbmNob3JUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5hbmNob3JUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoXHJcbiAgJ2QnLFxyXG4gICdNIDAsIDAgJyArXHJcbiAgJ0EgMTAsIDEwLCAwLCAwLCAwLCAtNSwgLTUgJyArXHJcbiAgJ0EgMTAsIDEwLCAwLCAxLCAxLCA1LCAtNSAnICtcclxuICAnQSAxMCwgMTAsIDAsIDAsIDAsIDAsIDAnXHJcbik7XHJcbmFuY2hvclRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICd3aGl0ZScpO1xyXG5cclxuY29uc3QgdGV4dFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbnRleHRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnY2VudHJhbCcpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LWZhbWlseScsICdjb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgY291cmllciwgbW9ub3NwYWNlJyk7XHJcbnRleHRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgJzEwMCcpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTRweCcpO1xyXG5cclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKGxpbmVUZW1wbGF0ZSk7XHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChhbmNob3JUZW1wbGF0ZSk7XHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChhbmNob3JUZW1wbGF0ZS5jbG9uZU5vZGUoKSk7XHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZCh0ZXh0VGVtcGxhdGUpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQodGV4dFRlbXBsYXRlLmNsb25lTm9kZSgpKTtcclxuXHJcbi8vIHBvaW50XHJcbmNvbnN0IGdQb2ludFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbmdQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XHJcbmdQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XHJcblxyXG5jb25zdCBwb2ludFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdjaXJjbGUnKTtcclxucG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnZ3JlZW4nKTtcclxucG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3InLCAnMycpO1xyXG5cclxuY29uc3QgdGV4dFBvaW50VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3RleHQnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCAndHJhbnNsYXRlKDAsIDEwKScpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3RleHQtYW5jaG9yJywgJ21pZGRsZScpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2FsaWdubWVudC1iYXNlbGluZScsICdoYW5naW5nJyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCAnY29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIGNvdXJpZXIsIG1vbm9zcGFjZScpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtd2VpZ2h0JywgJzEwMCcpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc2l6ZScsICcxNHB4Jyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1zdHlsZScsICdpdGFsaWMnKTtcclxuXHJcbmdQb2ludFRlbXBsYXRlLmFwcGVuZENoaWxkKHBvaW50VGVtcGxhdGUpO1xyXG5nUG9pbnRUZW1wbGF0ZS5hcHBlbmRDaGlsZCh0ZXh0UG9pbnRUZW1wbGF0ZSk7XHJcblxyXG4vLyBwb2x5Z29uXHJcbmNvbnN0IHBvbHlnb25UZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwLjcnKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuOHB4Jyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS1kYXNoYXJyYXknLCAnNSwgMicpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcclxuXHJcbi8vIHN1cnZleVxyXG5jb25zdCBnU3VydmV5VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuZ1N1cnZleVRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgzMDAsIDEwMCknKTtcclxuXHJcbmNvbnN0IHN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5zdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3VybCgjZWFydGgtaGF0Y2gpJyk7XHJcbnN1cnZleUJvdHRvbVBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwJyk7XHJcblxyXG5jb25zdCBzdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuc3VydmV5VG9wUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbC1vcGFjaXR5JywgJzAnKTtcclxuc3VydmV5VG9wUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XHJcbnN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjhweCcpO1xyXG5cclxuY29uc3Qgc3VydmV5TGl0aG9sb2d5VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuXHJcbmdTdXJ2ZXlUZW1wbGF0ZS5hcHBlbmRDaGlsZChzdXJ2ZXlMaXRob2xvZ3lUZW1wbGF0ZSk7XHJcbmdTdXJ2ZXlUZW1wbGF0ZS5hcHBlbmRDaGlsZChzdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUpO1xyXG5nU3VydmV5VGVtcGxhdGUuYXBwZW5kQ2hpbGQoc3VydmV5VG9wUG9seWdvblRlbXBsYXRlKTtcclxuXHJcbi8vIGxpdGhvbG9naWNhbExheWVyXHJcbmNvbnN0IGxpdGhvbG9naWNhbExheWVyUmVjdFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdyZWN0Jyk7XHJcblxyXG4vLyBlYXJ0aEhhdGNoXHJcbmNvbnN0IGhhdGNoUGF0dGVybiA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0dGVybicpO1xyXG5oYXRjaFBhdHRlcm4uaWQgPSAnZWFydGgtaGF0Y2gnO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCdwYXR0ZXJuVW5pdHMnLCAndXNlclNwYWNlT25Vc2UnKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnd2lkdGgnLCAnMjUnKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnaGVpZ2h0JywgJzI1Jyk7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICcjMjIyZDMyJyk7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjRweCcpO1xyXG5cclxubGV0IGhhdGNoUGF0aCA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncGF0aCcpO1xyXG5jb25zdCBoYXRjaERzID0gW1xyXG4gICdNLTEsMSBsMiwtMicsXHJcbiAgJ00tMSw5IGwxMCwtMTAnLFxyXG5cclxuICAnTS0xLDE4IGw0LC00JyxcclxuICAnTS0xLDI2IGw4LC04JyxcclxuICAvLyAnTTYsMjYgbDQsLTQnLFxyXG4gICdNNywyNiBsNCwtNCcsXHJcblxyXG4gIC8vICdNMTUsMjYgbDEwLC0xMCcsXHJcbiAgJ00xNiwyNiBsMTAsLTEwJyxcclxuICAvLyAnTTIzLDI2IGwyLC0yJyxcclxuICAnTTI0LDI2IGwyLC0yJyxcclxuXHJcbiAgJ00xNCwzIGw0LC00JyxcclxuICAnTTE4LDcgbDgsLTgnLFxyXG4gICdNMjIsMTEgbDQsLTQnLFxyXG5cclxuICAnTTIsMTEgbDEzLDEzJyxcclxuICAnTTYsNyBsMTMsMTMnLFxyXG4gICdNMTAsMyBsMTMsMTMnLFxyXG5dO1xyXG5mb3IgKGNvbnN0IGQgb2YgaGF0Y2hEcykge1xyXG4gIGhhdGNoUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcclxuICBoYXRjaFBhdHRlcm4uYXBwZW5kQ2hpbGQoaGF0Y2hQYXRoKTtcclxuICBoYXRjaFBhdGggPSBoYXRjaFBhdGguY2xvbmVOb2RlKCkgYXMgU1ZHUGF0aEVsZW1lbnRcclxufVxyXG5cclxuLy8gdHlwZSBzZWxlY3RcclxuY29uc3Qgc2VsZWN0VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdzZWxlY3QnKTtcclxuc2VsZWN0VGVtcGxhdGUuc3R5bGUucG9zaXRpb24gPSAnYWJzb2x1dGUnO1xyXG5zZWxlY3RUZW1wbGF0ZS5zdHlsZS50cmFuc2Zvcm0gPSAndHJhbnNsYXRlWSgtNDklKSc7XHJcbnNlbGVjdFRlbXBsYXRlLnN0eWxlLmxlZnQgPSAnMjRweCc7XHJcbmxldCBvcHRpb25UZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ29wdGlvbicpO1xyXG5jb25zdCB2YWx1ZXMgPSBbXHJcbiAgJ25vbiBpZGVudGlmacOpJyxcclxuICAnYXJnaWxlJyxcclxuICAnY2FsY2FpcmUnXHJcbl07XHJcbmNvbnN0IGNvbG9ycyA9IG5ldyBNYXAoW1xyXG4gIFt2YWx1ZXNbMF0sICcjZmRlMzEyJ10sXHJcbiAgW3ZhbHVlc1sxXSwgJyMyODlmZGUnXSxcclxuICBbdmFsdWVzWzJdLCAnI2FiZmUxMiddXHJcbl0pO1xyXG5cclxuZm9yIChjb25zdCB2YWx1ZSBvZiB2YWx1ZXMpIHtcclxuICBvcHRpb25UZW1wbGF0ZS5pbm5lckhUTUwgPSB2YWx1ZTtcclxuICBvcHRpb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3ZhbHVlJywgdmFsdWUpO1xyXG4gIHNlbGVjdFRlbXBsYXRlLmFwcGVuZENoaWxkKG9wdGlvblRlbXBsYXRlKTtcclxuICBvcHRpb25UZW1wbGF0ZSA9IG9wdGlvblRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIEhUTUxPcHRpb25FbGVtZW50O1xyXG59XHJcblxyXG4vLyBxdWFudGl0eVxyXG5jb25zdCBwVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdwJyk7XHJcbnBUZW1wbGF0ZS5zdHlsZS5ib3JkZXJMZWZ0V2lkdGggPSAnMTRweCc7XHJcbnBUZW1wbGF0ZS5zdHlsZS5mb250RmFtaWx5ID0gJ2NvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBjb3VyaWVyLCBtb25vc3BhY2UnO1xyXG5wVGVtcGxhdGUuc3R5bGUuZm9udFdlaWdodCA9ICcxMDAnO1xyXG5wVGVtcGxhdGUuc3R5bGUuZm9udFNpemUgPSAnMTRweCc7XHJcbnBUZW1wbGF0ZS5zdHlsZS5oZWlnaHQgPSAnMTRweCc7XHJcbnBUZW1wbGF0ZS5zdHlsZS5wYWRkaW5nTGVmdCA9ICc4cHgnO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN2Z1JlbmRlcmVyIGltcGxlbWVudHMgUG9scGxvdFJlbmRlcmVyIHtcclxuICBwcml2YXRlIHN2ZzogU1ZHRWxlbWVudDtcclxuICBwcml2YXRlIHNpZGViYXJEaXY6IEhUTUxEaXZFbGVtZW50O1xyXG4gIHByaXZhdGUgc2lkZWJhclN2ZzogU1ZHRWxlbWVudDtcclxuICBwcml2YXRlIHNlbGVjdENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnQoJ2RpdicpO1xyXG4gIHByaXZhdGUgcG9pbnRDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuICBwcml2YXRlIHBvbHlnb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuICBwcml2YXRlIGxpbmVDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuICBwcml2YXRlIHN1cnZleUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgcXVhbnRpdGllc0NvbnRhaW5lcjogSFRNTERpdkVsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBzdmdHQnlMaW5lID0gbmV3IE1hcDxMaW5lLCBTVkdHRWxlbWVudD4oKTtcclxuICBwcml2YXRlIHN2Z1BhdGhCeVBvbHlnb24gPSBuZXcgTWFwPFBvbHlnb24sIFNWR1BhdGhFbGVtZW50PigpO1xyXG4gIHByaXZhdGUgc3ZnR0J5UG9pbnQgPSBuZXcgTWFwPFZlY3RvcjIsIFNWR0dFbGVtZW50PigpO1xyXG4gIHByaXZhdGUgaGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZD4gPSB7fTtcclxuICBwdWJsaWMgbGl0aG9DaGFuZ2VIYW5kbGVyOiAoKSA9PiB2b2lkO1xyXG4gIGNvbnN0cnVjdG9yKCkge1xyXG4gICAgdGhpcy5zdmcgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuY29udGVudCcpO1xyXG4gICAgdGhpcy5zaWRlYmFyRGl2ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXInKTtcclxuICAgIHRoaXMuc2lkZWJhclN2ZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5zaWRlYmFyID4gc3ZnJyk7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZChoYXRjaFBhdHRlcm4pO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5wb2x5Z29uQ29udGFpbmVyKTtcclxuICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMubGluZUNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnBvaW50Q29udGFpbmVyKTtcclxuICAgIHRoaXMucXVhbnRpdGllc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5xdWFudGl0aWVzLmNvbnRhaW5lcicpO1xyXG4gICAgdGhpcy5zaWRlYmFyU3ZnLmFwcGVuZENoaWxkKHRoaXMuc3VydmV5Q29udGFpbmVyKTtcclxuICAgIHRoaXMuc2lkZWJhckRpdi5hcHBlbmRDaGlsZCh0aGlzLnNlbGVjdENvbnRhaW5lcik7XHJcbiAgfVxyXG4gIHByaXZhdGUgX3NldEV2ZW50SGFuZGxlcihzdmc6IFNWR0VsZW1lbnQsIGV2ZW50OiBzdHJpbmcsIGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgaWYgKHRoaXMuaGFuZGxlcnNbZXZlbnRdKSB7XHJcbiAgICAgIHN2Zy5yZW1vdmVFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmhhbmRsZXJzW2V2ZW50XSk7XHJcbiAgICB9XHJcbiAgICB0aGlzLmhhbmRsZXJzW2V2ZW50XSA9IGhhbmRsZXI7XHJcbiAgICBzdmcuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5oYW5kbGVyc1tldmVudF0pO1xyXG4gIH1cclxuICBzZXRNb3VzZURvd25IYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc3ZnLCAnbW91c2Vkb3duJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIHNldE1vdXNlVXBIYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc3ZnLCAnbW91c2V1cCcsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBzZXRNb3VzZU1vdmVIYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc3ZnLCAnbW91c2Vtb3ZlJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIHNldFNpZGViYXJNb3VzZURvd25IYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc2lkZWJhclN2ZywgJ21vdXNlZG93bicsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBzZXRTaWRlYmFyTW91c2VVcEhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zaWRlYmFyU3ZnLCAnbW91c2V1cCcsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBzZXRTaWRlYmFyTW91c2VNb3ZlSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnNpZGViYXJTdmcsICdtb3VzZW1vdmUnLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgZHJhd0xpbmUobGluZTogTGluZSwgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBsZXQgc3ZnRzogU1ZHR0VsZW1lbnQ7XHJcbiAgICBpZiAoIXRoaXMuc3ZnR0J5TGluZS5oYXMobGluZSkpIHtcclxuICAgICAgc3ZnRyA9IGdUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHR0VsZW1lbnQ7XHJcbiAgICAgIHRoaXMubGluZUNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdHKTtcclxuICAgICAgdGhpcy5zdmdHQnlMaW5lLnNldChsaW5lLCBzdmdHKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN2Z0cgPSB0aGlzLnN2Z0dCeUxpbmUuZ2V0KGxpbmUpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3ZnTGluZSA9IHN2Z0cuY2hpbGRyZW5bMF0gYXMgU1ZHTGluZUVsZW1lbnQ7XHJcbiAgICBjb25zdCBzdmdQYXRoQW5jaG9yU3RhcnQgPSBzdmdHLmNoaWxkcmVuWzFdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnUGF0aEFuY2hvckVuZCA9IHN2Z0cuY2hpbGRyZW5bMl0gYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBjb25zdCBzdmdUZXh0U3RhcnQgPSBzdmdHLmNoaWxkcmVuWzNdIGFzIFNWR1RleHRFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnVGV4dEVuZCA9IHN2Z0cuY2hpbGRyZW5bNF0gYXMgU1ZHVGV4dEVsZW1lbnQ7XHJcbiAgICBjb25zdCB4MSA9IGxpbmUueDEudG9GaXhlZCgpO1xyXG4gICAgY29uc3QgeTEgPSBsaW5lLnkxLnRvRml4ZWQoKTtcclxuICAgIGNvbnN0IHgyID0gbGluZS54Mi50b0ZpeGVkKCk7XHJcbiAgICBjb25zdCB5MiA9IGxpbmUueTIudG9GaXhlZCgpO1xyXG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3gxJywgeDEpO1xyXG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3kxJywgeTEpO1xyXG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3gyJywgeDIpO1xyXG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3kyJywgeTIpO1xyXG4gICAgc3ZnVGV4dFN0YXJ0LmlubmVySFRNTCA9IG5hbWU7XHJcbiAgICBzdmdUZXh0RW5kLmlubmVySFRNTCA9IG5hbWU7XHJcbiAgICBjb25zdCBhbmdsZSA9IDE4MCAqIChsaW5lLnYyLnN1YihsaW5lLnYxKS5hbmdsZSgpIC0gTWF0aC5QSSAvIDIpIC8gTWF0aC5QSTtcclxuICAgIGNvbnN0IGJlZm9yZSA9IGxpbmUuYmVmb3JlKDE0KTtcclxuICAgIGNvbnN0IGFmdGVyID0gbGluZS5hZnRlcigxNCk7XHJcbiAgICBzdmdQYXRoQW5jaG9yU3RhcnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7eDF9LCAke3kxfSkgcm90YXRlKCR7aXNOYU4oYW5nbGUpID8gMCA6IGFuZ2xlfSlgKTtcclxuICAgIHN2Z1BhdGhBbmNob3JFbmQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7eDJ9LCAke3kyfSkgcm90YXRlKCR7aXNOYU4oYW5nbGUpID8gMCA6IDE4MCArIGFuZ2xlfSlgKTtcclxuICAgIHN2Z1RleHRTdGFydC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtpc05hTihiZWZvcmUueCkgPyB4MSA6IGJlZm9yZS54LnRvRml4ZWQoKX0sICR7aXNOYU4oYmVmb3JlLnkpID8geTEgOiBiZWZvcmUueS50b0ZpeGVkKCl9KWApO1xyXG4gICAgc3ZnVGV4dEVuZC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtpc05hTihhZnRlci54KSA/IHgyIDogYWZ0ZXIueC50b0ZpeGVkKCl9LCAke2lzTmFOKGFmdGVyLnkpID8geTIgOiBhZnRlci55LnRvRml4ZWQoKX0pYCk7XHJcbiAgfVxyXG4gIGVyYXNlTGluZShsaW5lOiBMaW5lKTogdm9pZCB7XHJcbiAgICBjb25zdCBzdmdHID0gdGhpcy5zdmdHQnlMaW5lLmdldChsaW5lKTtcclxuICAgIGlmIChzdmdHKSB7XHJcbiAgICAgIHRoaXMubGluZUNvbnRhaW5lci5yZW1vdmVDaGlsZChzdmdHKTtcclxuICAgICAgdGhpcy5zdmdHQnlMaW5lLmRlbGV0ZShsaW5lKTtcclxuICAgIH1cclxuICB9XHJcbiAgZHJhd1BvaW50KHBvaW50OiBWZWN0b3IyLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGxldCBzdmdHOiBTVkdHRWxlbWVudDtcclxuICAgIGlmICghdGhpcy5zdmdHQnlQb2ludC5oYXMocG9pbnQpKSB7XHJcbiAgICAgIHN2Z0cgPSBnUG9pbnRUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHR0VsZW1lbnQ7XHJcbiAgICAgIHRoaXMucG9pbnRDb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnRyk7XHJcbiAgICAgIHRoaXMuc3ZnR0J5UG9pbnQuc2V0KHBvaW50LCBzdmdHKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN2Z0cgPSB0aGlzLnN2Z0dCeVBvaW50LmdldChwb2ludCk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdmdUZXh0ID0gc3ZnRy5jaGlsZHJlblsxXSBhcyBTVkdUZXh0RWxlbWVudDtcclxuICAgIHN2Z0cuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7cG9pbnQueC50b0ZpeGVkKCl9LCAke3BvaW50LnkudG9GaXhlZCgpfSlgKTtcclxuICAgIHN2Z1RleHQuaW5uZXJIVE1MID0gbmFtZTtcclxuICB9XHJcbiAgcHJpdmF0ZSBjbGVhckNvbnRhaW5lcihjb250YWluZXI6IEVsZW1lbnQpOiB2b2lkIHtcclxuICAgIHdoaWxlIChjb250YWluZXIuZmlyc3RDaGlsZCkge1xyXG4gICAgICBjb250YWluZXIucmVtb3ZlQ2hpbGQoY29udGFpbmVyLmZpcnN0Q2hpbGQpO1xyXG4gICAgfVxyXG4gIH1cclxuICBjbGVhckludGVyc2VjdGlvbnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMucG9pbnRDb250YWluZXIpO1xyXG4gIH1cclxuICBkcmF3UG9seWdvbihwb2x5Z29uOiBQb2x5Z29uLCBmaWxsID0gJyMnICsgKE1hdGguZmxvb3IoKDE2Nzc3MjE1IC0gMWU1KSAqIE1hdGgucmFuZG9tKCkpICsgMWU1KS50b1N0cmluZygxNikpOiB2b2lkIHtcclxuICAgIGxldCBzdmdQYXRoOiBTVkdQYXRoRWxlbWVudDtcclxuICAgIGlmICghdGhpcy5zdmdQYXRoQnlQb2x5Z29uLmhhcyhwb2x5Z29uKSkge1xyXG4gICAgICBzdmdQYXRoID0gcG9seWdvblRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgICB0aGlzLnBvbHlnb25Db250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnUGF0aCk7XHJcbiAgICAgIHRoaXMuc3ZnUGF0aEJ5UG9seWdvbi5zZXQocG9seWdvbiwgc3ZnUGF0aCk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdmdQYXRoID0gdGhpcy5zdmdQYXRoQnlQb2x5Z29uLmdldChwb2x5Z29uKTtcclxuICAgIH1cclxuICAgIHN2Z1BhdGguc2V0QXR0cmlidXRlKCdkJywgJ00gJyArIHBvbHlnb24udmVydGljZXMubWFwKHYgPT4gYCR7di54LnRvRml4ZWQoKX0gJHt2LnkudG9GaXhlZCgpfWApLmpvaW4oJyBMICcpICsgJyBaJyk7XHJcbiAgICBzdmdQYXRoLnNldEF0dHJpYnV0ZSgnZmlsbCcsIGZpbGwpO1xyXG4gIH1cclxuICBjbGVhclBvbHlnb25zKCk6IHZvaWQge1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnBvbHlnb25Db250YWluZXIpO1xyXG4gIH1cclxuXHJcbiAgZHJhd1N1cnZleShzdXJ2ZXk6IFN1cnZleSk6IHZvaWQge1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnN1cnZleUNvbnRhaW5lcik7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMuc2VsZWN0Q29udGFpbmVyKTtcclxuICAgIGNvbnN0IFdJRFRIID0gMjAwO1xyXG4gICAgY29uc3QgVEhJQ0tORVNTID0gMTA7XHJcbiAgICBjb25zdCBESUFNRVRFUiA9IDUwO1xyXG4gICAgY29uc3QgZCA9IGBNICR7KC1XSURUSCAvIDIpLnRvRml4ZWQoKX0sIDAgYCArXHJcbiAgICAgIGBoICR7KChXSURUSCAtIERJQU1FVEVSKSAvIDIpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGB2ICR7c3VydmV5LmRlcHRoKCkudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHtESUFNRVRFUi50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAkey1zdXJ2ZXkuZGVwdGgoKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAkeygoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9YDtcclxuICAgIGNvbnN0IGRCb3R0b20gPSBkICsgJyAnICtcclxuICAgICAgYHYgJHtUSElDS05FU1MudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoVEhJQ0tORVNTIC0gKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfSBgICtcclxuICAgICAgYHYgJHtzdXJ2ZXkuZGVwdGgoKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAkeygtKDIgKiBUSElDS05FU1MgKyBESUFNRVRFUikpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGB2ICR7LXN1cnZleS5kZXB0aCgpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGBoICR7KFRISUNLTkVTUyAtIChXSURUSCAtIERJQU1FVEVSKSAvIDIpLnRvRml4ZWQoKX0gWmA7XHJcblxyXG4gICAgY29uc3Qgc3ZnRyA9IGdTdXJ2ZXlUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSkgYXMgU1ZHR0VsZW1lbnQ7XHJcbiAgICBjb25zdCBsaXRob2xvZ3kgPSBzdmdHLmNoaWxkcmVuWzBdIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgY29uc3QgYm90dG9tUG9seWdvbiA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBjb25zdCB0b3BQb2x5Z29uID0gc3ZnRy5jaGlsZHJlblsyXSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgIGJvdHRvbVBvbHlnb24uc2V0QXR0cmlidXRlKCdkJywgZEJvdHRvbSk7XHJcbiAgICB0b3BQb2x5Z29uLnNldEF0dHJpYnV0ZSgnZCcsIGQpO1xyXG5cclxuICAgIGxldCB0b3AgPSAwO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBzdXJ2ZXkubGl0aG9sb2d5Lmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGNvbnN0IGxpdGhvbG9naWNhbExheWVyID0gbGl0aG9sb2dpY2FsTGF5ZXJSZWN0VGVtcGxhdGUuY2xvbmVOb2RlKCkgYXMgU1ZHUmVjdEVsZW1lbnQ7XHJcbiAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgneCcsICgtRElBTUVURVIgLyAyKS50b0ZpeGVkKCkpO1xyXG4gICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ3knLCB0b3AudG9GaXhlZCgpKTtcclxuICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCd3aWR0aCcsIERJQU1FVEVSLnRvRml4ZWQoKSk7XHJcbiAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgnaGVpZ2h0Jywgc3VydmV5LmxpdGhvbG9neVtpXS5kZXB0aC50b0ZpeGVkKCkpO1xyXG4gICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvcnMuZ2V0KHN1cnZleS5saXRob2xvZ3lbaV0udHlwZSkpO1xyXG4gICAgICBsaXRob2xvZ3kuYXBwZW5kQ2hpbGQobGl0aG9sb2dpY2FsTGF5ZXIpO1xyXG5cclxuICAgICAgY29uc3Qgc2VsZWN0ID0gc2VsZWN0VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIEhUTUxTZWxlY3RFbGVtZW50O1xyXG4gICAgICBzZWxlY3QucXVlcnlTZWxlY3Rvcihgb3B0aW9uW3ZhbHVlPVwiJHtzdXJ2ZXkubGl0aG9sb2d5W2ldLnR5cGV9XCJdYCkuc2V0QXR0cmlidXRlKCdzZWxlY3RlZCcsICdzZWxlY3RlZCcpO1xyXG4gICAgICBzZWxlY3QuYWRkRXZlbnRMaXN0ZW5lcignY2hhbmdlJywgZXZlbnQgPT4ge1xyXG4gICAgICAgIHN1cnZleS5saXRob2xvZ3lbaV0udHlwZSA9IHNlbGVjdC52YWx1ZTtcclxuICAgICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCBjb2xvcnMuZ2V0KHNlbGVjdC52YWx1ZSkpO1xyXG4gICAgICAgIHRoaXMubGl0aG9DaGFuZ2VIYW5kbGVyKCk7XHJcbiAgICAgIH0pO1xyXG4gICAgICBzZWxlY3Quc3R5bGUudG9wID0gKHRvcCArIDEwMCArIHN1cnZleS5saXRob2xvZ3lbaV0uZGVwdGggLyAyKS50b0ZpeGVkKCkgKyAncHgnO1xyXG5cclxuICAgICAgdGhpcy5zZWxlY3RDb250YWluZXIuYXBwZW5kQ2hpbGQoc2VsZWN0KTtcclxuXHJcbiAgICAgIHRvcCArPSBzdXJ2ZXkubGl0aG9sb2d5W2ldLmRlcHRoO1xyXG4gICAgfVxyXG5cclxuICAgIHRoaXMuc3VydmV5Q29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z0cpO1xyXG4gICAgdGhpcy5zaWRlYmFyRGl2LmNsYXNzTGlzdC5hZGQoJ3Zpc2libGUnKTtcclxuICB9XHJcbiAgY2xlYXJTdXJ2ZXkoKTogdm9pZCB7XHJcbiAgICB0aGlzLnNpZGViYXJEaXYuY2xhc3NMaXN0LnJlbW92ZSgndmlzaWJsZScpO1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnN1cnZleUNvbnRhaW5lcik7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMuc2VsZWN0Q29udGFpbmVyKTtcclxuICB9XHJcbiAgZHJhd1F1YW50aXRpZXMocXVhbnRpdGllczogTWFwPHN0cmluZywgbnVtYmVyPik6IHZvaWQge1xyXG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnF1YW50aXRpZXNDb250YWluZXIpO1xyXG4gICAgcXVhbnRpdGllcy5mb3JFYWNoKChxdWFudGl0eSwgdHlwZSkgPT4ge1xyXG4gICAgICBjb25zdCBwID0gcFRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICBwLmlubmVySFRNTCA9IGAke3R5cGV9ICgkeyhxdWFudGl0eSAvICgxMCAqIDEwICogNTApKS50b0ZpeGVkKDIpfSBtwrMpYDtcclxuICAgICAgcC5zdHlsZS5ib3JkZXJMZWZ0ID0gYDhweCBzb2xpZCAke2NvbG9ycy5nZXQodHlwZSl9YDtcclxuICAgICAgdGhpcy5xdWFudGl0aWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKHApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9scGxvdCB9IGZyb20gXCIuL3BvbHBsb3RcIjtcclxuaW1wb3J0IHsgU3ZnUmVuZGVyZXIgfSBmcm9tIFwiLi9zdmctcmVuZGVyZXJcIjtcclxuXHJcbmNvbnN0IHN2Z1JlbmRlcmVyID0gbmV3IFN2Z1JlbmRlcmVyKCk7XHJcbmNvbnN0IHBvbHBsb3QgPSBuZXcgUG9scGxvdChzdmdSZW5kZXJlcik7Il0sInNvdXJjZVJvb3QiOiIifQ==