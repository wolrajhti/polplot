(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var h=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/h,this.crossRaw(i-e,r-n,e-o,n-s)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(t,e){this.type=t,this.depth=e},i=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),r=function(){function t(t,e,n){this.coordinates=t,this.lithology=e,this.polygon=n}return t.prototype.depth=function(){return this.lithology.reduce((function(t,e){return t+e.depth}),0)},t.prototype.quantities=function(){var t=new Map;if(this.polygon){var e=this.polygon.area();this.lithology.forEach((function(n){var i=t.get(n.type)||0;t.set(n.type,i+Math.round(e*n.depth))}))}return t},t}(),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},s=function(){function s(n){var r=this;this.renderer=n,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.quantities=new Map,this.mode=1,document.addEventListener("keyup",(function(t){"s"===t.key?r.mode=2:"l"===t.key?(r.mode=1,r.renderer.clearSurvey()):"Escape"===t.key&&r.renderer.clearSurvey()}));var o,s,a,u,h=-1,l=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);1===r.mode?-1===(h=r.nearestLineIndexFrom(i,20))?(r.addLine(new e(i.x,i.y,i.x,i.y)),h=r.lines.length-1,o=r.lines[h].v2):i.sub(r.lines[h].v1).len()<20?o=r.lines[h].v1:i.sub(r.lines[h].v2).len()<20&&(o=r.lines[h].v2):2===r.mode&&-1===(l=r.nearestSurveyIndexFrom(i,20))&&(r.addSurvey(i),l=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===r.mode?(h=-1,o=null):2===r.mode&&(-1!==l?(s=r.surveys[l],r.renderer.drawSurvey(s)):s=null,l=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button){1===r.mode?o?(o.x+=e.movementX,o.y+=e.movementY,r.updateIntersectionTimes(r.lines[h]),r.renderer.drawLine(r.lines[h],h.toString())):-1!==h&&(r.lines[h].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(r.lines[h]),r.renderer.drawLine(r.lines[h],h.toString())):2===r.mode&&-1!==l&&(r.surveys[l].coordinates.x+=e.movementX,r.surveys[l].coordinates.y+=e.movementY,r.updateSurvey(r.surveys[l]));for(var n=new t(e.clientX,e.clientY),i=!1,s=a,u=0,d=r.polygons;u<d.length;u++){var c=d[u];if(c.contains(n)){c!==a&&(r.renderer.drawPolygon(c,"red"),a=c),i=!0;break}}i||(a=null),s&&s!==a&&r.renderer.drawPolygon(s,"white")}})),this.renderer.setSidebarMouseDownHandler((function(e){if(!e.button&&s)for(var n=new t(e.offsetX,e.offsetY),r=new t(300,100),o=0,a=s.lithology;o<a.length;o++){var h=a[o],l=new i([r.add(new t(-25,0)),r.add(new t(25,0)),r.add(new t(25,h.depth)),r.add(new t(-25,h.depth))]);if(r.y+=h.depth,l.contains(n)){u=h;break}}})),this.renderer.setSidebarMouseUpHandler((function(t){t.button||(u=null)})),this.renderer.setSidebarMouseMoveHandler((function(t){t.button||u&&(u.depth+=t.movementY,r.renderer.drawSurvey(s),r.updateQuantities())})),this.renderer.lithoChangeHandler=function(){r.updateQuantities()}}return s.prototype.nearestLineIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.lines.length;o++)(n=this.lines[o].nearestTo(t).sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].coordinates.sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.addSurvey=function(t){for(var e,i=0,o=this.polygons;i<o.length;i++){var s=o[i];if(s.contains(t)){e=s;break}}var a=new r(t,[new n("non identifié",50),new n("non identifié",50),new n("non identifié",50)],e);this.surveys.push(a),this.renderer.drawPoint(t,e?(e.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateSurvey=function(t){t.polygon=null;for(var e=0,n=this.polygons;e<n.length;e++){var i=n[e];if(i.contains(t.coordinates)){t.polygon=i;break}}this.renderer.drawPoint(t.coordinates,t.polygon?(t.polygon.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateQuantities=function(){var t=this;this.quantities.clear(),this.surveys.forEach((function(e){e.quantities().forEach((function(e,n){console.log(e,n),t.quantities.set(n,(t.quantities.get(n)||0)+e)}))})),this.renderer.drawQuantities(this.quantities)},s.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,(this.lines.length-1).toString())},s.prototype.addIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=[],a=[],u=0;u<e.length;u++)o=e[u].intersectionTimesWith(t),n[u].push(o.x),i.push(e[u].pointAt(o.x)),r[u].push(i.length-1),s.push(o.y),a.push(i.length-1);s.push(NaN),a.push(null),n.push(s),r.push(a),this.renderIntersections()},s.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=e.indexOf(t),a=0;a<e.length;a++)a!==s&&(o=e[a].intersectionTimesWith(t),n[a][s]=o.x,n[s][a]=o.y,a<s?i[r[a][s]]=e[a].pointAt(o.x):i[r[s][a]]=e[a].pointAt(o.x));this.renderIntersections()},s.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new i(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},s.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},s.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},s.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},s.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},s.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],o=function(e){for(var o=0;o<i[e].length;o++){var a=i[e][o];if(e<a){var u=n[e][i[e][o]],h=o-1,l=o+1,d=i[a].findIndex((function(t){return t===e})),c=s.testSide(t[e].v1,t[e].v2,t[a].v1),p=c?d-1:d+1,v=c?d+1:d-1,y=0<o?n[e][i[e][h]]:null,f=o<i[e].length-1?n[e][i[e][l]]:null,g=-1<p&&p<i[a].length?n[a][i[a][p]]:null,w=-1<v&&v<i[a].length?n[a][i[a][v]]:null,m=s.buildPartialsFromIntersectionIndexes(u,[y,w,f,g]);r.push.apply(r,m)}}},s=this,a=0;a<i.length;a++)o(a);return r},s.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],r=0;r<t.length;){for(var s=0;s<t.length;s++)if(r!==s&&this.partialsOverlaps(t[r],t[s])){(e=t[r]).splice.apply(e,o([-2,2],t[s])),t.splice(s,1),s<r&&r--,(n=this.partialsOverlaps(t[r],t[r])||this.partialsMeet(t[r],t[r]))>0&&(t[r].splice(0,n),i.push(t[r]),t.splice(r,1)),r=-1;break}r++}return i},s}(),a=document.createElementNS("http://www.w3.org/2000/svg","g");a.setAttribute("stroke","black"),a.setAttribute("stroke-width","0.4px");var u=document.createElementNS("http://www.w3.org/2000/svg","line");u.setAttribute("stroke-dasharray","10, 4, 1, 4");var h=document.createElementNS("http://www.w3.org/2000/svg","path");h.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),h.setAttribute("fill","white");var l=document.createElementNS("http://www.w3.org/2000/svg","text");l.setAttribute("text-anchor","middle"),l.setAttribute("alignment-baseline","central"),l.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),l.setAttribute("font-weight","100"),l.setAttribute("font-size","14px"),a.appendChild(u),a.appendChild(h),a.appendChild(h.cloneNode()),a.appendChild(l),a.appendChild(l.cloneNode());var d=document.createElementNS("http://www.w3.org/2000/svg","g");d.setAttribute("stroke","black"),d.setAttribute("stroke-width","0.4px");var c=document.createElementNS("http://www.w3.org/2000/svg","circle");c.setAttribute("fill","green"),c.setAttribute("r","3");var p=document.createElementNS("http://www.w3.org/2000/svg","text");p.setAttribute("transform","translate(0, 10)"),p.setAttribute("text-anchor","middle"),p.setAttribute("alignment-baseline","hanging"),p.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),p.setAttribute("font-weight","100"),p.setAttribute("font-size","14px"),p.setAttribute("font-style","italic"),d.appendChild(c),d.appendChild(p);var v=document.createElementNS("http://www.w3.org/2000/svg","path");v.setAttribute("fill","green"),v.setAttribute("fill-opacity","0.7"),v.setAttribute("stroke-width","0.8px"),v.setAttribute("stroke-dasharray","5, 2"),v.setAttribute("stroke","black");var y=document.createElementNS("http://www.w3.org/2000/svg","g");y.setAttribute("transform","translate(300, 100)");var f=document.createElementNS("http://www.w3.org/2000/svg","path");f.setAttribute("fill","url(#earth-hatch)"),f.setAttribute("stroke-width","0");var g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("fill-opacity","0"),g.setAttribute("stroke","black"),g.setAttribute("stroke-width","0.8px");var w=document.createElementNS("http://www.w3.org/2000/svg","g");y.appendChild(w),y.appendChild(f),y.appendChild(g);var m=document.createElementNS("http://www.w3.org/2000/svg","rect"),b=document.createElementNS("http://www.w3.org/2000/svg","pattern");b.id="earth-hatch",b.setAttribute("patternUnits","userSpaceOnUse"),b.setAttribute("width","25"),b.setAttribute("height","25"),b.setAttribute("stroke","#222d32"),b.setAttribute("stroke-width","0.4px");for(var x=document.createElementNS("http://www.w3.org/2000/svg","path"),A=0,C=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];A<C.length;A++){var M=C[A];x.setAttribute("d",M),b.appendChild(x),x=x.cloneNode()}var S=document.createElement("select");S.style.position="absolute",S.style.transform="translateY(-49%)",S.style.left="24px";for(var N=document.createElement("option"),F=["non identifié","argile","calcaire"],E=new Map([[F[0],"#fde312"],[F[1],"#289fde"],[F[2],"#abfe12"]]),P=0,L=F;P<L.length;P++){var I=L[P];N.innerHTML=I,N.setAttribute("value",I),S.appendChild(N),N=N.cloneNode()}var R=document.createElement("p");R.style.borderLeftWidth="14px",R.style.fontFamily='consolas, "Liberation Mono", courier, monospace',R.style.fontWeight="100",R.style.fontSize="14px",R.style.height="14px",R.style.paddingLeft="8px",new s(new(function(){function t(){this.selectContainer=document.createElement("div"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svg=document.querySelector(".content"),this.sidebarDiv=document.querySelector(".sidebar"),this.sidebarSvg=document.querySelector(".sidebar > svg"),this.svg.appendChild(b),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.quantitiesContainer=document.querySelector(".quantities.container"),this.sidebarSvg.appendChild(this.surveyContainer),this.sidebarDiv.appendChild(this.selectContainer)}return t.prototype._setEventHandler=function(t,e,n){this.handlers[e]&&t.removeEventListener(e,this.handlers[e]),this.handlers[e]=n,t.addEventListener(e,this.handlers[e])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler(this.svg,"mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler(this.svg,"mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler(this.svg,"mousemove",t)},t.prototype.setSidebarMouseDownHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousedown",t)},t.prototype.setSidebarMouseUpHandler=function(t){this._setEventHandler(this.sidebarSvg,"mouseup",t)},t.prototype.setSidebarMouseMoveHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=a.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],s=n.children[3],u=n.children[4],h=t.x1.toFixed(),l=t.y1.toFixed(),d=t.x2.toFixed(),c=t.y2.toFixed();i.setAttribute("x1",h),i.setAttribute("y1",l),i.setAttribute("x2",d),i.setAttribute("y2",c),s.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+h+", "+l+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+d+", "+c+") rotate("+(isNaN(p)?0:180+p)+")"),s.setAttribute("transform","translate("+(isNaN(v.x)?h:v.x.toFixed())+", "+(isNaN(v.y)?l:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?d:y.x.toFixed())+", "+(isNaN(y.y)?c:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=d.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=v.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e=this;this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer);var n="M "+(-100).toFixed()+", 0 h "+75..toFixed()+" v "+t.depth().toFixed()+" h "+50..toFixed()+" v "+-t.depth().toFixed()+" h "+75..toFixed(),i=n+" v "+10..toFixed()+" h "+(-65).toFixed()+" v "+t.depth().toFixed()+" h "+(-70).toFixed()+" v "+-t.depth().toFixed()+" h "+(-65).toFixed()+" Z",r=y.cloneNode(!0),o=r.children[0],s=r.children[1],a=r.children[2];s.setAttribute("d",i),a.setAttribute("d",n);for(var u=0,h=function(n){var i=m.cloneNode();i.setAttribute("x",(-25).toFixed()),i.setAttribute("y",u.toFixed()),i.setAttribute("width",50..toFixed()),i.setAttribute("height",t.lithology[n].depth.toFixed()),i.setAttribute("fill",E.get(t.lithology[n].type)),o.appendChild(i);var r=S.cloneNode(!0);r.querySelector('option[value="'+t.lithology[n].type+'"]').setAttribute("selected","selected"),r.addEventListener("change",(function(o){t.lithology[n].type=r.value,i.setAttribute("fill",E.get(r.value)),e.lithoChangeHandler()})),r.style.top=(u+100+t.lithology[n].depth/2).toFixed()+"px",l.selectContainer.appendChild(r),u+=t.lithology[n].depth},l=this,d=0;d<t.lithology.length;d++)h(d);this.surveyContainer.appendChild(r),this.sidebarDiv.classList.add("visible")},t.prototype.clearSurvey=function(){this.sidebarDiv.classList.remove("visible"),this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer)},t.prototype.drawQuantities=function(t){var e=this;this.clearContainer(this.quantitiesContainer),t.forEach((function(t,n){var i=R.cloneNode();i.innerHTML=n+" ("+(t/5e3).toFixed(2)+" m³)",i.style.borderLeft="8px solid "+E.get(n),e.quantitiesContainer.appendChild(i)}))},t}()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,