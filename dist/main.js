(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.lenRaw=function(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,u,a){var c=this.crossRaw(i-e,r-n,u-o,a-s);return new t(this.crossRaw(u-o,a-s,e-o,n-s)/c,this.crossRaw(i-e,r-n,e-o,n-s)/c)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,u){var a=this.intersectionTimesRaw(t,e,n,i,r,o,s,u);if(a)return a.y=e+(i-e)*a.x,a.x=t+(n-t)*a.x,a},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.shareEdge=function(t,e){for(var n=this.vertices.length-1,i=0;i<this.vertices.length;i++){if(this.vertices[n].equals(t)&&this.vertices[i].equals(e))return!0;n=i}return!1},t.prototype.intersectionWith=function(t){},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,u=o.length;s<u;s++,r++)i[r]=o[s];return i},r=function(){function t(t){var n,i,r,o,s=this;this.renderer=t,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.renderer.setMouseDownHandler((function(t,r,o){i=o||null,(n=r||null)||(n=new e(t.clientX,t.clientY,t.clientX,t.clientY),i=n.v2,s.addLine(n))})),this.renderer.setMouseUpHandler((function(t,e,u){e?(r&&r!==e&&s.renderer.drawLine(r,e===o,!1),r=e,s.renderer.drawLine(r,e===o,!0)):r&&s.renderer.drawLine(r,e===o,!1),n=null,i=null})),this.renderer.setMouseMoveHandler((function(t,e,u){e?(o&&o!==e&&s.renderer.drawLine(o,!1,e===r),o=e,s.renderer.drawLine(o,!0,e===r)):o&&(s.renderer.drawLine(o,!1,e===r),o=null),n&&(i?(i.x=t.clientX,i.y=t.clientY):n.update(t.movementX,t.movementY,t.movementX,t.movementY),s.updateIntersectionTimes(n),s.renderer.drawLine(n,n===o,n===r))}))}return t.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,!1,!1)},t.prototype.addIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=[],u=[],a=0;a<e.length;a++)o=e[a].intersectionTimesWith(t),n[a].push(o.x),i.push(e[a].pointAt(o.x)),r[a].push(i.length-1),s.push(o.y),u.push(i.length-1);s.push(NaN),u.push(null),n.push(s),r.push(u),this.renderIntersections()},t.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=e.indexOf(t),u=0;u<e.length;u++)u!==s&&(o=e[u].intersectionTimesWith(t),n[u][s]=o.x,n[s][u]=o.y,u<s?i[r[u][s]]=e[u].pointAt(o.x):i[r[s][u]]=e[u].pointAt(o.x));this.renderIntersections()},t.prototype.renderIntersections=function(){var t=this;console.log("renderIntersections"),console.log(this.intersectionTimes),console.log(this.intersections),console.log(this.intersectionIndex),this.renderer.clearIntersections(),this.intersections.forEach((function(e){t.renderer.drawPoint(e)})),this.renderer.clearPolygons();var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new n(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&t.renderer.drawPolygon(e)}))},t.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},t.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]},t.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},t.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],o=function(e){for(var o=0;o<i[e].length;o++){var u=i[e][o];if(e<u){var a=n[e][i[e][o]],c=o-1,h=o+1,l=i[u].findIndex((function(t){return t===e})),p=s.testSide(t[e].v1,t[e].v2,t[u].v1),d=p?l-1:l+1,v=p?l+1:l-1,f=0<o?n[e][i[e][c]]:null,y=o<i[e].length-1?n[e][i[e][h]]:null,g=-1<d&&d<i[u].length?n[u][i[u][d]]:null,w=-1<v&&v<i[u].length?n[u][i[u][v]]:null,m=s.buildPartialsFromIntersectionIndexes(a,[f,w,y,g]);r.push.apply(r,m)}}},s=this,u=0;u<i.length;u++)o(u);return r},t.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n=[],r=0;r<t.length;){for(var o=0;o<t.length;o++)if(r!==o&&this.partialsOverlaps(t[r],t[o])){(e=t[r]).splice.apply(e,i([-2,2],t[o])),t.splice(o,1),o<r&&r--,this.partialsOverlaps(t[r],t[r])&&(t[r].splice(0,2),n.push(t[r]),t.splice(r,1)),r=-1;break}r++}return n},t}(),o=document.createElementNS("http://www.w3.org/2000/svg","g");o.setAttribute("stroke","black"),o.setAttribute("stroke-width","0.4px");var s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("stroke-dasharray","10, 4, 1, 4");var u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),u.setAttribute("fill","white"),o.appendChild(s),o.appendChild(u),o.appendChild(u.cloneNode());var a=document.createElementNS("http://www.w3.org/2000/svg","circle");a.setAttribute("fill","green"),a.setAttribute("r","3");var c=document.createElementNS("http://www.w3.org/2000/svg","path");c.setAttribute("fill","green"),c.setAttribute("fill-opacity","0.7"),c.setAttribute("stroke-width","3"),c.setAttribute("stroke","grey");var h=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.intersectionContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.lineBySvgG=new Map,this.svg.appendChild(this.intersectionContainer),this.svg.appendChild(this.polygonContainer)}return t.prototype.clickHandlerWrapper=function(t){var e=this;return function(n){var i=document.elementFromPoint(n.clientX,n.clientY),r=e.lineBySvgG.get(i.parentNode);i instanceof SVGPathElement&&i.parentNode!==e.polygonContainer?i.parentNode.children[1]===i?t(n,r,r.v1):t(n,r,r.v2):i instanceof SVGLineElement?t(n,r):t(n)}},t.prototype.setMouseDownHandler=function(t){this.onMouseDown&&this.svg.removeEventListener("mousedown",this.onMouseDown),this.onMouseDown=this.clickHandlerWrapper(t),this.svg.addEventListener("mousedown",this.onMouseDown)},t.prototype.setMouseUpHandler=function(t){this.onMouseUp&&this.svg.removeEventListener("mouseup",this.onMouseUp),this.onMouseUp=this.clickHandlerWrapper(t),this.svg.addEventListener("mouseup",this.onMouseUp)},t.prototype.setMouseMoveHandler=function(t){this.onMouseMove&&this.svg.removeEventListener("mousemove",this.onMouseMove),this.onMouseMove=this.clickHandlerWrapper(t),this.svg.addEventListener("mousemove",this.onMouseMove)},t.prototype.drawLine=function(t,e,n){var i;void 0===e&&(e=!1),void 0===n&&(n=!1),this.svgGByLine.has(t)?i=this.svgGByLine.get(t):(i=o.cloneNode(!0),this.svg.appendChild(i),this.svgGByLine.set(t,i),this.lineBySvgG.set(i,t));var r=i.children[0],s=i.children[1],u=i.children[2],a=t.x1.toFixed(),c=t.y1.toFixed(),h=t.x2.toFixed(),l=t.y2.toFixed();r.setAttribute("x1",a),r.setAttribute("y1",c),r.setAttribute("x2",h),r.setAttribute("y2",l),e?i.setAttribute("stroke-width","0.8px"):i.setAttribute("stroke-width","0.4px"),n?i.setAttribute("stroke","#19a194"):i.setAttribute("stroke","black");var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI;s.setAttribute("transform","translate("+a+", "+c+") rotate("+(isNaN(p)?0:p)+")"),u.setAttribute("transform","translate("+h+", "+l+") rotate("+(isNaN(p)?0:180+p)+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.svg.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t){var e=a.cloneNode();e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.intersectionContainer.appendChild(e)},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.intersectionContainer)},t.prototype.drawPolygon=function(t){var e=c.cloneNode();e.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+"Z"),e.setAttribute("fill","#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.polygonContainer.appendChild(e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t}());new r(h),document.querySelector("body").appendChild(h.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,