(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var h=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/h,this.crossRaw(i-e,r-n,e-o,n-s)/h)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(t,e,n,i){this.coordinates=t,this.altimetry=e,this.depth=n,this.lithology=i},r=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},o=function(){function o(n){var r=this;this.renderer=n,this.lines=[],this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.mode=1,document.addEventListener("keyup",(function(t){"s"===t.key?r.mode=2:"l"===t.key&&(r.mode=1)}));var o,s,a=-1,u=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);1===r.mode?-1===(a=r.nearestLineIndexFrom(i,20))?(r.addLine(new e(i.x,i.y,i.x,i.y)),a=r.lines.length-1,o=r.lines[a].v2):i.sub(r.lines[a].v1).len()<20?o=r.lines[a].v1:i.sub(r.lines[a].v2).len()<20&&(o=r.lines[a].v2):2===r.mode&&-1===(u=r.nearestSurveyIndexFrom(i,20))&&(r.addSurvey(i),u=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===r.mode?(a=-1,o=null):2===r.mode&&(r.renderer.clearSurvey(),-1!==u&&r.renderer.drawSurvey(new i(r.surveys[u],0,400*Math.random(),[])),u=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button){1===r.mode?o?(o.x+=e.movementX,o.y+=e.movementY,r.updateIntersectionTimes(r.lines[a]),r.renderer.drawLine(r.lines[a],a.toString())):-1!==a&&(r.lines[a].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(r.lines[a]),r.renderer.drawLine(r.lines[a],a.toString())):2===r.mode&&-1!==u&&(r.surveys[u].x+=e.movementX,r.surveys[u].y+=e.movementY,r.updateSurvey(r.surveys[u]));for(var n=new t(e.clientX,e.clientY),i=!1,h=s,l=0,d=r.polygons;l<d.length;l++){var c=d[l];if(c.contains(n)){c!==s&&(r.renderer.drawPolygon(c,"red"),s=c),i=!0;break}}i||(s=null),h&&h!==s&&r.renderer.drawPolygon(h,"white")}}))}return o.prototype.nearestLineIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.lines.length;o++)(n=this.lines[o].nearestTo(t).sub(t).len())<e&&n<r&&(r=n,i=o);return i},o.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].sub(t).len())<e&&n<r&&(r=n,i=o);return i},o.prototype.addSurvey=function(t){var e;this.surveys.push(t);for(var n=0,i=this.polygons;n<i.length;n++){var r=i[n];if(r.contains(t)){e=r;break}}this.renderer.drawPoint(t,e?e.area().toFixed()+" m2":"")},o.prototype.updateSurvey=function(t){for(var e,n=0,i=this.polygons;n<i.length;n++){var r=i[n];if(r.contains(t)){e=r;break}}this.renderer.drawPoint(t,e?e.area().toFixed()+" m2":"")},o.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,(this.lines.length-1).toString())},o.prototype.addIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=[],a=[],u=0;u<e.length;u++)o=e[u].intersectionTimesWith(t),n[u].push(o.x),i.push(e[u].pointAt(o.x)),r[u].push(i.length-1),s.push(o.y),a.push(i.length-1);s.push(NaN),a.push(null),n.push(s),r.push(a),this.renderIntersections()},o.prototype.updateIntersectionTimes=function(t,e,n,i,r){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersections),void 0===r&&(r=this.intersectionIndex);for(var o,s=e.indexOf(t),a=0;a<e.length;a++)a!==s&&(o=e[a].intersectionTimesWith(t),n[a][s]=o.x,n[s][a]=o.y,a<s?i[r[a][s]]=e[a].pointAt(o.x):i[r[s][a]]=e[a].pointAt(o.x));this.renderIntersections()},o.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new n(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},o.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},o.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},o.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},o.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},o.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var i=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))})),r=[],o=function(e){for(var o=0;o<i[e].length;o++){var a=i[e][o];if(e<a){var u=n[e][i[e][o]],h=o-1,l=o+1,d=i[a].findIndex((function(t){return t===e})),c=s.testSide(t[e].v1,t[e].v2,t[a].v1),p=c?d-1:d+1,v=c?d+1:d-1,y=0<o?n[e][i[e][h]]:null,f=o<i[e].length-1?n[e][i[e][l]]:null,g=-1<p&&p<i[a].length?n[a][i[a][p]]:null,w=-1<v&&v<i[a].length?n[a][i[a][v]]:null,m=s.buildPartialsFromIntersectionIndexes(u,[y,w,f,g]);r.push.apply(r,m)}}},s=this,a=0;a<i.length;a++)o(a);return r},o.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],o=0;o<t.length;){for(var s=0;s<t.length;s++)if(o!==s&&this.partialsOverlaps(t[o],t[s])){(e=t[o]).splice.apply(e,r([-2,2],t[s])),t.splice(s,1),s<o&&o--,(n=this.partialsOverlaps(t[o],t[o])||this.partialsMeet(t[o],t[o]))>0&&(t[o].splice(0,n),i.push(t[o]),t.splice(o,1)),o=-1;break}o++}return i},o}(),s=document.createElementNS("http://www.w3.org/2000/svg","g");s.setAttribute("stroke","black"),s.setAttribute("stroke-width","0.4px");var a=document.createElementNS("http://www.w3.org/2000/svg","line");a.setAttribute("stroke-dasharray","10, 4, 1, 4");var u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),u.setAttribute("fill","white");var h=document.createElementNS("http://www.w3.org/2000/svg","text");h.setAttribute("text-anchor","middle"),h.setAttribute("alignment-baseline","central"),h.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),h.setAttribute("font-weight","100"),h.setAttribute("font-size","14px"),s.appendChild(a),s.appendChild(u),s.appendChild(u.cloneNode()),s.appendChild(h),s.appendChild(h.cloneNode());var l=document.createElementNS("http://www.w3.org/2000/svg","g");l.setAttribute("stroke","black"),l.setAttribute("stroke-width","0.4px");var d=document.createElementNS("http://www.w3.org/2000/svg","circle");d.setAttribute("fill","green"),d.setAttribute("r","3");var c=document.createElementNS("http://www.w3.org/2000/svg","text");c.setAttribute("transform","translate(0, 10)"),c.setAttribute("text-anchor","middle"),c.setAttribute("alignment-baseline","hanging"),c.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),c.setAttribute("font-weight","100"),c.setAttribute("font-size","14px"),c.setAttribute("font-style","italic"),l.appendChild(d),l.appendChild(c);var p=document.createElementNS("http://www.w3.org/2000/svg","path");p.setAttribute("fill","green"),p.setAttribute("fill-opacity","0.7"),p.setAttribute("stroke-width","0.8"),p.setAttribute("stroke","black");var v=document.createElementNS("http://www.w3.org/2000/svg","g");v.setAttribute("transform","translate(600, 300)");var y=document.createElementNS("http://www.w3.org/2000/svg","path");y.setAttribute("fill","url(#earth-hatch)"),y.setAttribute("stroke-width","0");var f=document.createElementNS("http://www.w3.org/2000/svg","path");f.setAttribute("fill-opacity","0"),f.setAttribute("stroke","black"),f.setAttribute("stroke-width","0.8px"),v.appendChild(y),v.appendChild(f);var g=document.createElementNS("http://www.w3.org/2000/svg","pattern");g.id="earth-hatch",g.setAttribute("patternUnits","userSpaceOnUse"),g.setAttribute("width","25"),g.setAttribute("height","25"),g.setAttribute("stroke","#222d32"),g.setAttribute("stroke-width","0.4px");for(var w=document.createElementNS("http://www.w3.org/2000/svg","path"),m=0,x=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];m<x.length;m++){var b=x[m];w.setAttribute("d",b),g.appendChild(w),w=w.cloneNode()}var A=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svg.appendChild(g),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.svg.appendChild(this.surveyContainer)}return t.prototype._setEventHandler=function(t,e){this.handlers[t]&&this.svg.removeEventListener(t,this.handlers[t]),this.handlers[t]=e,this.svg.addEventListener(t,this.handlers[t])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler("mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler("mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler("mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=s.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],a=n.children[3],u=n.children[4],h=t.x1.toFixed(),l=t.y1.toFixed(),d=t.x2.toFixed(),c=t.y2.toFixed();i.setAttribute("x1",h),i.setAttribute("y1",l),i.setAttribute("x2",d),i.setAttribute("y2",c),a.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+h+", "+l+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+d+", "+c+") rotate("+(isNaN(p)?0:180+p)+")"),a.setAttribute("transform","translate("+(isNaN(v.x)?h:v.x.toFixed())+", "+(isNaN(v.y)?l:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?d:y.x.toFixed())+", "+(isNaN(y.y)?c:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=l.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=p.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e="M "+(-100).toFixed()+", 0 h "+75..toFixed()+" v "+t.depth.toFixed()+" h "+50..toFixed()+" v "+-t.depth.toFixed()+" h "+75..toFixed(),n=e+" v "+10..toFixed()+" h "+(-65).toFixed()+" v "+t.depth.toFixed()+" h "+(-70).toFixed()+" v "+-t.depth.toFixed()+" h "+(-65).toFixed()+" Z",i=v.cloneNode(!0),r=i.children[0],o=i.children[1];r.setAttribute("d",n),o.setAttribute("d",e),this.surveyContainer.appendChild(i)},t.prototype.clearSurvey=function(){this.clearContainer(this.surveyContainer)},t}());new o(A),document.querySelector("body").appendChild(A.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9saW5lLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvcG9seWdvbi50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3N1cnZleS50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3BvbHBsb3QudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9zdmctcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ4IiwieSIsImRvdFJhdyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG90IiwidSIsInYiLCJ0aGlzIiwib3RoZXIiLCJWZWN0b3IyIiwiY3Jvc3NSYXciLCJjcm9zcyIsImxlbjJSYXciLCJNYXRoIiwicG93IiwibGVuMiIsImxlblJhdyIsInNxcnQiLCJsZW4iLCJub3JtYWxpemVSYXciLCJieSIsImNvZWYiLCJtdWxSYXciLCJub3JtYWxpemUiLCJlcXVhbHNSYXciLCJlcXVhbHMiLCJhZGRSYXciLCJhZGQiLCJzdWJSYXciLCJzdWIiLCJtdWwiLCJpbnRlcnNlY3Rpb25UaW1lc1JhdyIsImZ4IiwiZnkiLCJ0eCIsInR5Iiwic3giLCJzeSIsImV4IiwiZXkiLCJkZXQiLCJpbnRlcnNlY3Rpb25UaW1lcyIsImZyb20iLCJ0byIsInN0YXJ0IiwiZW5kIiwiaW50ZXJzZWN0aW9uUmF3IiwidGltZXMiLCJpbnRlcnNlY3Rpb24iLCJhbmdsZSIsImExIiwiYTIiLCJQSSIsImFjb3MiLCJ2MSIsInYyIiwicG9pbnRBdCIsInQiLCJiZWZvcmUiLCJhZnRlciIsImludGVyc2VjdGlvblRpbWVzV2l0aCIsInVwZGF0ZSIsImR4MSIsImR5MSIsImR4MiIsImR5MiIsIm5lYXJlc3RUbyIsInAiLCJtYXgiLCJtaW4iLCJ2ZXJ0aWNlcyIsImFyZWFCZXR3ZWVuIiwiaSIsImoiLCJhcmVhIiwiYSIsImxlbmd0aCIsImNvbnRhaW5zIiwiYyIsInJldmVyc2UiLCJ0b1N0cmluZyIsIm1hcCIsInRvRml4ZWQiLCJqb2luIiwiY29vcmRpbmF0ZXMiLCJhbHRpbWV0cnkiLCJkZXB0aCIsImxpdGhvbG9neSIsInJlbmRlcmVyIiwibGluZXMiLCJpbnRlcnNlY3Rpb25zIiwiaW50ZXJzZWN0aW9uSW5kZXgiLCJwb2x5Z29ucyIsInN1cnZleXMiLCJtb2RlIiwiZG9jdW1lbnQiLCJhZGRFdmVudExpc3RlbmVyIiwiZXZlbnQiLCJrZXkiLCJkcmFnZ2VkVmVjdG9yMiIsInBvbHlnb25Db250YWluZXIiLCJkcmFnZ2VkTGluZUluZGV4IiwiZHJhZ2dlZFN1cnZleUluZGV4Iiwic2V0TW91c2VEb3duSGFuZGxlciIsImJ1dHRvbiIsIm1vdXNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJuZWFyZXN0TGluZUluZGV4RnJvbSIsImFkZExpbmUiLCJMaW5lIiwibmVhcmVzdFN1cnZleUluZGV4RnJvbSIsImFkZFN1cnZleSIsInNldE1vdXNlVXBIYW5kbGVyIiwiY2xlYXJTdXJ2ZXkiLCJkcmF3U3VydmV5IiwiU3VydmV5IiwicmFuZG9tIiwic2V0TW91c2VNb3ZlSGFuZGxlciIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsInVwZGF0ZUludGVyc2VjdGlvblRpbWVzIiwiZHJhd0xpbmUiLCJ1cGRhdGVTdXJ2ZXkiLCJpc0luc2lkZSIsIm9sZFBvbHlnb25Db250YWluZXIiLCJwb2x5Z29uIiwiZHJhd1BvbHlnb24iLCJ0aHJlc2hvbGQiLCJkaXN0IiwibmVhcmVzdExpbmVJbmRleCIsIm5lYXJlc3REaXN0IiwibmVhcmVzdFN1cnZleUluZGV4Iiwic3VydmV5IiwiY29udGFpbmVyIiwicHVzaCIsImRyYXdQb2ludCIsImxpbmUiLCJhZGRJbnRlcnNlY3Rpb25UaW1lcyIsIm5ld0ludGVyc2VjdGlvblRpbWVzIiwibmV3SW50ZXJzZWN0aW9uSW5kZXgiLCJOYU4iLCJyZW5kZXJJbnRlcnNlY3Rpb25zIiwiaW5kZXgiLCJpbmRleE9mIiwiY2xlYXJQb2x5Z29ucyIsInBhcnRpYWxzIiwiYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyIsImJ1aWxkUG9seWdvbkluZGV4ZXNGcm9tUGFydGlhbHMiLCJwb2x5Z29uSW5kZXgiLCJQb2x5Z29uIiwiZm9yRWFjaCIsInRlc3RTaWRlIiwidyIsInBhcnRpYWxzT3ZlcmxhcHMiLCJwMSIsInAyIiwicGFydGlhbHNNZWV0IiwiYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25JbmRleGVzIiwiY2VudGVyIiwiaW5kZXhlcyIsInBhcnRzIiwiaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5IiwiaW50ZXJzZWN0aW9uVGltZXNBdEkiLCJfIiwiZmlsdGVyIiwiaXNOYU4iLCJzb3J0IiwibG9jYWxJbmRleCIsImxvY2FsSW50ZXJJbmRleCIsImZvcmVpZ25JbmRleCIsImludGVyIiwicHJldkxvY2FsSW50ZXJJbmRleCIsIm5leHRMb2NhbEludGVySW5kZXgiLCJmb3JlaWduSW50ZXJJbmRleCIsImZpbmRJbmRleCIsImZvcmVpZ25pc1JpZ2h0U2lkZWQiLCJwcmV2Rm9yZWlnbkludGVySW5kZXgiLCJuZXh0Rm9yZWlnbkludGVySW5kZXgiLCJwcmV2TG9jYWxJbnRlciIsIm5leHRMb2NhbEludGVyIiwicHJldkZvcmVpZ25JbnRlciIsIm5leHRGb3JlaWduSW50ZXIiLCJvdmVybGFwIiwicG9seWdvbkluZGV4ZXMiLCJzcGxpY2UiLCJnVGVtcGxhdGUiLCJjcmVhdGVFbGVtZW50TlMiLCJzZXRBdHRyaWJ1dGUiLCJsaW5lVGVtcGxhdGUiLCJhbmNob3JUZW1wbGF0ZSIsInRleHRUZW1wbGF0ZSIsImFwcGVuZENoaWxkIiwiY2xvbmVOb2RlIiwiZ1BvaW50VGVtcGxhdGUiLCJwb2ludFRlbXBsYXRlIiwidGV4dFBvaW50VGVtcGxhdGUiLCJwb2x5Z29uVGVtcGxhdGUiLCJnU3VydmV5VGVtcGxhdGUiLCJzdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUiLCJzdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUiLCJoYXRjaFBhdHRlcm4iLCJpZCIsImhhdGNoUGF0aCIsImQiLCJzdmdSZW5kZXJlciIsInN2ZyIsInBvaW50Q29udGFpbmVyIiwibGluZUNvbnRhaW5lciIsInN1cnZleUNvbnRhaW5lciIsInN2Z0dCeUxpbmUiLCJNYXAiLCJzdmdQYXRoQnlQb2x5Z29uIiwic3ZnR0J5UG9pbnQiLCJoYW5kbGVycyIsIl9zZXRFdmVudEhhbmRsZXIiLCJoYW5kbGVyIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsIm5hbWUiLCJzdmdHIiwiaGFzIiwiZ2V0Iiwic2V0Iiwic3ZnTGluZSIsImNoaWxkcmVuIiwic3ZnUGF0aEFuY2hvclN0YXJ0Iiwic3ZnUGF0aEFuY2hvckVuZCIsInN2Z1RleHRTdGFydCIsInN2Z1RleHRFbmQiLCJpbm5lckhUTUwiLCJlcmFzZUxpbmUiLCJyZW1vdmVDaGlsZCIsImRlbGV0ZSIsInBvaW50Iiwic3ZnVGV4dCIsImNsZWFyQ29udGFpbmVyIiwiZmlyc3RDaGlsZCIsImNsZWFySW50ZXJzZWN0aW9ucyIsImZpbGwiLCJzdmdQYXRoIiwiZmxvb3IiLCJkQm90dG9tIiwiYm90dG9tUG9seWdvbiIsInRvcFBvbHlnb24iLCJQb2xwbG90IiwicXVlcnlTZWxlY3RvciJdLCJtYXBwaW5ncyI6Im1CQUFBLGlCQUNFLFdBQW1CQSxFQUFjQyxRQUFkLElBQUFELE1BQUEsUUFBYyxJQUFBQyxNQUFBLEdBQWQsS0FBQUQsSUFBYyxLQUFBQyxJQXFJbkMsT0FwSVMsRUFBQUMsT0FBUCxTQUFjQyxFQUFZQyxFQUFZQyxFQUFZQyxHQUNoRCxPQUFPSCxFQUFLRSxFQUFLRCxFQUFLRSxHQUVqQixFQUFBQyxJQUFQLFNBQVdDLEVBQVlDLEdBQ3JCLE9BQU9DLEtBQUtSLE9BQU9NLEVBQUVSLEVBQUdRLEVBQUVQLEVBQUdRLEVBQUVULEVBQUdTLEVBQUVSLElBRXRDLFlBQUFNLElBQUEsU0FBSUksR0FDRixPQUFPQyxFQUFRTCxJQUFJRyxLQUFNQyxJQUVwQixFQUFB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bEN4TyxLQUFLNk0saUJBQWlCVSxJQUFJaEcsRUFBU2lILElBSXJDQSxFQUFRbkQsYUFBYSxJQUFLLEtBQU85RCxFQUFReEQsU0FBU1csS0FBSSxTQUFBM0UsR0FBSyxPQUFHQSxFQUFFVCxFQUFFcUYsVUFBUyxJQUFJNUUsRUFBRVIsRUFBRW9GLGFBQWFDLEtBQUssT0FBUyxNQUM5RzRKLEVBQVFuRCxhQUFhLE9BQVFrRCxJQUUvQixZQUFBN0YsY0FBQSxXQUNFMUksS0FBS29PLGVBQWVwTyxLQUFLNkYsbUJBRzNCLFlBQUFlLFdBQUEsU0FBV2tCLEdBQ1QsSUFHTXVFLEVBQUksT0FBSyxLQUFhMUgsVUFBbEIsU0FDSCxJQUF5QkEsVUFEdEIsTUFFSG1ELEVBQU8vQyxNQUFNSixVQUZWLE1BRE8sSUFJREEsVUFITixPQUlGbUQsRUFBTy9DLE1BQU1KLFVBSlgsTUFLSCxJQUF5QkEsVUFDMUIrSixFQUFVckMsUUFSRSxJQVNEMUgsVUFERDBILFFBRVQsSUFBcUMxSCxVQUY1QjBILE1BR1R2RSxFQUFPL0MsTUFBTUosVUFISjBILFFBSVAsSUFBNEIxSCxVQUpyQjBILE9BS1J2RSxFQUFPL0MsTUFBTUosVUFMTDBILFFBTVQsSUFBcUMxSCxVQUFTLEtBRS9DeUksRUFBT3JCLEVBQWdCTCxXQUFVLEdBQ2pDaUQsRUFBZ0J2QixFQUFLSyxTQUFTLEdBQzlCbUIsRUFBYXhCLEVBQUtLLFNBQVMsR0FDakNrQixFQUFjdEQsYUFBYSxJQUFLcUQsR0FDaENFLEVBQVd2RCxhQUFhLElBQUtnQixHQUM3QnJNLEtBQUswTSxnQkFBZ0JqQixZQUFZMkIsSUFFbkMsWUFBQXpHLFlBQUEsV0FDRTNHLEtBQUtvTyxlQUFlcE8sS0FBSzBNLGtCQUU3QixFQXpJQSxJQ25IZ0IsSUFBSW1DLEVBQVF2QyxHQUNmOUcsU0FBU3NKLGNBQWMsUUFDL0JyRCxZQUFZYSxFQUFZQyxNIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmVjdG9yMiB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHggPSAwLCBwdWJsaWMgeSA9IDApIHt9XHJcbiAgc3RhdGljIGRvdFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB4MSAqIHgyICsgeTEgKiB5MjtcclxuICB9XHJcbiAgc3RhdGljIGRvdCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRvdFJhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBkb3Qob3RoZXI6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZG90KHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGNyb3NzUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHgxICogeTIgLSB4MiAqIHkxO1xyXG4gIH1cclxuICBzdGF0aWMgY3Jvc3ModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jcm9zc1Jhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBjcm9zcyhvdGhlcjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5jcm9zcyh0aGlzLCBvdGhlcik7XHJcbiAgfVxyXG4gIHN0YXRpYyBsZW4yUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuMih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlbjJSYXcodS54LCB1LnkpO1xyXG4gIH1cclxuICBsZW4yKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5sZW4yKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW4yUmF3KHgsIHkpKTtcclxuICB9XHJcbiAgc3RhdGljIGxlbih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlblJhdyh1LngsIHUueSk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIubGVuKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbm9ybWFsaXplUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xyXG4gICAgY29uc3QgY29lZiA9IGJ5IC8gdGhpcy5sZW5SYXcoeCwgeSk7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcoeCwgeSwgY29lZik7XHJcbiAgfVxyXG4gIHN0YXRpYyBub3JtYWxpemUodTogVmVjdG9yMiwgYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVJhdyh1LngsIHUueSwgYnkpO1xyXG4gIH1cclxuICBub3JtYWxpemUoYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHNSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHgxID09PSB4MiAmJiB5MSA9PT0geTI7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXF1YWxzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGVxdWFscyhvdGhlcjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZXF1YWxzKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGFkZFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgKyB4MiwgeTEgKyB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBhZGQodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGFkZChvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuYWRkKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIHN1YlJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgLSB4MiwgeTEgLSB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBzdWIodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuc3ViUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIHN1YihvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIG11bFJhdyh4OiBudW1iZXIsIHk6IG51bWJlciwgYnk6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHggKiBieSwgeSAqIGJ5KTtcclxuICB9XHJcbiAgc3RhdGljIG11bCh1OiBWZWN0b3IyLCBieTogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcodS54LCB1LnksIGJ5KTtcclxuICB9XHJcbiAgbXVsKGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm11bCh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25UaW1lc1JhdyhcclxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXHJcbiAgICBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyXHJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBkZXQgPSB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGV4IC0gc3gsIGV5IC0gc3kpO1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KGV4IC0gc3gsIGV5IC0gc3ksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0LFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0XHJcbiAgICApO1xyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBmcm9tOiBWZWN0b3IyLCB0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMlxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvblRpbWVzKHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb25UaW1lcyh0aGlzLCB0bywgc3RhcnQsIGVuZCk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25SYXcoXHJcbiAgICBmeDogbnVtYmVyLCBmeTogbnVtYmVyLCB0eDogbnVtYmVyLCB0eTogbnVtYmVyLFxyXG4gICAgc3g6IG51bWJlciwgc3k6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlclxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgdGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzUmF3KGZ4LCBmeSwgdHgsIHR5LCBzeCwgc3ksIGV4LCBleSk7XHJcbiAgICBpZiAodGltZXMpIHtcclxuICAgICAgdGltZXMueSA9IGZ5ICsgKHR5IC0gZnkpICogdGltZXMueDtcclxuICAgICAgdGltZXMueCA9IGZ4ICsgKHR4IC0gZngpICogdGltZXMueDtcclxuICAgICAgcmV0dXJuIHRpbWVzO1xyXG4gICAgfVxyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uKGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25SYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvbih0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuaW50ZXJzZWN0aW9uKHRoaXMsIHRvLCBzdGFydCwgZW5kKTtcclxuICB9XHJcbiAgYW5nbGUob3RoZXI/OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIGlmIChvdGhlcikge1xyXG4gICAgICAgY29uc3QgYTEgPSB0aGlzLmFuZ2xlKCk7XHJcbiAgICAgICBjb25zdCBhMiA9IG90aGVyLmFuZ2xlKCk7XHJcbiAgICAgICBpZiAoYTIgPCBhMSkge1xyXG4gICAgICAgIHJldHVybiBhMiArIDIgKiBNYXRoLlBJIC0gYTE7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhMiAtIGExO1xyXG4gICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPiAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMiAqIE1hdGguUEkgLSBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lIHtcclxuICB2MTogVmVjdG9yMjtcclxuICB2MjogVmVjdG9yMjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHgxPzogbnVtYmVyLFxyXG4gICAgeTE/OiBudW1iZXIsXHJcbiAgICB4Mj86IG51bWJlcixcclxuICAgIHkyPzogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLnYxID0gbmV3IFZlY3RvcjIoeDEsIHkxKTtcclxuICAgIHRoaXMudjIgPSBuZXcgVmVjdG9yMih4MiwgeTIpO1xyXG4gIH1cclxuICBnZXQgeDEoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLng7XHJcbiAgfVxyXG4gIGdldCB5MSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEueTtcclxuICB9XHJcbiAgZ2V0IHgyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52Mi54O1xyXG4gIH1cclxuICBnZXQgeTIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYyLnk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjIuc3ViKHRoaXMudjEpLmxlbigpO1xyXG4gIH1cclxuICBwb2ludEF0KHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCh0KSk7XHJcbiAgfVxyXG4gIGJlZm9yZSh0OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmFkZCh0aGlzLnYyLnN1Yih0aGlzLnYxKS5tdWwoLXQgLyB0aGlzLmxlbigpKSk7XHJcbiAgfVxyXG4gIGFmdGVyKHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCgodGhpcy5sZW4oKSArIHQpIC8gdGhpcy5sZW4oKSkpO1xyXG4gIH1cclxuICBpbnRlcnNlY3Rpb25UaW1lc1dpdGgob3RoZXI6IExpbmUpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmludGVyc2VjdGlvblRpbWVzKHRoaXMudjIsIG90aGVyLnYxLCBvdGhlci52Mik7XHJcbiAgfVxyXG4gIHVwZGF0ZShkeDEgPSAwLCBkeTEgPSAwLCBkeDIgPSAwLCBkeTIgPSAwKTogdm9pZCB7XHJcbiAgICB0aGlzLnYxLnggKz0gZHgxO1xyXG4gICAgdGhpcy52MS55ICs9IGR5MTtcclxuICAgIHRoaXMudjIueCArPSBkeDI7XHJcbiAgICB0aGlzLnYyLnkgKz0gZHkyO1xyXG4gIH1cclxuICBuZWFyZXN0VG8ocDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgaWYgKHRoaXMudjEuZXF1YWxzKHRoaXMudjIpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnYxLngsIHRoaXMudjEueSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1ID0gdGhpcy52Mi5zdWIodGhpcy52MSk7XHJcbiAgICBjb25zdCB0ID0gdS5kb3QocC5zdWIodGhpcy52MSkpIC8gdS5sZW4yKCk7XHJcbiAgICByZXR1cm4gdGhpcy5wb2ludEF0KE1hdGgubWF4KDAsIE1hdGgubWluKHQsIDEpKSk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2x5Z29uIHtcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSB2ZXJ0aWNlczogVmVjdG9yMltdID0gW10pIHtcclxuXHJcbiAgfVxyXG4gIHByaXZhdGUgYXJlYUJldHdlZW4oaTogbnVtYmVyLCBqOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHRoaXMudmVydGljZXNbaV0ueSArIHRoaXMudmVydGljZXNbal0ueSkgLyAyO1xyXG4gIH1cclxuICBhcmVhKCk6IG51bWJlciB7XHJcbiAgICBsZXQgYSA9IDA7XHJcbiAgICBsZXQgaSA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhICs9IHRoaXMuYXJlYUJldHdlZW4oaSwgaik7XHJcbiAgICAgIGkgPSBqO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbiAgfVxyXG4gIGNvbnRhaW5zKHY6IFZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgIGxldCBjID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBqID0gaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnZlcnRpY2VzW2ldLnkgPiB2LnkgIT09IHRoaXMudmVydGljZXNbal0ueSA+IHYueSAmJlxyXG4gICAgICAgIHYueCA8ICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHYueSAtIHRoaXMudmVydGljZXNbaV0ueSkgLyAodGhpcy52ZXJ0aWNlc1tqXS55IC0gdGhpcy52ZXJ0aWNlc1tpXS55KSArIHRoaXMudmVydGljZXNbaV0ueFxyXG4gICAgICApIHtcclxuICAgICAgICBjID0gIWM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuICByZXZlcnNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy52ZXJ0aWNlcy5yZXZlcnNlKCk7XHJcbiAgfVxyXG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XHJcbiAgICByZXR1cm4gYCR7dGhpcy52ZXJ0aWNlcy5sZW5ndGh9IHBvaW50czogYCArIHRoaXMudmVydGljZXMubWFwKHYgPT4gYCgke3YueC50b0ZpeGVkKCl9LCAke3YueS50b0ZpeGVkKCl9KWApLmpvaW4oJywgJykgKyBgIChhcmVhOiAke3RoaXMuYXJlYSgpLnRvRml4ZWQoKX0pYDtcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBMaXRob2xvZ2ljYWxMYXllciB9IGZyb20gXCIuL2xpdGhvbG9naWNhbC1sYXllclwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuZXhwb3J0IGNsYXNzIFN1cnZleSB7XHJcbiAgY29uc3RydWN0b3IoXHJcbiAgICBwdWJsaWMgY29vcmRpbmF0ZXM6IFZlY3RvcjIsXHJcbiAgICBwdWJsaWMgYWx0aW1ldHJ5OiBudW1iZXIsXHJcbiAgICBwdWJsaWMgZGVwdGg6IG51bWJlcixcclxuICAgIHB1YmxpYyBsaXRob2xvZ3k6IExpdGhvbG9naWNhbExheWVyW11cclxuICApIHtcclxuXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9scGxvdFJlbmRlcmVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9wb2xwbG90LXJlbmRlcmVyXCI7XHJcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9saW5lXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFN1cnZleSB9IGZyb20gXCIuL3N1cnZleVwiO1xyXG5pbXBvcnQgeyBWZWN0b3IyIH0gZnJvbSBcIi4vdmVjdG9yMlwiO1xyXG5cclxuY29uc3QgQ0xJQ0tfVEhSRVNIT0xEID0gMjA7XHJcblxyXG5jb25zdCBlbnVtIE1vZGVzIHtcclxuICBQb2x5Z29uLFxyXG4gIExpbmUsXHJcbiAgU3VydmV5XHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2xwbG90IHtcclxuICBsaW5lczogTGluZVtdID0gW107XHJcbiAgaW50ZXJzZWN0aW9uVGltZXM6IG51bWJlcltdW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25zOiBWZWN0b3IyW10gPSBbXTtcclxuICBpbnRlcnNlY3Rpb25JbmRleDogbnVtYmVyW11bXSA9IFtdO1xyXG4gIHBvbHlnb25zOiBQb2x5Z29uW10gPSBbXTtcclxuICBzdXJ2ZXlzOiBWZWN0b3IyW10gPSBbXTtcclxuICBtb2RlID0gTW9kZXMuTGluZTtcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSByZW5kZXJlcjogUG9scGxvdFJlbmRlcmVyKSB7XHJcbiAgICAvLyByZW1vdmUgbmV4dCBoYWNreSBldmVudExpc3RlbmVyXHJcbiAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdrZXl1cCcsIGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmtleSA9PT0gJ3MnKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gTW9kZXMuU3VydmV5O1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ2wnKSB7XHJcbiAgICAgICAgdGhpcy5tb2RlID0gTW9kZXMuTGluZTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICBsZXQgZHJhZ2dlZExpbmVJbmRleCA9IC0xO1xyXG4gICAgbGV0IGRyYWdnZWRWZWN0b3IyOiBWZWN0b3IyO1xyXG4gICAgbGV0IGRyYWdnZWRTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZURvd25IYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLm5lYXJlc3RMaW5lSW5kZXhGcm9tKG1vdXNlLCBDTElDS19USFJFU0hPTEQpO1xyXG4gICAgICAgIGlmIChkcmFnZ2VkTGluZUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5hZGRMaW5lKG5ldyBMaW5lKG1vdXNlLngsIG1vdXNlLnksIG1vdXNlLngsIG1vdXNlLnkpKTtcclxuICAgICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSB0aGlzLmxpbmVzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjI7XHJcbiAgICAgICAgfSBlbHNlIGlmIChtb3VzZS5zdWIodGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MSkubGVuKCkgPCBDTElDS19USFJFU0hPTEQpIHtcclxuICAgICAgICAgIGRyYWdnZWRWZWN0b3IyID0gdGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XS52MTtcclxuICAgICAgICB9IGVsc2UgaWYgKG1vdXNlLnN1Yih0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYyKS5sZW4oKSA8IENMSUNLX1RIUkVTSE9MRCkge1xyXG4gICAgICAgICAgZHJhZ2dlZFZlY3RvcjIgPSB0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYyO1xyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLlN1cnZleSkge1xyXG4gICAgICAgIGRyYWdnZWRTdXJ2ZXlJbmRleCA9IHRoaXMubmVhcmVzdFN1cnZleUluZGV4RnJvbShtb3VzZSwgQ0xJQ0tfVEhSRVNIT0xEKTtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5hZGRTdXJ2ZXkobW91c2UpO1xyXG4gICAgICAgICAgZHJhZ2dlZFN1cnZleUluZGV4ID0gdGhpcy5zdXJ2ZXlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlVXBIYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuTGluZSkge1xyXG4gICAgICAgIGRyYWdnZWRMaW5lSW5kZXggPSAtMTtcclxuICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IG51bGw7XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5TdXJ2ZXkpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyU3VydmV5KCk7XHJcbiAgICAgICAgaWYgKGRyYWdnZWRTdXJ2ZXlJbmRleCAhPT0gLTEpIHtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1N1cnZleShuZXcgU3VydmV5KHRoaXMuc3VydmV5c1tkcmFnZ2VkU3VydmV5SW5kZXhdLCAwLCA0MDAgKiBNYXRoLnJhbmRvbSgpLCBbXSkpO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcmFnZ2VkU3VydmV5SW5kZXggPSAtMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHBvbHlnb25Db250YWluZXI6IFBvbHlnb247XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlTW92ZUhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICAvLyByZXR1cm4gaWYgY2xpY2sgaXMgbm90IGZyb20gbW91c2UgbGVmdCBidXR0b25cclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5MaW5lKSB7XHJcbiAgICAgICAgaWYgKGRyYWdnZWRWZWN0b3IyKSB7XHJcbiAgICAgICAgICBkcmFnZ2VkVmVjdG9yMi54ICs9IGV2ZW50Lm1vdmVtZW50WDtcclxuICAgICAgICAgIGRyYWdnZWRWZWN0b3IyLnkgKz0gZXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyh0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdKTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUodGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XSwgZHJhZ2dlZExpbmVJbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICB9IGVsc2UgaWYgKGRyYWdnZWRMaW5lSW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICB0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnVwZGF0ZShldmVudC5tb3ZlbWVudFgsIGV2ZW50Lm1vdmVtZW50WSwgZXZlbnQubW92ZW1lbnRYLCBldmVudC5tb3ZlbWVudFkpO1xyXG4gICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyh0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdKTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUodGhpcy5saW5lc1tkcmFnZ2VkTGluZUluZGV4XSwgZHJhZ2dlZExpbmVJbmRleC50b1N0cmluZygpKTtcclxuICAgICAgICB9XHJcbiAgICAgIH0gZWxzZSBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5TdXJ2ZXkpIHtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5zdXJ2ZXlzW2RyYWdnZWRTdXJ2ZXlJbmRleF0ueCArPSBldmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgICB0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XS55ICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlU3VydmV5KHRoaXMuc3VydmV5c1tkcmFnZ2VkU3VydmV5SW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIGluIGEgZnVuY3Rpb25cclxuICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICAgICAgbGV0IGlzSW5zaWRlID0gZmFsc2U7XHJcbiAgICAgIGxldCBvbGRQb2x5Z29uQ29udGFpbmVyID0gcG9seWdvbkNvbnRhaW5lcjtcclxuICAgICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIHRoaXMucG9seWdvbnMpIHtcclxuICAgICAgICBpZiAocG9seWdvbi5jb250YWlucyhtb3VzZSkpIHtcclxuICAgICAgICAgIGlmIChwb2x5Z29uICE9PSBwb2x5Z29uQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvbHlnb24ocG9seWdvbiwgJ3JlZCcpO1xyXG4gICAgICAgICAgICBwb2x5Z29uQ29udGFpbmVyID0gcG9seWdvbjtcclxuICAgICAgICAgIH1cclxuICAgICAgICAgIGlzSW5zaWRlID0gdHJ1ZTtcclxuICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpZiAoIWlzSW5zaWRlKSB7XHJcbiAgICAgICAgcG9seWdvbkNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgIH1cclxuICAgICAgaWYgKG9sZFBvbHlnb25Db250YWluZXIgJiYgb2xkUG9seWdvbkNvbnRhaW5lciAhPT0gcG9seWdvbkNvbnRhaW5lcikge1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvbHlnb24ob2xkUG9seWdvbkNvbnRhaW5lciwgJ3doaXRlJyk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG4gIH1cclxuICBuZWFyZXN0TGluZUluZGV4RnJvbSh2OiBWZWN0b3IyLCB0aHJlc2hvbGQgPSArSW5maW5pdHkpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RMaW5lSW5kZXggPSAtMTtcclxuICAgIGxldCBuZWFyZXN0RGlzdCA9ICtJbmZpbml0eTtcclxuICAgIGxldCBkaXN0OiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHRoaXMubGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZGlzdCA9IHRoaXMubGluZXNbaV0ubmVhcmVzdFRvKHYpLnN1Yih2KS5sZW4oKTtcclxuICAgICAgaWYgKGRpc3QgPCB0aHJlc2hvbGQgJiYgZGlzdCA8IG5lYXJlc3REaXN0KSB7XHJcbiAgICAgICAgbmVhcmVzdERpc3QgPSBkaXN0O1xyXG4gICAgICAgIG5lYXJlc3RMaW5lSW5kZXggPSBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmVhcmVzdExpbmVJbmRleDtcclxuICB9XHJcbiAgbmVhcmVzdFN1cnZleUluZGV4RnJvbSh2OiBWZWN0b3IyLCB0aHJlc2hvbGQgPSArSW5maW5pdHkpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgbGV0IG5lYXJlc3REaXN0ID0gK0luZmluaXR5O1xyXG4gICAgbGV0IGRpc3Q6IG51bWJlcjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgdGhpcy5zdXJ2ZXlzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGRpc3QgPSB0aGlzLnN1cnZleXNbaV0uc3ViKHYpLmxlbigpO1xyXG4gICAgICBpZiAoZGlzdCA8IHRocmVzaG9sZCAmJiBkaXN0IDwgbmVhcmVzdERpc3QpIHtcclxuICAgICAgICBuZWFyZXN0RGlzdCA9IGRpc3Q7XHJcbiAgICAgICAgbmVhcmVzdFN1cnZleUluZGV4ID0gaTtcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgcmV0dXJuIG5lYXJlc3RTdXJ2ZXlJbmRleDtcclxuICB9XHJcbiAgYWRkU3VydmV5KHN1cnZleTogVmVjdG9yMik6IHZvaWQge1xyXG4gICAgdGhpcy5zdXJ2ZXlzLnB1c2goc3VydmV5KTtcclxuICAgIGxldCBjb250YWluZXI6IFBvbHlnb247XHJcbiAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgdGhpcy5wb2x5Z29ucykge1xyXG4gICAgICBpZiAocG9seWdvbi5jb250YWlucyhzdXJ2ZXkpKSB7XHJcbiAgICAgICAgY29udGFpbmVyID0gcG9seWdvbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3UG9pbnQoc3VydmV5LCBjb250YWluZXIgPyBjb250YWluZXIuYXJlYSgpLnRvRml4ZWQoKSArICcgbTInIDogJycpO1xyXG4gIH1cclxuICAvLyBUT0RPOiBjbGVhbnVwIGFkZCB1cGRhdGUgcmVuZGVyIGFuZCBvdGhlciB3ZWlyZCBmdW5jdGlvbnNcclxuICB1cGRhdGVTdXJ2ZXkoc3VydmV5OiBWZWN0b3IyKTogdm9pZCB7XHJcbiAgICBsZXQgY29udGFpbmVyOiBQb2x5Z29uO1xyXG4gICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIHRoaXMucG9seWdvbnMpIHtcclxuICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMoc3VydmV5KSkge1xyXG4gICAgICAgIGNvbnRhaW5lciA9IHBvbHlnb247XHJcbiAgICAgICAgYnJlYWs7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvaW50KHN1cnZleSwgY29udGFpbmVyID8gY29udGFpbmVyLmFyZWEoKS50b0ZpeGVkKCkgKyAnIG0yJyA6ICcnKTtcclxuICB9XHJcbiAgYWRkTGluZShsaW5lOiBMaW5lKTogdm9pZCB7XHJcbiAgICB0aGlzLmFkZEludGVyc2VjdGlvblRpbWVzKGxpbmUpO1xyXG4gICAgdGhpcy5saW5lcy5wdXNoKGxpbmUpO1xyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3TGluZShsaW5lLCAodGhpcy5saW5lcy5sZW5ndGggLSAxKS50b1N0cmluZygpKTtcclxuICB9XHJcbiAgYWRkSW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBsaW5lOiBMaW5lLFxyXG4gICAgbGluZXMgPSB0aGlzLmxpbmVzLFxyXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzLFxyXG4gICAgaW50ZXJzZWN0aW9ucyA9IHRoaXMuaW50ZXJzZWN0aW9ucyxcclxuICAgIGludGVyc2VjdGlvbkluZGV4ID0gdGhpcy5pbnRlcnNlY3Rpb25JbmRleCxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IG5ld0ludGVyc2VjdGlvblRpbWVzOiBudW1iZXJbXSA9IFtdO1xyXG4gICAgY29uc3QgbmV3SW50ZXJzZWN0aW9uSW5kZXg6IG51bWJlcltdID0gW107XHJcbiAgICBsZXQgdGltZXM6IFZlY3RvcjI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIHRpbWVzID0gbGluZXNbaV0uaW50ZXJzZWN0aW9uVGltZXNXaXRoKGxpbmUpO1xyXG4gICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXS5wdXNoKHRpbWVzLngpO1xyXG4gICAgICBpbnRlcnNlY3Rpb25zLnB1c2gobGluZXNbaV0ucG9pbnRBdCh0aW1lcy54KSk7XHJcbiAgICAgIGludGVyc2VjdGlvbkluZGV4W2ldLnB1c2goaW50ZXJzZWN0aW9ucy5sZW5ndGggLSAxKTtcclxuICAgICAgbmV3SW50ZXJzZWN0aW9uVGltZXMucHVzaCh0aW1lcy55KTtcclxuICAgICAgbmV3SW50ZXJzZWN0aW9uSW5kZXgucHVzaChpbnRlcnNlY3Rpb25zLmxlbmd0aCAtIDEpO1xyXG4gICAgfVxyXG4gICAgbmV3SW50ZXJzZWN0aW9uVGltZXMucHVzaChOYU4pO1xyXG4gICAgbmV3SW50ZXJzZWN0aW9uSW5kZXgucHVzaChudWxsKTtcclxuICAgIGludGVyc2VjdGlvblRpbWVzLnB1c2gobmV3SW50ZXJzZWN0aW9uVGltZXMpO1xyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXgucHVzaChuZXdJbnRlcnNlY3Rpb25JbmRleCk7XHJcbiAgICB0aGlzLnJlbmRlckludGVyc2VjdGlvbnMoKTtcclxuICB9XHJcbiAgdXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBsaW5lOiBMaW5lLFxyXG4gICAgbGluZXMgPSB0aGlzLmxpbmVzLFxyXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzLFxyXG4gICAgaW50ZXJzZWN0aW9ucyA9IHRoaXMuaW50ZXJzZWN0aW9ucyxcclxuICAgIGludGVyc2VjdGlvbkluZGV4ID0gdGhpcy5pbnRlcnNlY3Rpb25JbmRleCxcclxuICApOiB2b2lkIHtcclxuICAgIGNvbnN0IGluZGV4ID0gbGluZXMuaW5kZXhPZihsaW5lKTtcclxuICAgIGxldCB0aW1lczogVmVjdG9yMjtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgaWYgKGkgIT09IGluZGV4KSB7XHJcbiAgICAgICAgdGltZXMgPSBsaW5lc1tpXS5pbnRlcnNlY3Rpb25UaW1lc1dpdGgobGluZSk7XHJcbiAgICAgICAgaW50ZXJzZWN0aW9uVGltZXNbaV1baW5kZXhdID0gdGltZXMueDtcclxuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpbmRleF1baV0gPSB0aW1lcy55O1xyXG4gICAgICAgIGlmIChpIDwgaW5kZXgpIHtcclxuICAgICAgICAgIGludGVyc2VjdGlvbnNbaW50ZXJzZWN0aW9uSW5kZXhbaV1baW5kZXhdXSA9IGxpbmVzW2ldLnBvaW50QXQodGltZXMueCk7XHJcbiAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgIGludGVyc2VjdGlvbnNbaW50ZXJzZWN0aW9uSW5kZXhbaW5kZXhdW2ldXSA9IGxpbmVzW2ldLnBvaW50QXQodGltZXMueCk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICB0aGlzLnJlbmRlckludGVyc2VjdGlvbnMoKTtcclxuICB9XHJcbiAgcmVuZGVySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMucmVuZGVyZXIuY2xlYXJJbnRlcnNlY3Rpb25zKCk7XHJcbiAgICAvLyB0aGlzLmludGVyc2VjdGlvbnMuZm9yRWFjaChpbnRlcnNlY3Rpb24gPT4ge1xyXG4gICAgLy8gICB0aGlzLnJlbmRlcmVyLmRyYXdQb2ludChpbnRlcnNlY3Rpb24pO1xyXG4gICAgLy8gfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmNsZWFyUG9seWdvbnMoKTtcclxuICAgIHRoaXMucG9seWdvbnMgPSBbXTtcclxuICAgIGNvbnN0IHBhcnRpYWxzID0gdGhpcy5idWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzKCk7XHJcbiAgICBjb25zdCBwb2x5Z29uSW5kZXhlcyA9IHRoaXMuYnVpbGRQb2x5Z29uSW5kZXhlc0Zyb21QYXJ0aWFscyhwYXJ0aWFscyk7XHJcbiAgICBjb25zdCBwb2x5Z29ucyA9IHBvbHlnb25JbmRleGVzLm1hcChwb2x5Z29uSW5kZXggPT4gbmV3IFBvbHlnb24ocG9seWdvbkluZGV4Lm1hcChpID0+IHRoaXMuaW50ZXJzZWN0aW9uc1tpXSkpKTtcclxuICAgIHBvbHlnb25zLmZvckVhY2gocG9seWdvbiA9PiB7XHJcbiAgICAgIGlmIChwb2x5Z29uLmFyZWEoKSA+IDApIHtcclxuICAgICAgICB0aGlzLnBvbHlnb25zLnB1c2gocG9seWdvbik7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihwb2x5Z29uLCAnd2hpdGUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnN1cnZleXMuZm9yRWFjaChzdXJ2ZXkgPT4gdGhpcy51cGRhdGVTdXJ2ZXkoc3VydmV5KSk7XHJcbiAgfVxyXG4gIHRlc3RTaWRlKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIsIHc6IFZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB2LnN1Yih1KS5jcm9zcyh3LnN1Yih1KSkgPiAwO1xyXG4gIH1cclxuICBwYXJ0aWFsc092ZXJsYXBzKHAxOiBudW1iZXJbXSwgcDI6IG51bWJlcltdKTogMiB8IDAge1xyXG4gICAgcmV0dXJuIHAxW3AxLmxlbmd0aCAtIDJdID09PSBwMlswXSAmJiBwMVtwMS5sZW5ndGggLSAxXSA9PT0gcDJbMV0gPyAyIDogMDtcclxuICB9XHJcbiAgcGFydGlhbHNNZWV0KHAxOiBudW1iZXJbXSwgcDI6IG51bWJlcltdKTogMSB8IDAge1xyXG4gICAgcmV0dXJuIHAxW3AxLmxlbmd0aCAtIDFdID09PSBwMlswXSA/IDEgOiAwO1xyXG4gIH1cclxuICBidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMoXHJcbiAgICBjZW50ZXI6IG51bWJlcixcclxuICAgIGluZGV4ZXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLFxyXG4gICk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdIHtcclxuICAgIGNvbnN0IHBhcnRzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgaW5kZXhlc1tpXSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBsZXQgaiA9IGkgKyAxO1xyXG4gICAgICAgIGlmIChqID09PSBpbmRleGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlICh0eXBlb2YgaW5kZXhlc1tqXSAhPT0gJ251bWJlcicpwqB7XHJcbiAgICAgICAgICBqKys7XHJcbiAgICAgICAgICBpZiAoaiA9PT0gaW5kZXhlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpICE9PSBqKSB7XHJcbiAgICAgICAgICBwYXJ0cy5wdXNoKFtpbmRleGVzW2ldLCBjZW50ZXIsIGluZGV4ZXNbal1dKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJ0cztcclxuICB9XHJcbiAgYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyhcclxuICAgIGxpbmVzID0gdGhpcy5saW5lcyxcclxuICAgIGludGVyc2VjdGlvblRpbWVzID0gdGhpcy5pbnRlcnNlY3Rpb25UaW1lcyxcclxuICAgIGludGVyc2VjdGlvbkluZGV4ID0gdGhpcy5pbnRlcnNlY3Rpb25JbmRleFxyXG4gICk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2xpbmVzLmxlbmd0aCA9ICcsIGxpbmVzLmxlbmd0aCk7XHJcbiAgICBjb25zdCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkgPSBpbnRlcnNlY3Rpb25UaW1lc1xyXG4gICAgICAubWFwKChpbnRlcnNlY3Rpb25UaW1lc0F0SSwgaSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25UaW1lc0F0SVxyXG4gICAgICAgICAgLm1hcCgoXywgaikgPT4gailcclxuICAgICAgICAgIC5maWx0ZXIoaiA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNOYU4oaW50ZXJzZWN0aW9uVGltZXNBdElbal0pICYmIDAgPD0gaW50ZXJzZWN0aW9uVGltZXNBdElbal0gJiYgaW50ZXJzZWN0aW9uVGltZXNBdElbal0gPD0gMSAmJlxyXG4gICAgICAgICAgICAgICFpc05hTihpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSkgJiYgMCA8PSBpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSAmJiBpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSA8PSAxO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5zb3J0KChpLCBqKSA9PiBpbnRlcnNlY3Rpb25UaW1lc0F0SVtpXSAtIGludGVyc2VjdGlvblRpbWVzQXRJW2pdKTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkpO1xyXG4gICAgY29uc3QgcGFydGlhbHM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdID0gW107XHJcbiAgICBmb3IgKGxldCBsb2NhbEluZGV4ID0gMDsgbG9jYWxJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheS5sZW5ndGg7IGxvY2FsSW5kZXgrKykge1xyXG4gICAgICBmb3IgKGxldCBsb2NhbEludGVySW5kZXggPSAwOyBsb2NhbEludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF0ubGVuZ3RoOyBsb2NhbEludGVySW5kZXgrKykge1xyXG4gICAgICAgIGNvbnN0IGZvcmVpZ25JbmRleCA9IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtsb2NhbEludGVySW5kZXhdO1xyXG4gICAgICAgIGlmIChsb2NhbEluZGV4IDwgZm9yZWlnbkluZGV4KSB7XHJcbiAgICAgICAgICBjb25zdCBpbnRlciA9IGludGVyc2VjdGlvbkluZGV4W2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtsb2NhbEludGVySW5kZXhdXTtcclxuXHJcbiAgICAgICAgICBjb25zdCBwcmV2TG9jYWxJbnRlckluZGV4ID0gbG9jYWxJbnRlckluZGV4IC0gMTtcclxuICAgICAgICAgIGNvbnN0IG5leHRMb2NhbEludGVySW5kZXggPSBsb2NhbEludGVySW5kZXggKyAxO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGZvcmVpZ25JbnRlckluZGV4ID0gaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0uZmluZEluZGV4KGkgPT4gaSA9PT0gbG9jYWxJbmRleCk7XHJcbiAgICAgICAgICBjb25zdCBmb3JlaWduaXNSaWdodFNpZGVkID0gdGhpcy50ZXN0U2lkZShsaW5lc1tsb2NhbEluZGV4XS52MSwgbGluZXNbbG9jYWxJbmRleF0udjIsIGxpbmVzW2ZvcmVpZ25JbmRleF0udjEpO1xyXG4gICAgICAgICAgY29uc3QgcHJldkZvcmVpZ25JbnRlckluZGV4ID0gZm9yZWlnbmlzUmlnaHRTaWRlZCA/IGZvcmVpZ25JbnRlckluZGV4IC0gMSA6IGZvcmVpZ25JbnRlckluZGV4ICsgMTtcclxuICAgICAgICAgIGNvbnN0IG5leHRGb3JlaWduSW50ZXJJbmRleCA9IGZvcmVpZ25pc1JpZ2h0U2lkZWQgPyBmb3JlaWduSW50ZXJJbmRleCArIDEgOiBmb3JlaWduSW50ZXJJbmRleCAtIDE7XHJcblxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYFxyXG4gICAgICAgICAgLy8gICBsb2NhbEluZGV4OiAke2xvY2FsSW5kZXh9XHJcbiAgICAgICAgICAvLyAgIGxvY2FsSW50ZXJzZWN0aW9ucyAke2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVxyXG4gICAgICAgICAgLy8gICAgIC5tYXAoKF8sIGkpID0+IGkgPT09IGxvY2FsSW50ZXJJbmRleCA/IGBbJHtffV1gIDogXylcclxuICAgICAgICAgIC8vICAgICAuam9pbignLCAnKX1cclxuICAgICAgICAgIC8vICAgZm9yZWlnbkluZGV4OiAke2ZvcmVpZ25JbmRleH1cclxuICAgICAgICAgIC8vICAgZm9yZWlnbkludGVyc2VjdGlvbnMgJHtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVxyXG4gICAgICAgICAgLy8gICAgIC5tYXAoKF8sIGkpID0+IGkgPT09IGZvcmVpZ25JbnRlckluZGV4ID8gYFske199XWAgOiBfKVxyXG4gICAgICAgICAgLy8gICAgIC5qb2luKCcsICcpfVxyXG4gICAgICAgICAgLy8gYCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcHJldkxvY2FsSW50ZXIgPSAwIDwgbG9jYWxJbnRlckluZGV4XHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbbG9jYWxJbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW3ByZXZMb2NhbEludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBuZXh0TG9jYWxJbnRlciA9IGxvY2FsSW50ZXJJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XS5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbbG9jYWxJbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW25leHRMb2NhbEludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBwcmV2Rm9yZWlnbkludGVyID0gLTEgPCBwcmV2Rm9yZWlnbkludGVySW5kZXggJiYgcHJldkZvcmVpZ25JbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0ubGVuZ3RoXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbZm9yZWlnbkluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVtwcmV2Rm9yZWlnbkludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBuZXh0Rm9yZWlnbkludGVyID0gLTEgPCBuZXh0Rm9yZWlnbkludGVySW5kZXggJiYgbmV4dEZvcmVpZ25JbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0ubGVuZ3RoXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbZm9yZWlnbkluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVtuZXh0Rm9yZWlnbkludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIF5cclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgbmV4dEZvcmVpZ25JbnRlclxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICAvLyAgLS0tcHJldkxvY2FsSW50ZXItLS1pbnRlci0tLW5leHRMb2NhbEludGVyLS0tPlxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICBwcmV2Rm9yZWlnbkludGVyXHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5idWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMoXHJcbiAgICAgICAgICAgIGludGVyLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgcHJldkxvY2FsSW50ZXIsXHJcbiAgICAgICAgICAgICAgbmV4dEZvcmVpZ25JbnRlcixcclxuICAgICAgICAgICAgICBuZXh0TG9jYWxJbnRlcixcclxuICAgICAgICAgICAgICBwcmV2Rm9yZWlnbkludGVyXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBwYXJ0aWFscy5wdXNoKC4uLnBhcnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKCdwYXJ0aWFscycsIHBhcnRpYWxzKTtcclxuICAgIHJldHVybiBwYXJ0aWFscztcclxuICB9XHJcbiAgYnVpbGRQb2x5Z29uSW5kZXhlc0Zyb21QYXJ0aWFscyhwYXJ0aWFsczogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10pOiBudW1iZXJbXVtdIHtcclxuICAgIGNvbnN0IHBvbHlnb25JbmRleGVzOiBudW1iZXJbXVtdID0gW107XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgb3ZlcmxhcDogbnVtYmVyO1xyXG4gICAgd2hpbGUgKGkgPCBwYXJ0aWFscy5sZW5ndGgpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJ0aWFscy5sZW5ndGg7IGorKynCoHtcclxuICAgICAgICBpZiAoaSAhPT0gaikge1xyXG4gICAgICAgICAgaWYgKHRoaXMucGFydGlhbHNPdmVybGFwcyhwYXJ0aWFsc1tpXSwgcGFydGlhbHNbal0pKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tpXTogJHtwYXJ0aWFsc1tpXS50b1N0cmluZygpfSxcclxuICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tqXTogJHtwYXJ0aWFsc1tqXS50b1N0cmluZygpfSxcclxuICAgICAgICAgICAgLy8gYCk7XHJcbiAgICAgICAgICAgIHBhcnRpYWxzW2ldLnNwbGljZSgtMiwgMiwgLi4ucGFydGlhbHNbal0pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXHJcbiAgICAgICAgICAgIC8vICAgcGFydGlhbHNbaV06ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX0gW05FV10sXHJcbiAgICAgICAgICAgIC8vIGApO1xyXG4gICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaiwgMSk7XHJcbiAgICAgICAgICAgIGlmIChqIDwgaSkge1xyXG4gICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdmVybGFwID0gdGhpcy5wYXJ0aWFsc092ZXJsYXBzKHBhcnRpYWxzW2ldLCBwYXJ0aWFsc1tpXSkgfHwgdGhpcy5wYXJ0aWFsc01lZXQocGFydGlhbHNbaV0sIHBhcnRpYWxzW2ldKTtcclxuICAgICAgICAgICAgaWYgKG92ZXJsYXAgPiAwKSB7XHJcbiAgICAgICAgICAgICAgcGFydGlhbHNbaV0uc3BsaWNlKDAsIG92ZXJsYXApO1xyXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgICAgICAvLyAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9IFtDTE9TRURdLFxyXG4gICAgICAgICAgICAgIC8vIGApO1xyXG4gICAgICAgICAgICAgIHBvbHlnb25JbmRleGVzLnB1c2gocGFydGlhbHNbaV0pO1xyXG4gICAgICAgICAgICAgIHBhcnRpYWxzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5jb21wbGV0ZSBwb2x5Z29ucycpO1xyXG4gICAgLy8gcGFydGlhbHMubWFwKHAgPT4gY29uc29sZS5sb2cocC50b1N0cmluZygpKSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncG9seWdvbnMnLCBwb2x5Z29ucyk7XHJcbiAgICAvLyBwb2x5Z29ucy5tYXAocCA9PiBjb25zb2xlLmxvZyhwLnRvU3RyaW5nKCkpKTtcclxuICAgIHJldHVybiBwb2x5Z29uSW5kZXhlcztcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBQb2xwbG90UmVuZGVyZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3BvbHBsb3QtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgU3VydmV5IH0gZnJvbSBcIi4vc3VydmV5XCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XHJcblxyXG4vLyBsaW5lXHJcbmNvbnN0IGdUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5nVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcclxuZ1RlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XHJcblxyXG5jb25zdCBsaW5lVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2xpbmUnKTtcclxubGluZVRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsICcxMCwgNCwgMSwgNCcpO1xyXG5cclxuY29uc3QgYW5jaG9yVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuYW5jaG9yVGVtcGxhdGUuc2V0QXR0cmlidXRlKFxyXG4gICdkJyxcclxuICAnTSAwLCAwICcgK1xyXG4gICdBIDEwLCAxMCwgMCwgMCwgMCwgLTUsIC01ICcgK1xyXG4gICdBIDEwLCAxMCwgMCwgMSwgMSwgNSwgLTUgJyArXHJcbiAgJ0EgMTAsIDEwLCAwLCAwLCAwLCAwLCAwJ1xyXG4pO1xyXG5hbmNob3JUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnd2hpdGUnKTtcclxuXHJcbmNvbnN0IHRleHRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAndGV4dCcpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2NlbnRyYWwnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCAnY29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIGNvdXJpZXIsIG1vbm9zcGFjZScpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsICcxMDAnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzE0cHgnKTtcclxuXHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChsaW5lVGVtcGxhdGUpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQoYW5jaG9yVGVtcGxhdGUpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQoYW5jaG9yVGVtcGxhdGUuY2xvbmVOb2RlKCkpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQodGV4dFRlbXBsYXRlKTtcclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKHRleHRUZW1wbGF0ZS5jbG9uZU5vZGUoKSk7XHJcblxyXG4vLyBwb2ludFxyXG5jb25zdCBnUG9pbnRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5nUG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5nUG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjRweCcpO1xyXG5cclxuY29uc3QgcG9pbnRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnY2lyY2xlJyk7XHJcbnBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XHJcbnBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdyJywgJzMnKTtcclxuXHJcbmNvbnN0IHRleHRQb2ludFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAxMCknKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnaGFuZ2luZycpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ2NvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBjb3VyaWVyLCBtb25vc3BhY2UnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsICcxMDAnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTRweCcpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCAnaXRhbGljJyk7XHJcblxyXG5nUG9pbnRUZW1wbGF0ZS5hcHBlbmRDaGlsZChwb2ludFRlbXBsYXRlKTtcclxuZ1BvaW50VGVtcGxhdGUuYXBwZW5kQ2hpbGQodGV4dFBvaW50VGVtcGxhdGUpO1xyXG5cclxuLy8gcG9seWdvblxyXG5jb25zdCBwb2x5Z29uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdncmVlbicpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMC43Jyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjgnKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XHJcblxyXG4vLyBzdXJ2ZXlcclxuY29uc3QgZ1N1cnZleVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbmdTdXJ2ZXlUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoNjAwLCAzMDApJyk7XHJcblxyXG5jb25zdCBzdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuc3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICd1cmwoI2VhcnRoLWhhdGNoKScpO1xyXG5zdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMCcpO1xyXG5cclxuY29uc3Qgc3VydmV5VG9wUG9seWdvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbnN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwJyk7XHJcbnN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5zdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC44cHgnKTtcclxuXHJcbmdTdXJ2ZXlUZW1wbGF0ZS5hcHBlbmRDaGlsZChzdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUpO1xyXG5nU3VydmV5VGVtcGxhdGUuYXBwZW5kQ2hpbGQoc3VydmV5VG9wUG9seWdvblRlbXBsYXRlKTtcclxuXHJcbi8vIGVhcnRoSGF0Y2hcclxuY29uc3QgaGF0Y2hQYXR0ZXJuID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXR0ZXJuJyk7XHJcbmhhdGNoUGF0dGVybi5pZCA9ICdlYXJ0aC1oYXRjaCc7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ3BhdHRlcm5Vbml0cycsICd1c2VyU3BhY2VPblVzZScpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCd3aWR0aCcsICcyNScpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCdoZWlnaHQnLCAnMjUnKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyMyMjJkMzInKTtcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XHJcblxyXG5sZXQgaGF0Y2hQYXRoID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbmNvbnN0IGhhdGNoRHMgPSBbXHJcbiAgJ00tMSwxIGwyLC0yJyxcclxuICAnTS0xLDkgbDEwLC0xMCcsXHJcblxyXG4gICdNLTEsMTggbDQsLTQnLFxyXG4gICdNLTEsMjYgbDgsLTgnLFxyXG4gIC8vICdNNiwyNiBsNCwtNCcsXHJcbiAgJ003LDI2IGw0LC00JyxcclxuXHJcbiAgLy8gJ00xNSwyNiBsMTAsLTEwJyxcclxuICAnTTE2LDI2IGwxMCwtMTAnLFxyXG4gIC8vICdNMjMsMjYgbDIsLTInLFxyXG4gICdNMjQsMjYgbDIsLTInLFxyXG5cclxuICAnTTE0LDMgbDQsLTQnLFxyXG4gICdNMTgsNyBsOCwtOCcsXHJcbiAgJ00yMiwxMSBsNCwtNCcsXHJcblxyXG4gICdNMiwxMSBsMTMsMTMnLFxyXG4gICdNNiw3IGwxMywxMycsXHJcbiAgJ00xMCwzIGwxMywxMycsXHJcbl07XHJcbmZvciAoY29uc3QgZCBvZiBoYXRjaERzKSB7XHJcbiAgaGF0Y2hQYXRoLnNldEF0dHJpYnV0ZSgnZCcsIGQpO1xyXG4gIGhhdGNoUGF0dGVybi5hcHBlbmRDaGlsZChoYXRjaFBhdGgpO1xyXG4gIGhhdGNoUGF0aCA9IGhhdGNoUGF0aC5jbG9uZU5vZGUoKSBhcyBTVkdQYXRoRWxlbWVudFxyXG59XHJcblxyXG5leHBvcnQgY2xhc3MgU3ZnUmVuZGVyZXIgaW1wbGVtZW50cyBQb2xwbG90UmVuZGVyZXIge1xyXG4gIHJlYWRvbmx5IHN2ZyA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnc3ZnJyk7XHJcbiAgcHJpdmF0ZSBwb2ludENvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgcG9seWdvbkNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgbGluZUNvbnRhaW5lciA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG4gIHByaXZhdGUgc3VydmV5Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbiAgcHJpdmF0ZSBzdmdHQnlMaW5lID0gbmV3IE1hcDxMaW5lLCBTVkdHRWxlbWVudD4oKTtcclxuICBwcml2YXRlIHN2Z1BhdGhCeVBvbHlnb24gPSBuZXcgTWFwPFBvbHlnb24sIFNWR1BhdGhFbGVtZW50PigpO1xyXG4gIHByaXZhdGUgc3ZnR0J5UG9pbnQgPSBuZXcgTWFwPFZlY3RvcjIsIFNWR0dFbGVtZW50PigpO1xyXG4gIHByaXZhdGUgaGFuZGxlcnM6IFJlY29yZDxzdHJpbmcsIChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZD4gPSB7fTtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKGhhdGNoUGF0dGVybik7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnBvbHlnb25Db250YWluZXIpO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5saW5lQ29udGFpbmVyKTtcclxuICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMucG9pbnRDb250YWluZXIpO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5zdXJ2ZXlDb250YWluZXIpO1xyXG4gIH1cclxuICBwcml2YXRlIF9zZXRFdmVudEhhbmRsZXIoZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tldmVudF0pIHtcclxuICAgICAgdGhpcy5zdmcucmVtb3ZlRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5oYW5kbGVyc1tldmVudF0pO1xyXG4gICAgfVxyXG4gICAgdGhpcy5oYW5kbGVyc1tldmVudF0gPSBoYW5kbGVyO1xyXG4gICAgdGhpcy5zdmcuYWRkRXZlbnRMaXN0ZW5lcihldmVudCwgdGhpcy5oYW5kbGVyc1tldmVudF0pO1xyXG4gIH1cclxuICBzZXRNb3VzZURvd25IYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKCdtb3VzZWRvd24nLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0TW91c2VVcEhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIoJ21vdXNldXAnLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0TW91c2VNb3ZlSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcignbW91c2Vtb3ZlJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIGRyYXdMaW5lKGxpbmU6IExpbmUsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbGV0IHN2Z0c6IFNWR0dFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLnN2Z0dCeUxpbmUuaGFzKGxpbmUpKSB7XHJcbiAgICAgIHN2Z0cgPSBnVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgICB0aGlzLmxpbmVDb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnRyk7XHJcbiAgICAgIHRoaXMuc3ZnR0J5TGluZS5zZXQobGluZSwgc3ZnRyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdmdHID0gdGhpcy5zdmdHQnlMaW5lLmdldChsaW5lKTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN2Z0xpbmUgPSBzdmdHLmNoaWxkcmVuWzBdIGFzIFNWR0xpbmVFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnUGF0aEFuY2hvclN0YXJ0ID0gc3ZnRy5jaGlsZHJlblsxXSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1BhdGhBbmNob3JFbmQgPSBzdmdHLmNoaWxkcmVuWzJdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgY29uc3Qgc3ZnVGV4dFN0YXJ0ID0gc3ZnRy5jaGlsZHJlblszXSBhcyBTVkdUZXh0RWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1RleHRFbmQgPSBzdmdHLmNoaWxkcmVuWzRdIGFzIFNWR1RleHRFbGVtZW50O1xyXG4gICAgY29uc3QgeDEgPSBsaW5lLngxLnRvRml4ZWQoKTtcclxuICAgIGNvbnN0IHkxID0gbGluZS55MS50b0ZpeGVkKCk7XHJcbiAgICBjb25zdCB4MiA9IGxpbmUueDIudG9GaXhlZCgpO1xyXG4gICAgY29uc3QgeTIgPSBsaW5lLnkyLnRvRml4ZWQoKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MScsIHgxKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd5MScsIHkxKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MicsIHgyKTtcclxuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd5MicsIHkyKTtcclxuICAgIHN2Z1RleHRTdGFydC5pbm5lckhUTUwgPSBuYW1lO1xyXG4gICAgc3ZnVGV4dEVuZC5pbm5lckhUTUwgPSBuYW1lO1xyXG4gICAgY29uc3QgYW5nbGUgPSAxODAgKiAobGluZS52Mi5zdWIobGluZS52MSkuYW5nbGUoKSAtIE1hdGguUEkgLyAyKSAvIE1hdGguUEk7XHJcbiAgICBjb25zdCBiZWZvcmUgPSBsaW5lLmJlZm9yZSgxNCk7XHJcbiAgICBjb25zdCBhZnRlciA9IGxpbmUuYWZ0ZXIoMTQpO1xyXG4gICAgc3ZnUGF0aEFuY2hvclN0YXJ0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3gxfSwgJHt5MX0pIHJvdGF0ZSgke2lzTmFOKGFuZ2xlKSA/IDAgOiBhbmdsZX0pYCk7XHJcbiAgICBzdmdQYXRoQW5jaG9yRW5kLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3gyfSwgJHt5Mn0pIHJvdGF0ZSgke2lzTmFOKGFuZ2xlKSA/IDAgOiAxODAgKyBhbmdsZX0pYCk7XHJcbiAgICBzdmdUZXh0U3RhcnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7aXNOYU4oYmVmb3JlLngpID8geDEgOiBiZWZvcmUueC50b0ZpeGVkKCl9LCAke2lzTmFOKGJlZm9yZS55KSA/IHkxIDogYmVmb3JlLnkudG9GaXhlZCgpfSlgKTtcclxuICAgIHN2Z1RleHRFbmQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7aXNOYU4oYWZ0ZXIueCkgPyB4MiA6IGFmdGVyLngudG9GaXhlZCgpfSwgJHtpc05hTihhZnRlci55KSA/IHkyIDogYWZ0ZXIueS50b0ZpeGVkKCl9KWApO1xyXG4gIH1cclxuICBlcmFzZUxpbmUobGluZTogTGluZSk6IHZvaWQge1xyXG4gICAgY29uc3Qgc3ZnRyA9IHRoaXMuc3ZnR0J5TGluZS5nZXQobGluZSk7XHJcbiAgICBpZiAoc3ZnRykge1xyXG4gICAgICB0aGlzLmxpbmVDb250YWluZXIucmVtb3ZlQ2hpbGQoc3ZnRyk7XHJcbiAgICAgIHRoaXMuc3ZnR0J5TGluZS5kZWxldGUobGluZSk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGRyYXdQb2ludChwb2ludDogVmVjdG9yMiwgbmFtZTogc3RyaW5nKTogdm9pZCB7XHJcbiAgICBsZXQgc3ZnRzogU1ZHR0VsZW1lbnQ7XHJcbiAgICBpZiAoIXRoaXMuc3ZnR0J5UG9pbnQuaGFzKHBvaW50KSkge1xyXG4gICAgICBzdmdHID0gZ1BvaW50VGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xyXG4gICAgICB0aGlzLnBvaW50Q29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z0cpO1xyXG4gICAgICB0aGlzLnN2Z0dCeVBvaW50LnNldChwb2ludCwgc3ZnRyk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICBzdmdHID0gdGhpcy5zdmdHQnlQb2ludC5nZXQocG9pbnQpO1xyXG4gICAgfVxyXG4gICAgY29uc3Qgc3ZnVGV4dCA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHVGV4dEVsZW1lbnQ7XHJcbiAgICBzdmdHLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3BvaW50LngudG9GaXhlZCgpfSwgJHtwb2ludC55LnRvRml4ZWQoKX0pYCk7XHJcbiAgICBzdmdUZXh0LmlubmVySFRNTCA9IG5hbWU7XHJcbiAgfVxyXG4gIHByaXZhdGUgY2xlYXJDb250YWluZXIoY29udGFpbmVyOiBTVkdHRWxlbWVudCk6IHZvaWQge1xyXG4gICAgd2hpbGUgKGNvbnRhaW5lci5maXJzdENoaWxkKSB7XHJcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNsZWFySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5wb2ludENvbnRhaW5lcik7XHJcbiAgfVxyXG4gIGRyYXdQb2x5Z29uKHBvbHlnb246IFBvbHlnb24sIGZpbGwgPSAnIycgKyAoTWF0aC5mbG9vcigoMTY3NzcyMTUgLSAxZTUpICogTWF0aC5yYW5kb20oKSkgKyAxZTUpLnRvU3RyaW5nKDE2KSk6IHZvaWQge1xyXG4gICAgbGV0IHN2Z1BhdGg6IFNWR1BhdGhFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLnN2Z1BhdGhCeVBvbHlnb24uaGFzKHBvbHlnb24pKSB7XHJcbiAgICAgIHN2Z1BhdGggPSBwb2x5Z29uVGVtcGxhdGUuY2xvbmVOb2RlKCkgYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICAgIHRoaXMucG9seWdvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdQYXRoKTtcclxuICAgICAgdGhpcy5zdmdQYXRoQnlQb2x5Z29uLnNldChwb2x5Z29uLCBzdmdQYXRoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN2Z1BhdGggPSB0aGlzLnN2Z1BhdGhCeVBvbHlnb24uZ2V0KHBvbHlnb24pO1xyXG4gICAgfVxyXG4gICAgc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCAnTSAnICsgcG9seWdvbi52ZXJ0aWNlcy5tYXAodiA9PiBgJHt2LngudG9GaXhlZCgpfSAke3YueS50b0ZpeGVkKCl9YCkuam9pbignIEwgJykgKyAnIFonKTtcclxuICAgIHN2Z1BhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgZmlsbCk7XHJcbiAgfVxyXG4gIGNsZWFyUG9seWdvbnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMucG9seWdvbkNvbnRhaW5lcik7XHJcbiAgfVxyXG5cclxuICBkcmF3U3VydmV5KHN1cnZleTogU3VydmV5KTogdm9pZCB7XHJcbiAgICBjb25zdCBXSURUSCA9IDIwMDtcclxuICAgIGNvbnN0IFRISUNLTkVTUyA9IDEwO1xyXG4gICAgY29uc3QgRElBTUVURVIgPSA1MDtcclxuICAgIGNvbnN0IGQgPSBgTSAkeygtV0lEVEggLyAyKS50b0ZpeGVkKCl9LCAwIGAgK1xyXG4gICAgICBgaCAkeygoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAke3N1cnZleS5kZXB0aC50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAke0RJQU1FVEVSLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGB2ICR7LXN1cnZleS5kZXB0aC50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAkeygoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9YDtcclxuICAgIGNvbnN0IGRCb3R0b20gPSBkICsgJyAnICtcclxuICAgICAgYHYgJHtUSElDS05FU1MudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoVEhJQ0tORVNTIC0gKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfSBgICtcclxuICAgICAgYHYgJHtzdXJ2ZXkuZGVwdGgudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoLSgyICogVEhJQ0tORVNTICsgRElBTUVURVIpKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAkey1zdXJ2ZXkuZGVwdGgudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoVEhJQ0tORVNTIC0gKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfSBaYDtcclxuXHJcbiAgICBjb25zdCBzdmdHID0gZ1N1cnZleVRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdHRWxlbWVudDtcclxuICAgIGNvbnN0IGJvdHRvbVBvbHlnb24gPSBzdmdHLmNoaWxkcmVuWzBdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgY29uc3QgdG9wUG9seWdvbiA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBib3R0b21Qb2x5Z29uLnNldEF0dHJpYnV0ZSgnZCcsIGRCb3R0b20pO1xyXG4gICAgdG9wUG9seWdvbi5zZXRBdHRyaWJ1dGUoJ2QnLCBkKTtcclxuICAgIHRoaXMuc3VydmV5Q29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z0cpO1xyXG4gIH1cclxuICBjbGVhclN1cnZleSgpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5zdXJ2ZXlDb250YWluZXIpO1xyXG4gIH1cclxufSIsImltcG9ydCB7IFBvbHBsb3QgfSBmcm9tIFwiLi9wb2xwbG90XCI7XHJcbmltcG9ydCB7IFN2Z1JlbmRlcmVyIH0gZnJvbSBcIi4vc3ZnLXJlbmRlcmVyXCI7XHJcblxyXG5jb25zdCBzdmdSZW5kZXJlciA9IG5ldyBTdmdSZW5kZXJlcigpO1xyXG5jb25zdCBwb2xwbG90ID0gbmV3IFBvbHBsb3Qoc3ZnUmVuZGVyZXIpO1xyXG5jb25zdCBib2R5ID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignYm9keScpO1xyXG5ib2R5LmFwcGVuZENoaWxkKHN2Z1JlbmRlcmVyLnN2Zyk7Il0sInNvdXJjZVJvb3QiOiIifQ==