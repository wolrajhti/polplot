(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.len2Raw=function(t,e){return Math.pow(t,2)+Math.pow(e,2)},t.len2=function(t){return this.len2Raw(t.x,t.y)},t.prototype.len2=function(){return t.len2(this)},t.lenRaw=function(t,e){return Math.sqrt(this.len2Raw(t,e))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return t===n&&e===i},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,a,u){var d=this.crossRaw(i-e,r-n,a-o,u-s);return new t(this.crossRaw(a-o,u-s,e-o,n-s)/d,this.crossRaw(i-e,r-n,e-o,n-s)/d)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,a){var u=this.intersectionTimesRaw(t,e,n,i,r,o,s,a);if(u)return u.y=e+(i-e)*u.x,u.x=t+(n-t)*u.x,u},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return e.fromVectors=function(t,n){var i=new e;return i.v1=t,i.v2=n,i},Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e.prototype.nearestTo=function(e){if(this.v1.equals(this.v2))return new t(this.v1.x,this.v1.y);var n=this.v2.sub(this.v1),i=n.dot(e.sub(this.v1))/n.len2();return this.pointAt(Math.max(0,Math.min(i,1)))},e}(),n=function(t,e){this.type=t,this.depth=e},i=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.contains=function(t){for(var e=!1,n=0,i=this.vertices.length-1;n<this.vertices.length;i=n++)this.vertices[n].y>t.y!=this.vertices[i].y>t.y&&t.x<(this.vertices[i].x-this.vertices[n].x)*(t.y-this.vertices[n].y)/(this.vertices[i].y-this.vertices[n].y)+this.vertices[n].x&&(e=!e);return e},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.edgeCount=function(){return this.vertices.length>1?this.vertices.length:0},t.prototype.edges=function(){var t=this;return this.vertices.length>1?this.vertices.map((function(n,i){return e.fromVectors(t.vertices[i],t.vertices[i<t.vertices.length-1?i+1:0])})):[]},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),r=function(){function t(t,e,n){this.coordinates=t,this.lithology=e,this.polygon=n}return t.prototype.depth=function(){return this.lithology.reduce((function(t,e){return t+e.depth}),0)},t.prototype.quantities=function(){var t=new Map;if(this.polygon){var e=this.polygon.area();this.lithology.forEach((function(n){var i=t.get(n.type)||0;t.set(n.type,i+Math.round(e*n.depth))}))}return t},t}(),o=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,a=o.length;s<a;s++,r++)i[r]=o[s];return i},s=function(){function s(n){var r=this;this.renderer=n,this.axes=[],this.contour=new i,this.intersectionTimes=[],this.intersections=[],this.intersectionIndex=[],this.polygons=[],this.surveys=[],this.quantities=new Map,this.mode=0,document.addEventListener("keyup",(function(t){"s"===t.key?(r.mode=2,document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-surveys").classList.add("selected")):"c"===t.key?(r.mode=0,r.renderer.clearSurvey(),document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-contour").classList.add("selected")):"a"===t.key?(r.mode=1,r.renderer.clearSurvey(),document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),document.querySelector("#edit-axes").classList.add("selected")):"Escape"===t.key&&r.renderer.clearSurvey()})),document.querySelector("#edit-contour").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=0,r.renderer.clearSurvey()})),document.querySelector("#edit-axes").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=1,r.renderer.clearSurvey()})),document.querySelector("#edit-surveys").addEventListener("click",(function(t){document.querySelectorAll(".button").forEach((function(t){return t.classList.remove("selected")})),t.target.classList.add("selected"),r.mode=2})),this.updateQuantities();var o,s,a,u,d=-1,l=-1;this.renderer.setMouseDownHandler((function(n){if(!n.button){var i=new t(n.clientX,n.clientY);1===r.mode||0===r.mode?-1===(d=r.nearestLineIndexFrom(i,20,1===r.mode?r.axes:r.contour.edges()))?1===r.mode?(r.addLine(new e(i.x,i.y,i.x,i.y)),d=r.lines.length-1,o=r.lines[d].v2):0===r.mode&&(r.addContour(new e(i.x,i.y,i.x,i.y)),d=0,o=r.lines[d].v1):(1===r.mode&&(d+=r.contour.edgeCount()),i.sub(r.lines[d].v1).len()<20?o=r.lines[d].v1:i.sub(r.lines[d].v2).len()<20&&(o=r.lines[d].v2)):2===r.mode&&-1===(l=r.nearestSurveyIndexFrom(i,20))&&(r.addSurvey(i),l=r.surveys.length-1)}})),this.renderer.setMouseUpHandler((function(t){t.button||(1===r.mode||0===r.mode?(d=-1,o=null):2===r.mode&&(-1!==l?(s=r.surveys[l],r.renderer.drawSurvey(s)):s=null,l=-1))})),this.renderer.setMouseMoveHandler((function(e){if(!e.button)if(1===r.mode||0===r.mode)(o||-1!==d)&&(o?(o.x+=e.movementX,o.y+=e.movementY):r.lines[d].update(e.movementX,e.movementY,e.movementX,e.movementY),r.updateIntersectionTimes(d),1===r.mode?r.renderer.drawLine(r.axes[d-r.contour.edgeCount()],(d-r.contour.edgeCount()).toString()):(d===r.contour.edgeCount()-1?(r.updateIntersectionTimes(d-1),r.updateIntersectionTimes(0)):0===d?(r.updateIntersectionTimes(r.contour.edgeCount()-1),r.updateIntersectionTimes(1)):(r.updateIntersectionTimes(d-1),r.updateIntersectionTimes(d+1)),r.renderer.drawContour(r.contour)));else if(2===r.mode){-1!==l&&(r.surveys[l].coordinates.x+=e.movementX,r.surveys[l].coordinates.y+=e.movementY,r.updateSurvey(r.surveys[l]));for(var n=new t(e.clientX,e.clientY),i=!1,s=a,u=0,c=r.polygons;u<c.length;u++){var h=c[u];if(h.contains(n)){h!==a&&(r.renderer.drawPolygon(h,"red"),a=h),i=!0;break}}i||(a=null),s&&s!==a&&r.renderer.drawPolygon(s,"white")}})),this.renderer.setSidebarMouseDownHandler((function(e){if(!e.button&&s)for(var n=new t(e.offsetX,e.offsetY),r=new t(300,100),o=0,a=s.lithology;o<a.length;o++){var d=a[o],l=new i([r.add(new t(-25,0)),r.add(new t(25,0)),r.add(new t(25,d.depth)),r.add(new t(-25,d.depth))]);if(r.y+=d.depth,l.contains(n)){u=d;break}}})),this.renderer.setSidebarMouseUpHandler((function(t){t.button||(u=null)})),this.renderer.setSidebarMouseMoveHandler((function(t){t.button||u&&(u.depth+=t.movementY,r.renderer.drawSurvey(s),r.updateQuantities())})),this.renderer.lithoChangeHandler=function(){r.updateQuantities()}}return Object.defineProperty(s.prototype,"lines",{get:function(){return this.contour.edges().concat(this.axes)},enumerable:!1,configurable:!0}),s.prototype.nearestLineIndexFrom=function(t,e,n){void 0===e&&(e=1/0),void 0===n&&(n=this.lines);for(var i,r=-1,o=1/0,s=0;s<n.length;s++)(i=n[s].nearestTo(t).sub(t).len())<e&&i<o&&(o=i,r=s);return r},s.prototype.nearestSurveyIndexFrom=function(t,e){void 0===e&&(e=1/0);for(var n,i=-1,r=1/0,o=0;o<this.surveys.length;o++)(n=this.surveys[o].coordinates.sub(t).len())<e&&n<r&&(r=n,i=o);return i},s.prototype.addSurvey=function(t){for(var e,i=0,o=this.polygons;i<o.length;i++){var s=o[i];if(s.contains(t)){e=s;break}}var a=new r(t,[new n("non identifié",50),new n("non identifié",50),new n("non identifié",50)],e);this.surveys.push(a),this.renderer.drawPoint(t,e?(e.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateSurvey=function(t){t.polygon=null;for(var e=0,n=this.polygons;e<n.length;e++){var i=n[e];if(i.contains(t.coordinates)){t.polygon=i;break}}this.renderer.drawPoint(t.coordinates,t.polygon?(t.polygon.area()/100).toFixed(2)+" m2":""),this.updateQuantities()},s.prototype.updateQuantities=function(){var t=this;this.quantities.clear(),this.surveys.forEach((function(e){e.quantities().forEach((function(e,n){t.quantities.set(n,(t.quantities.get(n)||0)+e)}))})),this.renderer.drawQuantities(this.quantities)},s.prototype.initIntersectionData=function(e,n,i,r,o){void 0===e&&(e=this.lines.length),void 0===n&&(n=this.lines.length),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s=[],a=[],u=0;u<n;u++)i[u].splice(e,0,NaN),r.push(new t),o[u].splice(e,0,r.length-1),s.push(NaN),a.push(r.length-1);s.splice(e,0,NaN),a.splice(e,0,-1),i.splice(e,0,s),o.splice(e,0,a)},s.prototype.addLine=function(t){var e=this.lines.length;this.initIntersectionData(e,e),this.axes.push(t),this.renderer.drawLine(t,e.toString()),this.updateIntersectionTimes(e)},s.prototype.addContour=function(t){var e=this.contour.edgeCount(),n=e+this.axes.length;this.initIntersectionData(0,n++),this.initIntersectionData(0,n++),this.contour.vertices.splice(0,0,t.v1,t.v2),this.renderer.drawContour(this.contour);var i=this.lines;0===e?(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i)):(this.updateIntersectionTimes(0,i,!0),this.updateIntersectionTimes(1,i,!0),this.updateIntersectionTimes(n-1,i))},s.prototype.updateIntersectionTimes=function(t,e,n,i,r,o){void 0===e&&(e=this.lines),void 0===n&&(n=!1),void 0===i&&(i=this.intersectionTimes),void 0===r&&(r=this.intersections),void 0===o&&(o=this.intersectionIndex);for(var s,a=e[t],u=0;u<e.length;u++)u!==t&&(s=e[u].intersectionTimesWith(a),i[u][t]=s.x,i[t][u]=s.y,u<t?r[o[u][t]]=e[u].pointAt(s.x):r[o[t][u]]=e[u].pointAt(s.x));n||this.renderIntersections()},s.prototype.renderIntersections=function(){var t=this;this.renderer.clearPolygons(),this.polygons=[];var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonIndexesFromPartials(e).map((function(e){return new i(e.map((function(e){return t.intersections[e]})))})).forEach((function(e){e.area()>0&&(t.polygons.push(e),t.renderer.drawPolygon(e,"white"))})),this.surveys.forEach((function(e){return t.updateSurvey(e)}))},s.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},s.prototype.partialsOverlaps=function(t,e){return t[t.length-2]===e[0]&&t[t.length-1]===e[1]?2:0},s.prototype.partialsMeet=function(t,e){return t[t.length-1]===e[0]?1:0},s.prototype.buildPartialsFromIntersectionIndexes=function(t,e){for(var n=[],i=0;i<e.length;i++)if("number"==typeof e[i]){var r=i+1;for(r===e.length&&(r=0);"number"!=typeof e[r];)++r===e.length&&(r=0);i!==r&&n.push([e[i],t,e[r]])}return n},s.prototype.buildPartialsFromIntersectionTimes=function(t,e,n){var i=this;void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),void 0===n&&(n=this.intersectionIndex);for(var r=this.contour.edgeCount(),o=e.map((function(t,o){return t.map((function(t,e){return e})).filter((function(s){return!isNaN(t[s])&&0<=t[s]&&t[s]<=1&&!isNaN(e[s][o])&&0<=e[s][o]&&e[s][o]<=1&&(o<r||s<r||i.contour.contains(i.intersections[n[o][s]]))})).sort((function(e,n){return t[e]-t[n]}))})),s=[],a=function(e){for(var i=0;i<o[e].length;i++){var r=o[e][i];if(e<r){var a=n[e][o[e][i]],d=i-1,l=i+1,c=o[r].findIndex((function(t){return t===e})),h=u.testSide(t[e].v1,t[e].v2,t[r].v1),p=h?c-1:c+1,v=h?c+1:c-1,y=0<i?n[e][o[e][d]]:null,f=i<o[e].length-1?n[e][o[e][l]]:null,g=-1<p&&p<o[r].length?n[r][o[r][p]]:null,m=-1<v&&v<o[r].length?n[r][o[r][v]]:null,w=u.buildPartialsFromIntersectionIndexes(a,[y,m,f,g]);s.push.apply(s,w)}}},u=this,d=0;d<o.length;d++)a(d);return s},s.prototype.buildPolygonIndexesFromPartials=function(t){for(var e,n,i=[],r=0;r<t.length;){for(var s=0;s<t.length;s++)if(r!==s&&this.partialsOverlaps(t[r],t[s])){(e=t[r]).splice.apply(e,o([-2,2],t[s])),t.splice(s,1),s<r&&r--,(n=this.partialsOverlaps(t[r],t[r])||this.partialsMeet(t[r],t[r]))>0&&(t[r].splice(0,n),i.push(t[r]),t.splice(r,1)),r=-1;break}r++}return i},s}(),a=document.createElementNS("http://www.w3.org/2000/svg","g");a.setAttribute("stroke","black"),a.setAttribute("stroke-width","0.4px");var u=document.createElementNS("http://www.w3.org/2000/svg","line");u.setAttribute("stroke-dasharray","10, 4, 1, 4");var d=document.createElementNS("http://www.w3.org/2000/svg","path");d.setAttribute("d","M 0, 0 A 10, 10, 0, 0, 0, -5, -5 A 10, 10, 0, 1, 1, 5, -5 A 10, 10, 0, 0, 0, 0, 0"),d.setAttribute("fill","white");var l=document.createElementNS("http://www.w3.org/2000/svg","text");l.setAttribute("text-anchor","middle"),l.setAttribute("alignment-baseline","central"),l.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),l.setAttribute("font-weight","100"),l.setAttribute("font-size","14px"),a.appendChild(u),a.appendChild(d),a.appendChild(d.cloneNode()),a.appendChild(l),a.appendChild(l.cloneNode());var c=document.createElementNS("http://www.w3.org/2000/svg","g");c.setAttribute("stroke","black"),c.setAttribute("stroke-width","0.4px");var h=document.createElementNS("http://www.w3.org/2000/svg","circle");h.setAttribute("fill","green"),h.setAttribute("r","3");var p=document.createElementNS("http://www.w3.org/2000/svg","text");p.setAttribute("transform","translate(0, 10)"),p.setAttribute("text-anchor","middle"),p.setAttribute("alignment-baseline","hanging"),p.setAttribute("font-family",'consolas, "Liberation Mono", courier, monospace'),p.setAttribute("font-weight","100"),p.setAttribute("font-size","14px"),p.setAttribute("font-style","italic"),c.appendChild(h),c.appendChild(p);var v=document.createElementNS("http://www.w3.org/2000/svg","path");v.setAttribute("fill","green"),v.setAttribute("fill-opacity","0.7"),v.setAttribute("stroke-width","0.8px"),v.setAttribute("stroke-dasharray","5, 2"),v.setAttribute("stroke","black");var y=document.createElementNS("http://www.w3.org/2000/svg","g");y.setAttribute("transform","translate(300, 100)");var f=document.createElementNS("http://www.w3.org/2000/svg","path");f.setAttribute("fill","url(#earth-hatch)"),f.setAttribute("stroke-width","0");var g=document.createElementNS("http://www.w3.org/2000/svg","path");g.setAttribute("fill-opacity","0"),g.setAttribute("stroke","black"),g.setAttribute("stroke-width","0.8px");var m=document.createElementNS("http://www.w3.org/2000/svg","g");y.appendChild(m),y.appendChild(f),y.appendChild(g);var w=document.createElementNS("http://www.w3.org/2000/svg","rect"),b=document.createElementNS("http://www.w3.org/2000/svg","pattern");b.id="earth-hatch",b.setAttribute("patternUnits","userSpaceOnUse"),b.setAttribute("width","25"),b.setAttribute("height","25"),b.setAttribute("stroke","#222d32"),b.setAttribute("stroke-width","0.4px");for(var x=document.createElementNS("http://www.w3.org/2000/svg","path"),C=0,A=["M-1,1 l2,-2","M-1,9 l10,-10","M-1,18 l4,-4","M-1,26 l8,-8","M7,26 l4,-4","M16,26 l10,-10","M24,26 l2,-2","M14,3 l4,-4","M18,7 l8,-8","M22,11 l4,-4","M2,11 l13,13","M6,7 l13,13","M10,3 l13,13"];C<A.length;C++){var S=A[C];x.setAttribute("d",S),b.appendChild(x),x=x.cloneNode()}var M=document.createElement("select");M.style.position="absolute",M.style.transform="translateY(-49%)",M.style.left="24px";for(var N=document.createElement("option"),E=["non identifié","argile","calcaire"],L=new Map([[E[0],"#fde312"],[E[1],"#289fde"],[E[2],"#abfe12"]]),F=0,I=E;F<I.length;F++){var P=I[F];N.innerHTML=P,N.setAttribute("value",P),M.appendChild(N),N=N.cloneNode()}var T=document.createElement("p");T.style.borderLeftWidth="14px",T.style.fontFamily='consolas, "Liberation Mono", courier, monospace',T.style.fontWeight="100",T.style.fontSize="14px",T.style.height="14px",T.style.paddingLeft="8px";var q=document.createElementNS("http://www.w3.org/2000/svg","path");q.setAttribute("fill","#0005"),new s(new(function(){function t(){this.selectContainer=document.createElement("div"),this.pointContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.lineContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.surveyContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.svgPathByPolygon=new Map,this.svgGByPoint=new Map,this.handlers={},this.svgContourPath=q.cloneNode(),this.svg=document.querySelector(".content"),this.sidebarDiv=document.querySelector(".sidebar"),this.sidebarSvg=document.querySelector(".sidebar > svg"),this.svg.prepend(this.svgContourPath),this.svg.appendChild(b),this.svg.appendChild(this.polygonContainer),this.svg.appendChild(this.lineContainer),this.svg.appendChild(this.pointContainer),this.quantitiesContainer=document.querySelector(".quantities"),this.sidebarSvg.appendChild(this.surveyContainer),this.sidebarDiv.appendChild(this.selectContainer)}return t.prototype._setEventHandler=function(t,e,n){this.handlers[e]&&t.removeEventListener(e,this.handlers[e]),this.handlers[e]=n,t.addEventListener(e,this.handlers[e])},t.prototype.setMouseDownHandler=function(t){this._setEventHandler(this.svg,"mousedown",t)},t.prototype.setMouseUpHandler=function(t){this._setEventHandler(this.svg,"mouseup",t)},t.prototype.setMouseMoveHandler=function(t){this._setEventHandler(this.svg,"mousemove",t)},t.prototype.setSidebarMouseDownHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousedown",t)},t.prototype.setSidebarMouseUpHandler=function(t){this._setEventHandler(this.sidebarSvg,"mouseup",t)},t.prototype.setSidebarMouseMoveHandler=function(t){this._setEventHandler(this.sidebarSvg,"mousemove",t)},t.prototype.drawLine=function(t,e){var n;this.svgGByLine.has(t)?n=this.svgGByLine.get(t):(n=a.cloneNode(!0),this.lineContainer.appendChild(n),this.svgGByLine.set(t,n));var i=n.children[0],r=n.children[1],o=n.children[2],s=n.children[3],u=n.children[4],d=t.x1.toFixed(),l=t.y1.toFixed(),c=t.x2.toFixed(),h=t.y2.toFixed();i.setAttribute("x1",d),i.setAttribute("y1",l),i.setAttribute("x2",c),i.setAttribute("y2",h),s.innerHTML=e,u.innerHTML=e;var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI,v=t.before(14),y=t.after(14);r.setAttribute("transform","translate("+d+", "+l+") rotate("+(isNaN(p)?0:p)+")"),o.setAttribute("transform","translate("+c+", "+h+") rotate("+(isNaN(p)?0:180+p)+")"),s.setAttribute("transform","translate("+(isNaN(v.x)?d:v.x.toFixed())+", "+(isNaN(v.y)?l:v.y.toFixed())+")"),u.setAttribute("transform","translate("+(isNaN(y.x)?c:y.x.toFixed())+", "+(isNaN(y.y)?h:y.y.toFixed())+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.lineContainer.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t,e){var n;this.svgGByPoint.has(t)?n=this.svgGByPoint.get(t):(n=c.cloneNode(!0),this.pointContainer.appendChild(n),this.svgGByPoint.set(t,n));var i=n.children[1];n.setAttribute("transform","translate("+t.x.toFixed()+", "+t.y.toFixed()+")"),i.innerHTML=e},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.pointContainer)},t.prototype.drawPolygon=function(t,e){var n;void 0===e&&(e="#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.svgPathByPolygon.has(t)?n=this.svgPathByPolygon.get(t):(n=v.cloneNode(),this.polygonContainer.appendChild(n),this.svgPathByPolygon.set(t,n)),n.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z"),n.setAttribute("fill",e)},t.prototype.drawContour=function(t){this.svgContourPath.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+" Z")},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t.prototype.drawSurvey=function(t){var e=this;this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer);var n="M "+(-100).toFixed()+", 0 h "+75..toFixed()+" v "+t.depth().toFixed()+" h "+50..toFixed()+" v "+-t.depth().toFixed()+" h "+75..toFixed(),i=n+" v "+10..toFixed()+" h "+(-65).toFixed()+" v "+t.depth().toFixed()+" h "+(-70).toFixed()+" v "+-t.depth().toFixed()+" h "+(-65).toFixed()+" Z",r=y.cloneNode(!0),o=r.children[0],s=r.children[1],a=r.children[2];s.setAttribute("d",i),a.setAttribute("d",n);for(var u=0,d=function(n){var i=w.cloneNode();i.setAttribute("x",(-25).toFixed()),i.setAttribute("y",u.toFixed()),i.setAttribute("width",50..toFixed()),i.setAttribute("height",t.lithology[n].depth.toFixed()),i.setAttribute("fill",L.get(t.lithology[n].type)),o.appendChild(i);var r=M.cloneNode(!0);r.querySelector('option[value="'+t.lithology[n].type+'"]').setAttribute("selected","selected"),r.addEventListener("change",(function(o){t.lithology[n].type=r.value,i.setAttribute("fill",L.get(r.value)),e.lithoChangeHandler()})),r.style.top=(u+100+t.lithology[n].depth/2).toFixed()+"px",l.selectContainer.appendChild(r),u+=t.lithology[n].depth},l=this,c=0;c<t.lithology.length;c++)d(c);this.surveyContainer.appendChild(r),this.sidebarDiv.classList.add("visible")},t.prototype.clearSurvey=function(){this.sidebarDiv.classList.remove("visible"),this.clearContainer(this.surveyContainer),this.clearContainer(this.selectContainer)},t.prototype.drawQuantities=function(t){var e=this;this.clearContainer(this.quantitiesContainer);var n=T.cloneNode();n.innerHTML="Volumes :",n.style.fontStyle="bold",n.style.textDecoration="underline",this.quantitiesContainer.appendChild(n),t.forEach((function(t,n){var i=T.cloneNode();i.innerHTML=n+" ("+(t/5e3).toFixed(2)+" m³)",i.style.borderLeft="8px solid "+L.get(n),e.quantitiesContainer.appendChild(i)}))},t}()))})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9saW5lLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvbGl0aG9sb2dpY2FsLWxheWVyLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvcG9seWdvbi50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3N1cnZleS50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3BvbHBsb3QudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9zdmctcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ4IiwieSIsImRvdFJhdyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG90IiwidSIsInYiLCJ0aGlzIiwib3RoZXIiLCJWZWN0b3IyIiwiY3Jvc3NSYXciLCJjcm9zcyIsImxlbjJSYXciLCJNYXRoIiwicG93IiwibGVuMiIsImxlblJhdyIsInNxcnQiLCJsZW4iLCJub3JtYWxpemVSYXciLCJieSIsImNvZWYiLCJtdWxSYXciLCJub3JtYWxpemUiLCJlcXVhbHNSYXciLCJlcXVhbHMiLCJhZGRSYXciLCJhZGQiLCJzdWJSYXciLCJzdWIiLCJtdWwiLCJpbnRlcnNlY3Rpb25UaW1lc1JhdyIsImZ4IiwiZnkiLCJ0eCIsInR5Iiwic3giLCJzeSIsImV4IiwiZXkiLCJkZXQiLCJpbnRlcnNlY3Rpb25UaW1lcyIsImZyb20iLCJ0byIsInN0YXJ0IiwiZW5kIiwiaW50ZXJzZWN0aW9uUmF3IiwidGltZXMiLCJpbnRlcnNlY3Rpb24iLCJhbmdsZSIsImExIiwiYTIiLCJQSSIsImFjb3MiLCJ2MSIsInYyIiwiZnJvbVZlY3RvcnMiLCJsaW5lIiwiTGluZSIsInBvaW50QXQiLCJ0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJpbnRlcnNlY3Rpb25UaW1lc1dpdGgiLCJ1cGRhdGUiLCJkeDEiLCJkeTEiLCJkeDIiLCJkeTIiLCJuZWFyZXN0VG8iLCJwIiwibWF4IiwibWluIiwidHlwZSIsImRlcHRoIiwidmVydGljZXMiLCJhcmVhQmV0d2VlbiIsImkiLCJqIiwiYXJlYSIsImEiLCJsZW5ndGgiLCJjb250YWlucyIsImMiLCJyZXZlcnNlIiwiZWRnZUNvdW50IiwiZWRnZXMiLCJtYXAiLCJ0b1N0cmluZyIsInRvRml4ZWQiLCJqb2luIiwiY29vcmRpbmF0ZXMiLCJsaXRob2xvZ3kiLCJwb2x5Z29uIiwicmVkdWNlIiwibGF5ZXIiLCJxdWFudGl0aWVzIiwiTWFwIiwiZm9yRWFjaCIsImxpdGhvbG9naWNhbExheWVyIiwicXVhbnRpdHkiLCJnZXQiLCJzZXQiLCJyb3VuZCIsInJlbmRlcmVyIiwiYXhlcyIsImNvbnRvdXIiLCJQb2x5Z29uIiwiaW50ZXJzZWN0aW9ucyIsImludGVyc2VjdGlvbkluZGV4IiwicG9seWdvbnMiLCJzdXJ2ZXlzIiwibW9kZSIsImRvY3VtZW50IiwiYWRkRXZlbnRMaXN0ZW5lciIsImV2ZW50Iiwia2V5IiwicXVlcnlTZWxlY3RvckFsbCIsImRpdiIsImNsYXNzTGlzdCIsInJlbW92ZSIsInF1ZXJ5U2VsZWN0b3IiLCJjbGVhclN1cnZleSIsInRhcmdldCIsInVwZGF0ZVF1YW50aXRpZXMiLCJkcmFnZ2VkVmVjdG9yMiIsImFjdGl2ZVN1cnZleSIsInBvbHlnb25Db250YWluZXIiLCJkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIiLCJkcmFnZ2VkTGluZUluZGV4IiwiZHJhZ2dlZFN1cnZleUluZGV4Iiwic2V0TW91c2VEb3duSGFuZGxlciIsImJ1dHRvbiIsIm1vdXNlIiwiY2xpZW50WCIsImNsaWVudFkiLCJuZWFyZXN0TGluZUluZGV4RnJvbSIsImFkZExpbmUiLCJsaW5lcyIsImFkZENvbnRvdXIiLCJuZWFyZXN0U3VydmV5SW5kZXhGcm9tIiwiYWRkU3VydmV5Iiwic2V0TW91c2VVcEhhbmRsZXIiLCJkcmF3U3VydmV5Iiwic2V0TW91c2VNb3ZlSGFuZGxlciIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsInVwZGF0ZUludGVyc2VjdGlvblRpbWVzIiwiZHJhd0xpbmUiLCJkcmF3Q29udG91ciIsInVwZGF0ZVN1cnZleSIsImlzSW5zaWRlIiwib2xkUG9seWdvbkNvbnRhaW5lciIsImRyYXdQb2x5Z29uIiwic2V0U2lkZWJhck1vdXNlRG93bkhhbmRsZXIiLCJvZmZzZXRYIiwib2Zmc2V0WSIsIm9mZnNldCIsInNldFNpZGViYXJNb3VzZVVwSGFuZGxlciIsInNldFNpZGViYXJNb3VzZU1vdmVIYW5kbGVyIiwibGl0aG9DaGFuZ2VIYW5kbGVyIiwiY29uY2F0IiwidGhyZXNob2xkIiwiZGlzdCIsIm5lYXJlc3RMaW5lSW5kZXgiLCJuZWFyZXN0RGlzdCIsIm5lYXJlc3RTdXJ2ZXlJbmRleCIsImNvbnRhaW5lciIsInN1cnZleSIsIlN1cnZleSIsIkxpdGhvbG9naWNhbExheWVyIiwicHVzaCIsImRyYXdQb2ludCIsImNsZWFyIiwiZHJhd1F1YW50aXRpZXMiLCJpbml0SW50ZXJzZWN0aW9uRGF0YSIsImF0IiwibGluZUNvdW50IiwibmV3SW50ZXJzZWN0aW9uVGltZXMiLCJuZXdJbnRlcnNlY3Rpb25JbmRleCIsInNwbGljZSIsIk5hTiIsInNraXBSZW5kZXIiLCJyZW5kZXJJbnRlcnNlY3Rpb25zIiwiY2xlYXJQb2x5Z29ucyIsInBhcnRpYWxzIiwiYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyIsImJ1aWxkUG9seWdvbkluZGV4ZXNGcm9tUGFydGlhbHMiLCJwb2x5Z29uSW5kZXgiLCJ0ZXN0U2lkZSIsInciLCJwYXJ0aWFsc092ZXJsYXBzIiwicDEiLCJwMiIsInBhcnRpYWxzTWVldCIsImJ1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uSW5kZXhlcyIsImNlbnRlciIsImluZGV4ZXMiLCJwYXJ0cyIsImludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheSIsImludGVyc2VjdGlvblRpbWVzQXRJIiwiXyIsImZpbHRlciIsImlzTmFOIiwic29ydCIsImxvY2FsSW5kZXgiLCJsb2NhbEludGVySW5kZXgiLCJmb3JlaWduSW5kZXgiLCJpbnRlciIsInByZXZMb2NhbEludGVySW5kZXgiLCJuZXh0TG9jYWxJbnRlckluZGV4IiwiZm9yZWlnbkludGVySW5kZXgiLCJmaW5kSW5kZXgiLCJmb3JlaWduaXNSaWdodFNpZGVkIiwicHJldkZvcmVpZ25JbnRlckluZGV4IiwibmV4dEZvcmVpZ25JbnRlckluZGV4IiwicHJldkxvY2FsSW50ZXIiLCJuZXh0TG9jYWxJbnRlciIsInByZXZGb3JlaWduSW50ZXIiLCJuZXh0Rm9yZWlnbkludGVyIiwib3ZlcmxhcCIsInBvbHlnb25JbmRleGVzIiwiZ1RlbXBsYXRlIiwiY3JlYXRlRWxlbWVudE5TIiwic2V0QXR0cmlidXRlIiwibGluZVRlbXBsYXRlIiwiYW5jaG9yVGVtcGxhdGUiLCJ0ZXh0VGVtcGxhdGUiLCJhcHBlbmRDaGlsZCIsImNsb25lTm9kZSIsImdQb2ludFRlbXBsYXRlIiwicG9pbnRUZW1wbGF0ZSIsInRleHRQb2ludFRlbXBsYXRlIiwicG9seWdvblRlbXBsYXRlIiwiZ1N1cnZleVRlbXBsYXRlIiwic3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlIiwic3VydmV5VG9wUG9seWdvblRlbXBsYXRlIiwic3VydmV5TGl0aG9sb2d5VGVtcGxhdGUiLCJsaXRob2xvZ2ljYWxMYXllclJlY3RUZW1wbGF0ZSIsImhhdGNoUGF0dGVybiIsImlkIiwiaGF0Y2hQYXRoIiwiZCIsInNlbGVjdFRlbXBsYXRlIiwiY3JlYXRlRWxlbWVudCIsInN0eWxlIiwicG9zaXRpb24iLCJ0cmFuc2Zvcm0iLCJsZWZ0Iiwib3B0aW9uVGVtcGxhdGUiLCJ2YWx1ZXMiLCJjb2xvcnMiLCJ2YWx1ZSIsImlubmVySFRNTCIsInBUZW1wbGF0ZSIsImJvcmRlckxlZnRXaWR0aCIsImZvbnRGYW1pbHkiLCJmb250V2VpZ2h0IiwiZm9udFNpemUiLCJoZWlnaHQiLCJwYWRkaW5nTGVmdCIsImNvbnRvdXJUZW1wbGF0ZSIsIlBvbHBsb3QiLCJzZWxlY3RDb250YWluZXIiLCJwb2ludENvbnRhaW5lciIsImxpbmVDb250YWluZXIiLCJzdXJ2ZXlDb250YWluZXIiLCJzdmdHQnlMaW5lIiwic3ZnUGF0aEJ5UG9seWdvbiIsInN2Z0dCeVBvaW50IiwiaGFuZGxlcnMiLCJzdmdDb250b3VyUGF0aCIsInN2ZyIsInNpZGViYXJEaXYiLCJzaWRlYmFyU3ZnIiwicHJlcGVuZCIsInF1YW50aXRpZXNDb250YWluZXIiLCJfc2V0RXZlbnRIYW5kbGVyIiwiaGFuZGxlciIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJuYW1lIiwic3ZnRyIsImhhcyIsInN2Z0xpbmUiLCJjaGlsZHJlbiIsInN2Z1BhdGhBbmNob3JTdGFydCIsInN2Z1BhdGhBbmNob3JFbmQiLCJzdmdUZXh0U3RhcnQiLCJzdmdUZXh0RW5kIiwiZXJhc2VMaW5lIiwicmVtb3ZlQ2hpbGQiLCJkZWxldGUiLCJwb2ludCIsInN2Z1RleHQiLCJjbGVhckNvbnRhaW5lciIsImZpcnN0Q2hpbGQiLCJjbGVhckludGVyc2VjdGlvbnMiLCJmaWxsIiwic3ZnUGF0aCIsImZsb29yIiwicmFuZG9tIiwiZEJvdHRvbSIsImJvdHRvbVBvbHlnb24iLCJ0b3BQb2x5Z29uIiwidG9wIiwic2VsZWN0IiwiZm9udFN0eWxlIiwidGV4dERlY29yYXRpb24iLCJib3JkZXJMZWZ0Il0sIm1hcHBpbmdzIjoibUJBQUEsaUJBQ0UsV0FBbUJBLEVBQWNDLFFBQWQsSUFBQUQsTUFBQSxRQUFjLElBQUFDLE1BQUEsR0FBZCxLQUFBRCxJQUFjLEtBQUFDLElBcUluQyxPQXBJUyxFQUFBQyxPQUFQLFNBQWNDLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2hELE9BQU9ILEVBQUtFLEVBQUtELEVBQUtFLEdBRWpCLEVBQUFDLElBQVAsU0FBV0MsRUFBWUMsR0FDckIsT0FBT0MsS0FBS1IsT0FBT00sRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFdEMsWUFBQU0sSUFBQSxTQUFJSSxHQUNGLE9BQU9DLEVBQVFMLElBQUlHLEtBQU1DLElBRXBCLEVBQUFFLFNBQVAsU0FBZ0JWLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2xELE9BQU9ILEVBQUtHLEVBQUtELEVBQUtELEdBRWpCLEVBQUFVLE1BQVAsU0FBYU4sRUFBWUMsR0FDdkIsT0FBT0MsS0FBS0csU0FBU0wsRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFeEMsWUFBQWEsTUFBQSxTQUFNSCxHQUNKLE9BQU9DLEVBQVFFLE1BQU1KLEtBQU1DLElBRXRCLEVBQUFJLFFBQVAsU0FBZWYsRUFBV0MsR0FDeEIsT0FBT2UsS0FBS0MsSUFBSWpCLEVBQUcsR0FBS2dCLEtBQUtDLElBQUloQixFQUFHLElBRS9CLEVBQUFpQixLQUFQLFNBQVlWLEdBQ1YsT0FBT0UsS0FBS0ssUUFBUVAsRUFBRVIsRUFBR1EsRUFBRVAsSUFFN0IsWUFBQWlCLEtBQUEsV0FDRSxPQUFPTixFQUFRTSxLQUFLUixPQUVmLEVBQUFTLE9BQVAsU0FBY25CLEVBQVdDLEdBQ3ZCLE9BQU9lLEtBQUtJLEtBQUtWLEtBQUtLLFFBQVFmLEVBQUdDLEtBRTVCLEVBQUFvQixJQUFQLFNBQVdiLEdBQ1QsT0FBT0UsS0FBS1MsT0FBT1gsRUFBRVIsRUFBR1EsRUFBRVAsSUFFNUIsWUFBQW9CLElBQUEsV0FDRSxPQUFPVCxFQUFRUyxJQUFJWCxPQUVkLEVBQUFZLGFBQVAsU0FBb0J0QixFQUFXQyxFQUFXc0IsUUFBQSxJQUFBQSxNQUFBLEdBQ3hDLElBQU1DLEVBQU9ELEVBQUtiLEtBQUtTLE9BQU9uQixFQUFHQyxHQUNqQyxPQUFPUyxLQUFLZSxPQUFPekIsRUFBR0MsRUFBR3VCLElBRXBCLEVBQUFFLFVBQVAsU0FBaUJsQixFQUFZZSxHQUMzQixZQUQyQixJQUFBQSxNQUFBLEdBQ3BCYixLQUFLWSxhQUFhZCxFQUFFUixFQUFHUSxFQUFFUCxFQUFHc0IsSUFFckMsWUFBQUcsVUFBQSxTQUFVSCxHQUNSLFlBRFEsSUFBQUEsTUFBQSxHQUNEWCxFQUFRYyxVQUFVaEIsS0FBTWEsSUFFMUIsRUFBQUksVUFBUCxTQUFpQnhCLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ25ELE9BQU9ILElBQU9FLEdBQU1ELElBQU9FLEdBRXRCLEVBQUFzQixPQUFQLFNBQWNwQixFQUFZQyxHQUN4QixPQUFPQyxLQUFLaUIsVUFBVW5CLEVBQUVSLEVBQUdRLEVBQUVQLEVBQUdRLEVBQUVULEVBQUdTLEVBQUVSLElBRXpDLFlBQUEyQixPQUFBLFNBQU9qQixHQUNMLE9BQU9DLEVBQVFnQixPQUFPbEIsS0FBTUMsSUFFdkIsRUFBQWtCLE9BQVAsU0FBYzFCLEVBQVlDLEVBQVlDLEVBQVlDLEdBQ2hELE9BQU8sSUFBSU0sRUFBUVQsRUFBS0UsRUFBSUQsRUFBS0UsSUFFNUIsRUFBQXdCLElBQVAsU0FBV3RCLEVBQVlDLEdBQ3JCLE9BQU9DLEtBQUttQixPQUFPckIsRUFBRVIsRUFBR1EsRUFBRVAsRUFBR1EsRUFBRVQsRUFBR1MsRUFBRVIsSUFFdEMsWUFBQTZCLElBQUEsU0FBSW5CLEdBQ0YsT0FBT0MsRUFBUWtCLElBQUlwQixLQUFNQyxJQUVwQixFQUFBb0IsT0FBUCxTQUFjNUIsRUFBWUMsRUFBWUMsRUFBWUMsR0FDaEQsT0FBTyxJQUFJTSxFQUFRVCxFQUFLRSxFQUFJRCxFQUFLRSxJQUU1QixFQUFBMEIsSUFBUCxTQUFXeEIsRUFBWUMsR0FDckIsT0FBT0MsS0FBS3FCLE9BQU92QixFQUFFUixFQUFHUSxFQUFFUCxFQUFHUSxFQUFFVCxFQUFHUyxFQUFFUixJQUV0QyxZQUFBK0IsSUFBQSxTQUFJckIsR0FDRixPQUFPQyxFQUFRb0IsSUFBSXRCLEtBQU1DLElBRXBCLEVBQUFjLE9BQVAsU0FBY3pCLEVBQVdDLEVBQVdzQixHQUNsQyxPQUFPLElBQUlYLEVBQVFaLEVBQUl1QixFQUFJdEIsRUFBSXNCLElBRTFCLEVBQUFVLElBQVAsU0FBV3pCLEVBQVllLEdBQ3JCLE9BQU9iLEtBQUtlLE9BQU9qQixFQUFFUixFQUFHUSxFQUFFUCxFQUFHc0IsSUFFL0IsWUFBQVUsSUFBQSxTQUFJVixHQUNGLE9BQU9YLEVBQVFxQixJQUFJdkIsS0FBTWEsSUFFcEIsRUFBQVcscUJBQVAsU0FDRUMsRUFBWUMsRUFBWUMsRUFBWUMsRUFDcENDLEVBQVlDLEVBQVlDLEVBQVlDLEdBRXBDLElBQU1DLEVBQU1qQyxLQUFLRyxTQUFTd0IsRUFBS0YsRUFBSUcsRUFBS0YsRUFBSUssRUFBS0YsRUFBSUcsRUFBS0YsR0FDMUQsT0FBTyxJQUFJNUIsRUFDVEYsS0FBS0csU0FBUzRCLEVBQUtGLEVBQUlHLEVBQUtGLEVBQUlMLEVBQUtJLEVBQUlILEVBQUtJLEdBQU1HLEVBQ3BEakMsS0FBS0csU0FBU3dCLEVBQUtGLEVBQUlHLEVBQUtGLEVBQUlELEVBQUtJLEVBQUlILEVBQUtJLEdBQU1HLElBR2pELEVBQUFDLGtCQUFQLFNBQ0VDLEVBQWVDLEVBQWFDLEVBQWdCQyxHQUU1QyxPQUFPdEMsS0FBS3dCLHFCQUFxQlcsRUFBSzdDLEVBQUc2QyxFQUFLNUMsRUFBRzZDLEVBQUc5QyxFQUFHOEMsRUFBRzdDLEVBQUc4QyxFQUFNL0MsRUFBRytDLEVBQU05QyxFQUFHK0MsRUFBSWhELEVBQUdnRCxFQUFJL0MsSUFFNUYsWUFBQTJDLGtCQUFBLFNBQWtCRSxFQUFhQyxFQUFnQkMsR0FDN0MsT0FBT3BDLEVBQVFnQyxrQkFBa0JsQyxLQUFNb0MsRUFBSUMsRUFBT0MsSUFFN0MsRUFBQUMsZ0JBQVAsU0FDRWQsRUFBWUMsRUFBWUMsRUFBWUMsRUFDcENDLEVBQVlDLEVBQVlDLEVBQVlDLEdBRXBDLElBQU1RLEVBQVF4QyxLQUFLd0IscUJBQXFCQyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJQyxFQUFJQyxHQUNwRSxHQUFJUSxFQUdGLE9BRkFBLEVBQU1qRCxFQUFJbUMsR0FBTUUsRUFBS0YsR0FBTWMsRUFBTWxELEVBQ2pDa0QsRUFBTWxELEVBQUltQyxHQUFNRSxFQUFLRixHQUFNZSxFQUFNbEQsRUFDMUJrRCxHQUdKLEVBQUFDLGFBQVAsU0FBb0JOLEVBQWVDLEVBQWFDLEVBQWdCQyxHQUM5RCxPQUFPdEMsS0FBS3VDLGdCQUFnQkosRUFBSzdDLEVBQUc2QyxFQUFLNUMsRUFBRzZDLEVBQUc5QyxFQUFHOEMsRUFBRzdDLEVBQUc4QyxFQUFNL0MsRUFBRytDLEVBQU05QyxFQUFHK0MsRUFBSWhELEVBQUdnRCxFQUFJL0MsSUFFdkYsWUFBQWtELGFBQUEsU0FBYUwsRUFBYUMsRUFBZ0JDLEdBQ3hDLE9BQU9wQyxFQUFRdUMsYUFBYXpDLEtBQU1vQyxFQUFJQyxFQUFPQyxJQUUvQyxZQUFBSSxNQUFBLFNBQU16QyxHQUNKLEdBQUlBLEVBQU8sQ0FDUixJQUFNMEMsRUFBSzNDLEtBQUswQyxRQUNWRSxFQUFLM0MsRUFBTXlDLFFBQ2pCLE9BQUlFLEVBQUtELEVBQ0RDLEVBQUssRUFBSXRDLEtBQUt1QyxHQUFLRixFQUVuQkMsRUFBS0QsRUFFVCxPQUFJM0MsS0FBS1QsRUFBSSxFQUNYZSxLQUFLd0MsS0FBSzlDLEtBQUtWLEVBQUlVLEtBQUtXLE9BRXhCLEVBQUlMLEtBQUt1QyxHQUFLdkMsS0FBS3dDLEtBQUs5QyxLQUFLVixFQUFJVSxLQUFLVyxRQUduRCxFQXRJQSxHQ0VBLGFBU0UsV0FDRWxCLEVBQ0FDLEVBQ0FDLEVBQ0FDLEdBRUFJLEtBQUsrQyxHQUFLLElBQUk3QyxFQUFRVCxFQUFJQyxHQUMxQk0sS0FBS2dELEdBQUssSUFBSTlDLEVBQVFQLEVBQUlDLEdBMkM5QixPQTFEUyxFQUFBcUQsWUFBUCxTQUFtQkYsRUFBYUMsR0FDOUIsSUFBTUUsRUFBTyxJQUFJQyxFQUdqQixPQUZBRCxFQUFLSCxHQUFLQSxFQUNWRyxFQUFLRixHQUFLQSxFQUNIRSxHQWFULHNCQUFJLGlCQUFFLEMsSUFBTixXQUNFLE9BQU9sRCxLQUFLK0MsR0FBR3pELEcsZ0NBRWpCLHNCQUFJLGlCQUFFLEMsSUFBTixXQUNFLE9BQU9VLEtBQUsrQyxHQUFHeEQsRyxnQ0FFakIsc0JBQUksaUJBQUUsQyxJQUFOLFdBQ0UsT0FBT1MsS0FBS2dELEdBQUcxRCxHLGdDQUVqQixzQkFBSSxpQkFBRSxDLElBQU4sV0FDRSxPQUFPVSxLQUFLZ0QsR0FBR3pELEcsZ0NBRWpCLFlBQUFvQixJQUFBLFdBQ0UsT0FBT1gsS0FBS2dELEdBQUcxQixJQUFJdEIsS0FBSytDLElBQUlwQyxPQUU5QixZQUFBeUMsUUFBQSxTQUFRQyxHQUNOLE9BQU9yRCxLQUFLK0MsR0FBRzNCLElBQUlwQixLQUFLZ0QsR0FBRzFCLElBQUl0QixLQUFLK0MsSUFBSXhCLElBQUk4QixLQUU5QyxZQUFBQyxPQUFBLFNBQU9ELEdBQ0wsT0FBT3JELEtBQUsrQyxHQUFHM0IsSUFBSXBCLEtBQUtnRCxHQUFHMUIsSUFBSXRCLEtBQUsrQyxJQUFJeEIsS0FBSzhCLEVBQUlyRCxLQUFLVyxTQUV4RCxZQUFBNEMsTUFBQSxTQUFNRixHQUNKLE9BQU9yRCxLQUFLK0MsR0FBRzNCLElBQUlwQixLQUFLZ0QsR0FBRzFCLElBQUl0QixLQUFLK0MsSUFBSXhCLEtBQUt2QixLQUFLVyxNQUFRMEMsR0FBS3JELEtBQUtXLFNBRXRFLFlBQUE2QyxzQkFBQSxTQUFzQnZELEdBQ3BCLE9BQU9ELEtBQUsrQyxHQUFHYixrQkFBa0JsQyxLQUFLZ0QsR0FBSS9DLEVBQU04QyxHQUFJOUMsRUFBTStDLEtBRTVELFlBQUFTLE9BQUEsU0FBT0MsRUFBU0MsRUFBU0MsRUFBU0MsUUFBM0IsSUFBQUgsTUFBQSxRQUFTLElBQUFDLE1BQUEsUUFBUyxJQUFBQyxNQUFBLFFBQVMsSUFBQUMsTUFBQSxHQUNoQzdELEtBQUsrQyxHQUFHekQsR0FBS29FLEVBQ2IxRCxLQUFLK0MsR0FBR3hELEdBQUtvRSxFQUNiM0QsS0FBS2dELEdBQUcxRCxHQUFLc0UsRUFDYjVELEtBQUtnRCxHQUFHekQsR0FBS3NFLEdBRWYsWUFBQUMsVUFBQSxTQUFVQyxHQUNSLEdBQUkvRCxLQUFLK0MsR0FBRzdCLE9BQU9sQixLQUFLZ0QsSUFDdEIsT0FBTyxJQUFJOUMsRUFBUUYsS0FBSytDLEdBQUd6RCxFQUFHVSxLQUFLK0MsR0FBR3hELEdBRXhDLElBQU1PLEVBQUlFLEtBQUtnRCxHQUFHMUIsSUFBSXRCLEtBQUsrQyxJQUNyQk0sRUFBSXZELEVBQUVELElBQUlrRSxFQUFFekMsSUFBSXRCLEtBQUsrQyxLQUFPakQsRUFBRVUsT0FDcEMsT0FBT1IsS0FBS29ELFFBQVE5QyxLQUFLMEQsSUFBSSxFQUFHMUQsS0FBSzJELElBQUlaLEVBQUcsTUFFaEQsRUEzREEsR0NGQSxFQUNFLFNBQ1NhLEVBQ0FDLEdBREEsS0FBQUQsT0FDQSxLQUFBQyxTQ0FYLGFBQ0UsV0FBcUJDLFFBQUEsSUFBQUEsTUFBQSxTQUFBQSxXQTZDdkIsT0ExQ1UsWUFBQUMsWUFBUixTQUFvQkMsRUFBV0MsR0FDN0IsT0FBUXZFLEtBQUtvRSxTQUFTRyxHQUFHakYsRUFBSVUsS0FBS29FLFNBQVNFLEdBQUdoRixJQUFNVSxLQUFLb0UsU0FBU0UsR0FBRy9FLEVBQUlTLEtBQUtvRSxTQUFTRyxHQUFHaEYsR0FBSyxHQUVqRyxZQUFBaUYsS0FBQSxXQUdFLElBRkEsSUFBSUMsRUFBSSxFQUNKSCxFQUFJdEUsS0FBS29FLFNBQVNNLE9BQVMsRUFDdEJILEVBQUksRUFBR0EsRUFBSXZFLEtBQUtvRSxTQUFTTSxPQUFRSCxJQUN4Q0UsR0FBS3pFLEtBQUtxRSxZQUFZQyxFQUFHQyxHQUN6QkQsRUFBSUMsRUFFTixPQUFPRSxHQUVULFlBQUFFLFNBQUEsU0FBUzVFLEdBRVAsSUFEQSxJQUFJNkUsR0FBSSxFQUNDTixFQUFJLEVBQUdDLEVBQUl2RSxLQUFLb0UsU0FBU00sT0FBUyxFQUFHSixFQUFJdEUsS0FBS29FLFNBQVNNLE9BQVFILEVBQUlELElBRXhFdEUsS0FBS29FLFNBQVNFLEdBQUcvRSxFQUFJUSxFQUFFUixHQUFNUyxLQUFLb0UsU0FBU0csR0FBR2hGLEVBQUlRLEVBQUVSLEdBQ3BEUSxFQUFFVCxHQUFLVSxLQUFLb0UsU0FBU0csR0FBR2pGLEVBQUlVLEtBQUtvRSxTQUFTRSxHQUFHaEYsSUFBTVMsRUFBRVIsRUFBSVMsS0FBS29FLFNBQVNFLEdBQUcvRSxJQUFNUyxLQUFLb0UsU0FBU0csR0FBR2hGLEVBQUlTLEtBQUtvRSxTQUFTRSxHQUFHL0UsR0FBS1MsS0FBS29FLFNBQVNFLEdBQUdoRixJQUU1SXNGLEdBQUtBLEdBR1QsT0FBT0EsR0FFVCxZQUFBQyxRQUFBLFdBQ0U3RSxLQUFLb0UsU0FBU1MsV0FFaEIsWUFBQUMsVUFBQSxXQUNFLE9BQUk5RSxLQUFLb0UsU0FBU00sT0FBUyxFQUNsQjFFLEtBQUtvRSxTQUFTTSxPQUVoQixHQUVULFlBQUFLLE1BQUEsc0JBQ0UsT0FBSS9FLEtBQUtvRSxTQUFTTSxPQUFTLEVBQ2xCMUUsS0FBS29FLFNBQVNZLEtBQUksU0FBQ2pGLEVBQUd1RSxHQUFNLE9BQUFuQixFQUFBLFlBQWlCLEVBQUtpQixTQUFTRSxHQUFJLEVBQUtGLFNBQVNFLEVBQUksRUFBS0YsU0FBU00sT0FBUyxFQUFJSixFQUFJLEVBQUksT0FFdEgsSUFFVCxZQUFBVyxTQUFBLFdBQ0UsT0FBVWpGLEtBQUtvRSxTQUFTTSxPQUFNLFlBQWMxRSxLQUFLb0UsU0FBU1ksS0FBSSxTQUFBakYsR0FBSyxVQUFJQSxFQUFFVCxFQUFFNEYsVUFBUyxLQUFLbkYsRUFBRVIsRUFBRTJGLFVBQVMsT0FBS0MsS0FBSyxNQUFRLFdBQVduRixLQUFLd0UsT0FBT1UsVUFBUyxLQUU1SixFQTlDQSxHQ0NBLGFBQ0UsV0FDU0UsRUFDQUMsRUFDQUMsR0FGQSxLQUFBRixjQUNBLEtBQUFDLFlBQ0EsS0FBQUMsVUFrQlgsT0FkRSxZQUFBbkIsTUFBQSxXQUNFLE9BQU9uRSxLQUFLcUYsVUFBVUUsUUFBTyxTQUFDcEIsRUFBT3FCLEdBQVUsT0FBQXJCLEVBQVFxQixFQUFNckIsUUFBTyxJQUV0RSxZQUFBc0IsV0FBQSxXQUNFLElBQU1BLEVBQWEsSUFBSUMsSUFDdkIsR0FBSTFGLEtBQUtzRixRQUFTLENBQ2hCLElBQU0sRUFBT3RGLEtBQUtzRixRQUFRZCxPQUMxQnhFLEtBQUtxRixVQUFVTSxTQUFRLFNBQUFDLEdBQ3JCLElBQUlDLEVBQVdKLEVBQVdLLElBQUlGLEVBQWtCMUIsT0FBUyxFQUN6RHVCLEVBQVdNLElBQUlILEVBQWtCMUIsS0FBTTJCLEVBQVd2RixLQUFLMEYsTUFBTSxFQUFPSixFQUFrQnpCLFdBRzFGLE9BQU9zQixHQUVYLEVBdEJBLEcsd0xDV0EsYUFVRSxXQUFxQlEsR0FBckIsV0FBcUIsS0FBQUEsV0FUckIsS0FBQUMsS0FBZSxHQUNmLEtBQUFDLFFBQVUsSUFBSUMsRUFDZCxLQUFBbEUsa0JBQWdDLEdBQ2hDLEtBQUFtRSxjQUEyQixHQUMzQixLQUFBQyxrQkFBZ0MsR0FDaEMsS0FBQUMsU0FBc0IsR0FDdEIsS0FBQUMsUUFBb0IsR0FDcEIsS0FBQWYsV0FBYSxJQUFJQyxJQUNqQixLQUFBZSxLQUFPLEVBR0xDLFNBQVNDLGlCQUFpQixTQUFTLFNBQUFDLEdBQ2YsTUFBZEEsRUFBTUMsS0FDUixFQUFLSixLQUFPLEVBQ1pDLFNBQVNJLGlCQUFpQixXQUFXbkIsU0FBUSxTQUFDb0IsR0FBd0IsT0FBQUEsRUFBSUMsVUFBVUMsT0FBTyxlQUMzRlAsU0FBU1EsY0FBYyxpQkFBaUJGLFVBQVU1RixJQUFJLGFBQy9CLE1BQWR3RixFQUFNQyxLQUNmLEVBQUtKLEtBQU8sRUFDWixFQUFLUixTQUFTa0IsY0FDZFQsU0FBU0ksaUJBQWlCLFdBQVduQixTQUFRLFNBQUNvQixHQUF3QixPQUFBQSxFQUFJQyxVQUFVQyxPQUFPLGVBQzNGUCxTQUFTUSxjQUFjLGlCQUFpQkYsVUFBVTVGLElBQUksYUFDL0IsTUFBZHdGLEVBQU1DLEtBQ2YsRUFBS0osS0FBTyxFQUNaLEVBQUtSLFNBQVNrQixjQUNkVCxTQUFTSSxpQkFBaUIsV0FBV25CLFNBQVEsU0FBQ29CLEdBQXdCLE9BQUFBLEVBQUlDLFVBQVVDLE9BQU8sZUFDM0ZQLFNBQVNRLGNBQWMsY0FBY0YsVUFBVTVGLElBQUksYUFDNUIsV0FBZHdGLEVBQU1DLEtBQ2YsRUFBS1osU0FBU2tCLGlCQUlsQlQsU0FBU1EsY0FBYyxpQkFBaUJQLGlCQUFpQixTQUFTLFNBQUFDLEdBQ2hFRixTQUFTSSxpQkFBaUIsV0FBV25CLFNBQVEsU0FBQ29CLEdBQXdCLE9BQUFBLEVBQUlDLFVBQVVDLE9BQU8sZUFDMUZMLEVBQU1RLE9BQTBCSixVQUFVNUYsSUFBSSxZQUMvQyxFQUFLcUYsS0FBTyxFQUNaLEVBQUtSLFNBQVNrQixpQkFHaEJULFNBQVNRLGNBQWMsY0FBY1AsaUJBQWlCLFNBQVMsU0FBQUMsR0FDN0RGLFNBQVNJLGlCQUFpQixXQUFXbkIsU0FBUSxTQUFDb0IsR0FBd0IsT0FBQUEsRUFBSUMsVUFBVUMsT0FBTyxlQUMxRkwsRUFBTVEsT0FBMEJKLFVBQVU1RixJQUFJLFlBQy9DLEVBQUtxRixLQUFPLEVBQ1osRUFBS1IsU0FBU2tCLGlCQUdoQlQsU0FBU1EsY0FBYyxpQkFBaUJQLGlCQUFpQixTQUFTLFNBQUFDLEdBQ2hFRixTQUFTSSxpQkFBaUIsV0FBV25CLFNBQVEsU0FBQ29CLEdBQXdCLE9BQUFBLEVBQUlDLFVBQVVDLE9BQU8sZUFDMUZMLEVBQU1RLE9BQTBCSixVQUFVNUYsSUFBSSxZQUMvQyxFQUFLcUYsS0FBTyxLQUdkekcsS0FBS3FILG1CQUVMLElBQ0lDLEVBNkNBQyxFQW9CQUMsRUFnRUFDLEVBbElBQyxHQUFvQixFQUVwQkMsR0FBc0IsRUFDMUIzSCxLQUFLaUcsU0FBUzJCLHFCQUFvQixTQUFBaEIsR0FFaEMsSUFBSUEsRUFBTWlCLE9BQVYsQ0FHQSxJQUFNQyxFQUFRLElBQUk1SCxFQUFRMEcsRUFBTW1CLFFBQVNuQixFQUFNb0IsU0FDN0IsSUFBZCxFQUFLdkIsTUFBcUMsSUFBZCxFQUFLQSxNQVFULEtBUDFCaUIsRUFBbUIsRUFBS08scUJBQ3RCSCxFQXpFYyxHQTJFQSxJQUFkLEVBQUtyQixLQUNELEVBQUtQLEtBQ0wsRUFBS0MsUUFBUXBCLFVBR0MsSUFBZCxFQUFLMEIsTUFDUCxFQUFLeUIsUUFBUSxJQUFJL0UsRUFBSzJFLEVBQU14SSxFQUFHd0ksRUFBTXZJLEVBQUd1SSxFQUFNeEksRUFBR3dJLEVBQU12SSxJQUN2RG1JLEVBQW1CLEVBQUtTLE1BQU16RCxPQUFTLEVBQ3ZDNEMsRUFBaUIsRUFBS2EsTUFBTVQsR0FBa0IxRSxJQUN2QixJQUFkLEVBQUt5RCxPQUNkLEVBQUsyQixXQUFXLElBQUlqRixFQUFLMkUsRUFBTXhJLEVBQUd3SSxFQUFNdkksRUFBR3VJLEVBQU14SSxFQUFHd0ksRUFBTXZJLElBQzFEbUksRUFBbUIsRUFDbkJKLEVBQWlCLEVBQUthLE1BQU1ULEdBQWtCM0UsS0FHOUIsSUFBZCxFQUFLMEQsT0FDUGlCLEdBQW9CLEVBQUt2QixRQUFRckIsYUFFL0JnRCxFQUFNeEcsSUFBSSxFQUFLNkcsTUFBTVQsR0FBa0IzRSxJQUFJcEMsTUE3RmpDLEdBOEZaMkcsRUFBaUIsRUFBS2EsTUFBTVQsR0FBa0IzRSxHQUNyQytFLEVBQU14RyxJQUFJLEVBQUs2RyxNQUFNVCxHQUFrQjFFLElBQUlyQyxNQS9GeEMsS0FnR1oyRyxFQUFpQixFQUFLYSxNQUFNVCxHQUFrQjFFLEtBRzNCLElBQWQsRUFBS3lELE9BRWMsS0FENUJrQixFQUFxQixFQUFLVSx1QkFBdUJQLEVBcEdqQyxPQXNHZCxFQUFLUSxVQUFVUixHQUNmSCxFQUFxQixFQUFLbkIsUUFBUTlCLE9BQVMsT0FNakQxRSxLQUFLaUcsU0FBU3NDLG1CQUFrQixTQUFBM0IsR0FFMUJBLEVBQU1pQixTQUdRLElBQWQsRUFBS3BCLE1BQXFDLElBQWQsRUFBS0EsTUFDbkNpQixHQUFvQixFQUNwQkosRUFBaUIsTUFDTSxJQUFkLEVBQUtiLFFBQ2MsSUFBeEJrQixHQUNGSixFQUFlLEVBQUtmLFFBQVFtQixHQUM1QixFQUFLMUIsU0FBU3VDLFdBQVdqQixJQUV6QkEsRUFBZSxLQUVqQkksR0FBc0IsT0FLMUIzSCxLQUFLaUcsU0FBU3dDLHFCQUFvQixTQUFBN0IsR0FFaEMsSUFBSUEsRUFBTWlCLE9BR1YsR0FBa0IsSUFBZCxFQUFLcEIsTUFBcUMsSUFBZCxFQUFLQSxNQUMvQmEsSUFBd0MsSUFBdEJJLEtBQ2hCSixHQUNGQSxFQUFlaEksR0FBS3NILEVBQU04QixVQUMxQnBCLEVBQWUvSCxHQUFLcUgsRUFBTStCLFdBRTFCLEVBQUtSLE1BQU1ULEdBQWtCakUsT0FBT21ELEVBQU04QixVQUFXOUIsRUFBTStCLFVBQVcvQixFQUFNOEIsVUFBVzlCLEVBQU0rQixXQUUvRixFQUFLQyx3QkFBd0JsQixHQUNYLElBQWQsRUFBS2pCLEtBQ1AsRUFBS1IsU0FBUzRDLFNBQ1osRUFBSzNDLEtBQUt3QixFQUFtQixFQUFLdkIsUUFBUXJCLGNBQ3pDNEMsRUFBbUIsRUFBS3ZCLFFBQVFyQixhQUFhRyxhQUc1Q3lDLElBQXFCLEVBQUt2QixRQUFRckIsWUFBYyxHQUNsRCxFQUFLOEQsd0JBQXdCbEIsRUFBbUIsR0FDaEQsRUFBS2tCLHdCQUF3QixJQUNDLElBQXJCbEIsR0FDVCxFQUFLa0Isd0JBQXdCLEVBQUt6QyxRQUFRckIsWUFBYyxHQUN4RCxFQUFLOEQsd0JBQXdCLEtBRTdCLEVBQUtBLHdCQUF3QmxCLEVBQW1CLEdBQ2hELEVBQUtrQix3QkFBd0JsQixFQUFtQixJQUVsRCxFQUFLekIsU0FBUzZDLFlBQVksRUFBSzNDLGdCQUc5QixHQUFrQixJQUFkLEVBQUtNLEtBQXdCLEVBQ1YsSUFBeEJrQixJQUNGLEVBQUtuQixRQUFRbUIsR0FBb0J2QyxZQUFZOUYsR0FBS3NILEVBQU04QixVQUN4RCxFQUFLbEMsUUFBUW1CLEdBQW9CdkMsWUFBWTdGLEdBQUtxSCxFQUFNK0IsVUFDeEQsRUFBS0ksYUFBYSxFQUFLdkMsUUFBUW1CLEtBTWpDLElBSEEsSUFBTUcsRUFBUSxJQUFJNUgsRUFBUTBHLEVBQU1tQixRQUFTbkIsRUFBTW9CLFNBQzNDZ0IsR0FBVyxFQUNYQyxFQUFzQnpCLEVBQ0osUUFBS2pCLFNBQUwsZUFBZSxDQUFoQyxJQUFNakIsRUFBTyxLQUNoQixHQUFJQSxFQUFRWCxTQUFTbUQsR0FBUSxDQUN2QnhDLElBQVlrQyxJQUNkLEVBQUt2QixTQUFTaUQsWUFBWTVELEVBQVMsT0FDbkNrQyxFQUFtQmxDLEdBRXJCMEQsR0FBVyxFQUNYLE9BR0NBLElBQ0h4QixFQUFtQixNQUVqQnlCLEdBQXVCQSxJQUF3QnpCLEdBQ2pELEVBQUt2QixTQUFTaUQsWUFBWUQsRUFBcUIsYUFPckRqSixLQUFLaUcsU0FBU2tELDRCQUEyQixTQUFBdkMsR0FDdkMsSUFBSUEsRUFBTWlCLFFBR05OLEVBR0YsSUFGQSxJQUFNTyxFQUFRLElBQUk1SCxFQUFRMEcsRUFBTXdDLFFBQVN4QyxFQUFNeUMsU0FDekNDLEVBQVMsSUFBSXBKLEVBQVEsSUFBSyxLQUNBLE1BQUFxSCxFQUFhbEMsVUFBYixlQUF3QixDQUFuRCxJQUFNTyxFQUFpQixLQUNwQk4sRUFBVSxJQUFJYyxFQUFRLENBQzFCa0QsRUFBT2xJLElBQUksSUFBSWxCLEdBQVMsR0FBSSxJQUM1Qm9KLEVBQU9sSSxJQUFJLElBQUlsQixFQUFRLEdBQUksSUFDM0JvSixFQUFPbEksSUFBSSxJQUFJbEIsRUFBUSxHQUFJMEYsRUFBa0J6QixRQUM3Q21GLEVBQU9sSSxJQUFJLElBQUlsQixHQUFTLEdBQUkwRixFQUFrQnpCLFVBR2hELEdBREFtRixFQUFPL0osR0FBS3FHLEVBQWtCekIsTUFDMUJtQixFQUFRWCxTQUFTbUQsR0FBUSxDQUMzQkwsRUFBd0I3QixFQUN4QixXQU1SNUYsS0FBS2lHLFNBQVNzRCwwQkFBeUIsU0FBQTNDLEdBQ2pDQSxFQUFNaUIsU0FHVkosRUFBd0IsU0FHMUJ6SCxLQUFLaUcsU0FBU3VELDRCQUEyQixTQUFBNUMsR0FDbkNBLEVBQU1pQixRQUdOSixJQUNGQSxFQUFzQnRELE9BQVN5QyxFQUFNK0IsVUFDckMsRUFBSzFDLFNBQVN1QyxXQUFXakIsR0FDekIsRUFBS0YsdUJBSVRySCxLQUFLaUcsU0FBU3dELG1CQUFxQixXQUNqQyxFQUFLcEMsb0JBa1VYLE9BL1RFLHNCQUFJLG9CQUFLLEMsSUFBVCxXQUNFLE9BQU9ySCxLQUFLbUcsUUFBUXBCLFFBQVEyRSxPQUFPMUosS0FBS2tHLE8sZ0NBRTFDLFlBQUErQixxQkFBQSxTQUFxQmxJLEVBQVk0SixFQUF1QnhCLFFBQXZCLElBQUF3QixNQUFBLFVBQXVCLElBQUF4QixNQUFRbkksS0FBS21JLE9BSW5FLElBSEEsSUFFSXlCLEVBRkFDLEdBQW9CLEVBQ3BCQyxFQUFjLElBRVR4RixFQUFJLEVBQUdBLEVBQUk2RCxFQUFNekQsT0FBUUosS0FDaENzRixFQUFPekIsRUFBTTdELEdBQUdSLFVBQVUvRCxHQUFHdUIsSUFBSXZCLEdBQUdZLE9BQ3pCZ0osR0FBYUMsRUFBT0UsSUFDN0JBLEVBQWNGLEVBQ2RDLEVBQW1CdkYsR0FHdkIsT0FBT3VGLEdBRVQsWUFBQXhCLHVCQUFBLFNBQXVCdEksRUFBWTRKLFFBQUEsSUFBQUEsTUFBQSxLQUlqQyxJQUhBLElBRUlDLEVBRkFHLEdBQXNCLEVBQ3RCRCxFQUFjLElBRVR4RixFQUFJLEVBQUdBLEVBQUl0RSxLQUFLd0csUUFBUTlCLE9BQVFKLEtBQ3ZDc0YsRUFBTzVKLEtBQUt3RyxRQUFRbEMsR0FBR2MsWUFBWTlELElBQUl2QixHQUFHWSxPQUMvQmdKLEdBQWFDLEVBQU9FLElBQzdCQSxFQUFjRixFQUNkRyxFQUFxQnpGLEdBR3pCLE9BQU95RixHQUVULFlBQUF6QixVQUFBLFNBQVVsRCxHQUVSLElBREEsSUFBSTRFLEVBQ2tCLE1BQUFoSyxLQUFLdUcsU0FBTCxlQUFlLENBQWhDLElBQU1qQixFQUFPLEtBQ2hCLEdBQUlBLEVBQVFYLFNBQVNTLEdBQWMsQ0FDakM0RSxFQUFZMUUsRUFDWixPQUdKLElBQU0yRSxFQUFTLElBQUlDLEVBQU85RSxFQUFhLENBQ3JDLElBQUkrRSxFQUFrQixnQkFBaUIsSUFDdkMsSUFBSUEsRUFBa0IsZ0JBQWlCLElBQ3ZDLElBQUlBLEVBQWtCLGdCQUFpQixLQUN0Q0gsR0FDSGhLLEtBQUt3RyxRQUFRNEQsS0FBS0gsR0FDbEJqSyxLQUFLaUcsU0FBU29FLFVBQVVqRixFQUFhNEUsR0FBYUEsRUFBVXhGLE9BQVMsS0FBV1UsUUFBUSxHQUFLLE1BQVEsSUFDckdsRixLQUFLcUgsb0JBR1AsWUFBQTBCLGFBQUEsU0FBYWtCLEdBQ1hBLEVBQU8zRSxRQUFVLEtBQ2pCLElBQXNCLFVBQUF0RixLQUFLdUcsU0FBTCxlQUFlLENBQWhDLElBQU1qQixFQUFPLEtBQ2hCLEdBQUlBLEVBQVFYLFNBQVNzRixFQUFPN0UsYUFBYyxDQUN4QzZFLEVBQU8zRSxRQUFVQSxFQUNqQixPQUdKdEYsS0FBS2lHLFNBQVNvRSxVQUFVSixFQUFPN0UsWUFBYTZFLEVBQU8zRSxTQUFXMkUsRUFBTzNFLFFBQVFkLE9BQVMsS0FBV1UsUUFBUSxHQUFLLE1BQVEsSUFDdEhsRixLQUFLcUgsb0JBRVAsWUFBQUEsaUJBQUEsc0JBQ0VySCxLQUFLeUYsV0FBVzZFLFFBQ2hCdEssS0FBS3dHLFFBQVFiLFNBQVEsU0FBQXNFLEdBQ25CQSxFQUFPeEUsYUFBYUUsU0FBUSxTQUFDRSxFQUFVM0IsR0FDckMsRUFBS3VCLFdBQVdNLElBQUk3QixHQUFPLEVBQUt1QixXQUFXSyxJQUFJNUIsSUFBUyxHQUFLMkIsU0FHakU3RixLQUFLaUcsU0FBU3NFLGVBQWV2SyxLQUFLeUYsYUFFcEMsWUFBQStFLHFCQUFBLFNBQ0VDLEVBQ0FDLEVBQ0F4SSxFQUNBbUUsRUFDQUMsUUFKQSxJQUFBbUUsTUFBS3pLLEtBQUttSSxNQUFNekQsYUFDaEIsSUFBQWdHLE1BQVkxSyxLQUFLbUksTUFBTXpELGFBQ3ZCLElBQUF4QyxNQUFvQmxDLEtBQUtrQyx3QkFDekIsSUFBQW1FLE1BQWdCckcsS0FBS3FHLG9CQUNyQixJQUFBQyxNQUFvQnRHLEtBQUtzRyxtQkFJekIsSUFGQSxJQUFNcUUsRUFBaUMsR0FDakNDLEVBQWlDLEdBQzlCdEcsRUFBSSxFQUFHQSxFQUFJb0csRUFBV3BHLElBQzdCcEMsRUFBa0JvQyxHQUFHdUcsT0FBT0osRUFBSSxFQUFHSyxLQUNuQ3pFLEVBQWMrRCxLQUFLLElBQUlsSyxHQUN2Qm9HLEVBQWtCaEMsR0FBR3VHLE9BQU9KLEVBQUksRUFBR3BFLEVBQWMzQixPQUFTLEdBQzFEaUcsRUFBcUJQLEtBQUtVLEtBQzFCRixFQUFxQlIsS0FBSy9ELEVBQWMzQixPQUFTLEdBRW5EaUcsRUFBcUJFLE9BQU9KLEVBQUksRUFBR0ssS0FDbkNGLEVBQXFCQyxPQUFPSixFQUFJLEdBQUksR0FDcEN2SSxFQUFrQjJJLE9BQU9KLEVBQUksRUFBR0UsR0FDaENyRSxFQUFrQnVFLE9BQU9KLEVBQUksRUFBR0csSUFFbEMsWUFBQTFDLFFBQUEsU0FBUWhGLEdBRU4sSUFDTXVILEVBRFF6SyxLQUFLbUksTUFDRnpELE9BQ2pCMUUsS0FBS3dLLHFCQUFxQkMsRUFBSUEsR0FDOUJ6SyxLQUFLa0csS0FBS2tFLEtBQUtsSCxHQUNmbEQsS0FBS2lHLFNBQVM0QyxTQUFTM0YsRUFBTXVILEVBQUd4RixZQUNoQ2pGLEtBQUs0SSx3QkFBd0I2QixJQUUvQixZQUFBckMsV0FBQSxTQUFXbEYsR0FHVCxJQUFNNEIsRUFBWTlFLEtBQUttRyxRQUFRckIsWUFDM0I0RixFQUFZNUYsRUFBWTlFLEtBQUtrRyxLQUFLeEIsT0FDdEMxRSxLQUFLd0sscUJBQXFCLEVBQUdFLEtBQzdCMUssS0FBS3dLLHFCQUFxQixFQUFHRSxLQUM3QjFLLEtBQUttRyxRQUFRL0IsU0FBU3lHLE9BQU8sRUFBRyxFQUFHM0gsRUFBS0gsR0FBSUcsRUFBS0YsSUFDakRoRCxLQUFLaUcsU0FBUzZDLFlBQVk5SSxLQUFLbUcsU0FDL0IsSUFBTWdDLEVBQVFuSSxLQUFLbUksTUFDRCxJQUFkckQsR0FDRjlFLEtBQUs0SSx3QkFBd0IsRUFBR1QsR0FBTyxHQUN2Q25JLEtBQUs0SSx3QkFBd0IsRUFBR1QsS0FFaENuSSxLQUFLNEksd0JBQXdCLEVBQUdULEdBQU8sR0FDdkNuSSxLQUFLNEksd0JBQXdCLEVBQUdULEdBQU8sR0FDdkNuSSxLQUFLNEksd0JBQXdCOEIsRUFBWSxFQUFHdkMsS0FHaEQsWUFBQVMsd0JBQUEsU0FDRTZCLEVBQ0F0QyxFQUNBNEMsRUFDQTdJLEVBQ0FtRSxFQUNBQyxRQUpBLElBQUE2QixNQUFRbkksS0FBS21JLFlBQ2IsSUFBQTRDLE9BQUEsUUFDQSxJQUFBN0ksTUFBb0JsQyxLQUFLa0Msd0JBQ3pCLElBQUFtRSxNQUFnQnJHLEtBQUtxRyxvQkFDckIsSUFBQUMsTUFBb0J0RyxLQUFLc0csbUJBSXpCLElBRkEsSUFDSTlELEVBREVVLEVBQU9pRixFQUFNc0MsR0FFVm5HLEVBQUksRUFBR0EsRUFBSTZELEVBQU16RCxPQUFRSixJQUM1QkEsSUFBTW1HLElBQ1JqSSxFQUFRMkYsRUFBTTdELEdBQUdkLHNCQUFzQk4sR0FDdkNoQixFQUFrQm9DLEdBQUdtRyxHQUFNakksRUFBTWxELEVBQ2pDNEMsRUFBa0J1SSxHQUFJbkcsR0FBSzlCLEVBQU1qRCxFQUM3QitFLEVBQUltRyxFQUNOcEUsRUFBY0MsRUFBa0JoQyxHQUFHbUcsSUFBT3RDLEVBQU03RCxHQUFHbEIsUUFBUVosRUFBTWxELEdBRWpFK0csRUFBY0MsRUFBa0JtRSxHQUFJbkcsSUFBTTZELEVBQU03RCxHQUFHbEIsUUFBUVosRUFBTWxELElBSWxFeUwsR0FDSC9LLEtBQUtnTCx1QkFHVCxZQUFBQSxvQkFBQSxzQkFLRWhMLEtBQUtpRyxTQUFTZ0YsZ0JBQ2RqTCxLQUFLdUcsU0FBVyxHQUNoQixJQUFNMkUsRUFBV2xMLEtBQUttTCxxQ0FDQ25MLEtBQUtvTCxnQ0FBZ0NGLEdBQzVCbEcsS0FBSSxTQUFBcUcsR0FBZ0IsV0FBSWpGLEVBQVFpRixFQUFhckcsS0FBSSxTQUFBVixHQUFLLFNBQUsrQixjQUFjL0IsVUFDaEdxQixTQUFRLFNBQUFMLEdBQ1hBLEVBQVFkLE9BQVMsSUFDbkIsRUFBSytCLFNBQVM2RCxLQUFLOUUsR0FDbkIsRUFBS1csU0FBU2lELFlBQVk1RCxFQUFTLGFBR3ZDdEYsS0FBS3dHLFFBQVFiLFNBQVEsU0FBQXNFLEdBQVUsU0FBS2xCLGFBQWFrQixPQUVuRCxZQUFBcUIsU0FBQSxTQUFTeEwsRUFBWUMsRUFBWXdMLEdBQy9CLE9BQU94TCxFQUFFdUIsSUFBSXhCLEdBQUdNLE1BQU1tTCxFQUFFakssSUFBSXhCLElBQU0sR0FFcEMsWUFBQTBMLGlCQUFBLFNBQWlCQyxFQUFjQyxHQUM3QixPQUFPRCxFQUFHQSxFQUFHL0csT0FBUyxLQUFPZ0gsRUFBRyxJQUFNRCxFQUFHQSxFQUFHL0csT0FBUyxLQUFPZ0gsRUFBRyxHQUFLLEVBQUksR0FFMUUsWUFBQUMsYUFBQSxTQUFhRixFQUFjQyxHQUN6QixPQUFPRCxFQUFHQSxFQUFHL0csT0FBUyxLQUFPZ0gsRUFBRyxHQUFLLEVBQUksR0FFM0MsWUFBQUUscUNBQUEsU0FDRUMsRUFDQUMsR0FHQSxJQURBLElBQU1DLEVBQW9DLEdBQ2pDekgsRUFBSSxFQUFHQSxFQUFJd0gsRUFBUXBILE9BQVFKLElBQ2xDLEdBQTBCLGlCQUFmd0gsRUFBUXhILEdBQWlCLENBQ2xDLElBQUlDLEVBQUlELEVBQUksRUFJWixJQUhJQyxJQUFNdUgsRUFBUXBILFNBQ2hCSCxFQUFJLEdBRXVCLGlCQUFmdUgsRUFBUXZILE1BQ3BCQSxJQUNVdUgsRUFBUXBILFNBQ2hCSCxFQUFJLEdBR0pELElBQU1DLEdBQ1J3SCxFQUFNM0IsS0FBSyxDQUFDMEIsRUFBUXhILEdBQUl1SCxFQUFRQyxFQUFRdkgsS0FJOUMsT0FBT3dILEdBRVQsWUFBQVosbUNBQUEsU0FDRWhELEVBQ0FqRyxFQUNBb0UsR0FIRixnQkFDRSxJQUFBNkIsTUFBUW5JLEtBQUttSSxZQUNiLElBQUFqRyxNQUFvQmxDLEtBQUtrQyx3QkFDekIsSUFBQW9FLE1BQW9CdEcsS0FBS3NHLG1CQW9CekIsSUFmQSxJQUFNeEIsRUFBWTlFLEtBQUttRyxRQUFRckIsWUFDekJrSCxFQUFvQzlKLEVBQ3ZDOEMsS0FBSSxTQUFDaUgsRUFBc0IzSCxHQUMxQixPQUFPMkgsRUFDSmpILEtBQUksU0FBQ2tILEVBQUczSCxHQUFNLE9BQUFBLEtBQ2Q0SCxRQUFPLFNBQUE1SCxHQUNOLE9BQVE2SCxNQUFNSCxFQUFxQjFILEtBQU8sR0FBSzBILEVBQXFCMUgsSUFBTTBILEVBQXFCMUgsSUFBTSxJQUNsRzZILE1BQU1sSyxFQUFrQnFDLEdBQUdELEtBQU8sR0FBS3BDLEVBQWtCcUMsR0FBR0QsSUFBTXBDLEVBQWtCcUMsR0FBR0QsSUFBTSxJQUU3RkEsRUFBSVEsR0FBYVAsRUFBSU8sR0FBYSxFQUFLcUIsUUFBUXhCLFNBQVMsRUFBSzBCLGNBQWNDLEVBQWtCaEMsR0FBR0MsU0FFcEc4SCxNQUFLLFNBQUMvSCxFQUFHQyxHQUFNLE9BQUEwSCxFQUFxQjNILEdBQUsySCxFQUFxQjFILFNBRy9EMkcsRUFBdUMsRyxXQUNwQ29CLEdBQ1AsSUFBSyxJQUFJQyxFQUFrQixFQUFHQSxFQUFrQlAsRUFBa0NNLEdBQVk1SCxPQUFRNkgsSUFBbUIsQ0FDdkgsSUFBTUMsRUFBZVIsRUFBa0NNLEdBQVlDLEdBQ25FLEdBQUlELEVBQWFFLEVBQWMsQ0FDN0IsSUFBTUMsRUFBUW5HLEVBQWtCZ0csR0FBWU4sRUFBa0NNLEdBQVlDLElBRXBGRyxFQUFzQkgsRUFBa0IsRUFDeENJLEVBQXNCSixFQUFrQixFQUV4Q0ssRUFBb0JaLEVBQWtDUSxHQUFjSyxXQUFVLFNBQUF2SSxHQUFLLE9BQUFBLElBQU1nSSxLQUN6RlEsRUFBc0IsRUFBS3hCLFNBQVNuRCxFQUFNbUUsR0FBWXZKLEdBQUlvRixFQUFNbUUsR0FBWXRKLEdBQUltRixFQUFNcUUsR0FBY3pKLElBQ3BHZ0ssRUFBd0JELEVBQXNCRixFQUFvQixFQUFJQSxFQUFvQixFQUMxRkksRUFBd0JGLEVBQXNCRixFQUFvQixFQUFJQSxFQUFvQixFQWExRkssRUFBaUIsRUFBSVYsRUFDdkJqRyxFQUFrQmdHLEdBQVlOLEVBQWtDTSxHQUFZSSxJQUM1RSxLQUNFUSxFQUFpQlgsRUFBa0JQLEVBQWtDTSxHQUFZNUgsT0FBUyxFQUM1RjRCLEVBQWtCZ0csR0FBWU4sRUFBa0NNLEdBQVlLLElBQzVFLEtBQ0VRLEdBQW9CLEVBQUlKLEdBQXlCQSxFQUF3QmYsRUFBa0NRLEdBQWM5SCxPQUMzSDRCLEVBQWtCa0csR0FBY1IsRUFBa0NRLEdBQWNPLElBQ2hGLEtBQ0VLLEdBQW9CLEVBQUlKLEdBQXlCQSxFQUF3QmhCLEVBQWtDUSxHQUFjOUgsT0FDM0g0QixFQUFrQmtHLEdBQWNSLEVBQWtDUSxHQUFjUSxJQUNoRixLQVNFakIsRUFBUSxFQUFLSCxxQ0FDakJhLEVBQ0EsQ0FDRVEsRUFDQUcsRUFDQUYsRUFDQUMsSUFHSmpDLEVBQVNkLEtBQUksTUFBYmMsRUFBaUJhLE0sT0F0RGRPLEVBQWEsRUFBR0EsRUFBYU4sRUFBa0N0SCxPQUFRNEgsSSxFQUF2RUEsR0EyRFQsT0FBT3BCLEdBRVQsWUFBQUUsZ0NBQUEsU0FBZ0NGLEdBSTlCLEksTUFESW1DLEVBRkVDLEVBQTZCLEdBQy9CaEosRUFBSSxFQUVEQSxFQUFJNEcsRUFBU3hHLFFBQVEsQ0FDMUIsSUFBSyxJQUFJSCxFQUFJLEVBQUdBLEVBQUkyRyxFQUFTeEcsT0FBUUgsSUFDbkMsR0FBSUQsSUFBTUMsR0FDSnZFLEtBQUt3TCxpQkFBaUJOLEVBQVM1RyxHQUFJNEcsRUFBUzNHLElBQUssRUFLbkQsRUFBQTJHLEVBQVM1RyxJQUFHdUcsT0FBTSxZQUFFLEVBQUcsR0FBTUssRUFBUzNHLEtBSXRDMkcsRUFBU0wsT0FBT3RHLEVBQUcsR0FDZkEsRUFBSUQsR0FDTkEsS0FFRitJLEVBQVVyTixLQUFLd0wsaUJBQWlCTixFQUFTNUcsR0FBSTRHLEVBQVM1RyxLQUFPdEUsS0FBSzJMLGFBQWFULEVBQVM1RyxHQUFJNEcsRUFBUzVHLEtBQ3ZGLElBQ1o0RyxFQUFTNUcsR0FBR3VHLE9BQU8sRUFBR3dDLEdBSXRCQyxFQUFlbEQsS0FBS2MsRUFBUzVHLElBQzdCNEcsRUFBU0wsT0FBT3ZHLEVBQUcsSUFFckJBLEdBQUssRUFDTCxNQUlOQSxJQU1GLE9BQU9nSixHQUVYLEVBcmlCQSxHQ1JNQyxFQUFZN0csU0FBUzhHLGdCQUFnQiw2QkFBOEIsS0FDekVELEVBQVVFLGFBQWEsU0FBVSxTQUNqQ0YsRUFBVUUsYUFBYSxlQUFnQixTQUV2QyxJQUFNQyxFQUFlaEgsU0FBUzhHLGdCQUFnQiw2QkFBOEIsUUFDNUVFLEVBQWFELGFBQWEsbUJBQW9CLGVBRTlDLElBQU1FLEVBQWlCakgsU0FBUzhHLGdCQUFnQiw2QkFBOEIsUUFDOUVHLEVBQWVGLGFBQ2IsSUFDQSxxRkFLRkUsRUFBZUYsYUFBYSxPQUFRLFNBRXBDLElBQU1HLEVBQWVsSCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixRQUM1RUksRUFBYUgsYUFBYSxjQUFlLFVBQ3pDRyxFQUFhSCxhQUFhLHFCQUFzQixXQUNoREcsRUFBYUgsYUFBYSxjQUFlLG1EQUN6Q0csRUFBYUgsYUFBYSxjQUFlLE9BQ3pDRyxFQUFhSCxhQUFhLFlBQWEsUUFFdkNGLEVBQVVNLFlBQVlILEdBQ3RCSCxFQUFVTSxZQUFZRixHQUN0QkosRUFBVU0sWUFBWUYsRUFBZUcsYUFDckNQLEVBQVVNLFlBQVlELEdBQ3RCTCxFQUFVTSxZQUFZRCxFQUFhRSxhQUduQyxJQUFNQyxFQUFpQnJILFNBQVM4RyxnQkFBZ0IsNkJBQThCLEtBQzlFTyxFQUFlTixhQUFhLFNBQVUsU0FDdENNLEVBQWVOLGFBQWEsZUFBZ0IsU0FFNUMsSUFBTU8sRUFBZ0J0SCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixVQUM3RVEsRUFBY1AsYUFBYSxPQUFRLFNBQ25DTyxFQUFjUCxhQUFhLElBQUssS0FFaEMsSUFBTVEsRUFBb0J2SCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixRQUNqRlMsRUFBa0JSLGFBQWEsWUFBYSxvQkFDNUNRLEVBQWtCUixhQUFhLGNBQWUsVUFDOUNRLEVBQWtCUixhQUFhLHFCQUFzQixXQUNyRFEsRUFBa0JSLGFBQWEsY0FBZSxtREFDOUNRLEVBQWtCUixhQUFhLGNBQWUsT0FDOUNRLEVBQWtCUixhQUFhLFlBQWEsUUFDNUNRLEVBQWtCUixhQUFhLGFBQWMsVUFFN0NNLEVBQWVGLFlBQVlHLEdBQzNCRCxFQUFlRixZQUFZSSxHQUczQixJQUFNQyxFQUFrQnhILFNBQVM4RyxnQkFBZ0IsNkJBQThCLFFBQy9FVSxFQUFnQlQsYUFBYSxPQUFRLFNBQ3JDUyxFQUFnQlQsYUFBYSxlQUFnQixPQUM3Q1MsRUFBZ0JULGFBQWEsZUFBZ0IsU0FDN0NTLEVBQWdCVCxhQUFhLG1CQUFvQixRQUNqRFMsRUFBZ0JULGFBQWEsU0FBVSxTQUd2QyxJQUFNVSxFQUFrQnpILFNBQVM4RyxnQkFBZ0IsNkJBQThCLEtBQy9FVyxFQUFnQlYsYUFBYSxZQUFhLHVCQUUxQyxJQUFNVyxFQUE4QjFILFNBQVM4RyxnQkFBZ0IsNkJBQThCLFFBQzNGWSxFQUE0QlgsYUFBYSxPQUFRLHFCQUNqRFcsRUFBNEJYLGFBQWEsZUFBZ0IsS0FFekQsSUFBTVksRUFBMkIzSCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixRQUN4RmEsRUFBeUJaLGFBQWEsZUFBZ0IsS0FDdERZLEVBQXlCWixhQUFhLFNBQVUsU0FDaERZLEVBQXlCWixhQUFhLGVBQWdCLFNBRXRELElBQU1hLEVBQTBCNUgsU0FBUzhHLGdCQUFnQiw2QkFBOEIsS0FFdkZXLEVBQWdCTixZQUFZUyxHQUM1QkgsRUFBZ0JOLFlBQVlPLEdBQzVCRCxFQUFnQk4sWUFBWVEsR0FHNUIsSUFBTUUsRUFBZ0M3SCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixRQUd2RmdCLEVBQWU5SCxTQUFTOEcsZ0JBQWdCLDZCQUE4QixXQUM1RWdCLEVBQWFDLEdBQUssY0FDbEJELEVBQWFmLGFBQWEsZUFBZ0Isa0JBQzFDZSxFQUFhZixhQUFhLFFBQVMsTUFDbkNlLEVBQWFmLGFBQWEsU0FBVSxNQUNwQ2UsRUFBYWYsYUFBYSxTQUFVLFdBQ3BDZSxFQUFhZixhQUFhLGVBQWdCLFNBeUIxQyxJQXZCQSxJQUFJaUIsRUFBWWhJLFNBQVM4RyxnQkFBZ0IsNkJBQThCLFFBdUJ2RCxNQXRCQSxDQUNkLGNBQ0EsZ0JBRUEsZUFDQSxlQUVBLGNBR0EsaUJBRUEsZUFFQSxjQUNBLGNBQ0EsZUFFQSxlQUNBLGNBQ0EsZ0JBRWMsZUFBUyxDQUFwQixJQUFNbUIsRUFBQyxLQUNWRCxFQUFVakIsYUFBYSxJQUFLa0IsR0FDNUJILEVBQWFYLFlBQVlhLEdBQ3pCQSxFQUFZQSxFQUFVWixZQUl4QixJQUFNYyxFQUFpQmxJLFNBQVNtSSxjQUFjLFVBQzlDRCxFQUFlRSxNQUFNQyxTQUFXLFdBQ2hDSCxFQUFlRSxNQUFNRSxVQUFZLG1CQUNqQ0osRUFBZUUsTUFBTUcsS0FBTyxPQWE1QixJQVpBLElBQUlDLEVBQWlCeEksU0FBU21JLGNBQWMsVUFDdENNLEVBQVMsQ0FDYixnQkFDQSxTQUNBLFlBRUlDLEVBQVMsSUFBSTFKLElBQUksQ0FDckIsQ0FBQ3lKLEVBQU8sR0FBSSxXQUNaLENBQUNBLEVBQU8sR0FBSSxXQUNaLENBQUNBLEVBQU8sR0FBSSxhQUdNLE1BQUFBLEVBQUEsZUFBUSxDQUF2QixJQUFNRSxFQUFLLEtBQ2RILEVBQWVJLFVBQVlELEVBQzNCSCxFQUFlekIsYUFBYSxRQUFTNEIsR0FDckNULEVBQWVmLFlBQVlxQixHQUMzQkEsRUFBaUJBLEVBQWVwQixZQUlsQyxJQUFNeUIsRUFBWTdJLFNBQVNtSSxjQUFjLEtBQ3pDVSxFQUFVVCxNQUFNVSxnQkFBa0IsT0FDbENELEVBQVVULE1BQU1XLFdBQWEsa0RBQzdCRixFQUFVVCxNQUFNWSxXQUFhLE1BQzdCSCxFQUFVVCxNQUFNYSxTQUFXLE9BQzNCSixFQUFVVCxNQUFNYyxPQUFTLE9BQ3pCTCxFQUFVVCxNQUFNZSxZQUFjLE1BRzlCLElBQU1DLEVBQWtCcEosU0FBUzhHLGdCQUFnQiw2QkFBOEIsUUFDL0VzQyxFQUFnQnJDLGFBQWEsT0FBUSxTQzdKckIsSUFBSXNDLEVBREEsSURnS3BCLFdBZ0JFLGFBWlEsS0FBQUMsZ0JBQWtCdEosU0FBU21JLGNBQWMsT0FDekMsS0FBQW9CLGVBQWlCdkosU0FBUzhHLGdCQUFnQiw2QkFBOEIsS0FDeEUsS0FBQWhHLGlCQUFtQmQsU0FBUzhHLGdCQUFnQiw2QkFBOEIsS0FDMUUsS0FBQTBDLGNBQWdCeEosU0FBUzhHLGdCQUFnQiw2QkFBOEIsS0FDdkUsS0FBQTJDLGdCQUFrQnpKLFNBQVM4RyxnQkFBZ0IsNkJBQThCLEtBRXpFLEtBQUE0QyxXQUFhLElBQUkxSyxJQUNqQixLQUFBMkssaUJBQW1CLElBQUkzSyxJQUN2QixLQUFBNEssWUFBYyxJQUFJNUssSUFDbEIsS0FBQTZLLFNBQXdELEdBSTlEdlEsS0FBS3dRLGVBQWlCVixFQUFnQmhDLFlBQ3RDOU4sS0FBS3lRLElBQU0vSixTQUFTUSxjQUFjLFlBQ2xDbEgsS0FBSzBRLFdBQWFoSyxTQUFTUSxjQUFjLFlBQ3pDbEgsS0FBSzJRLFdBQWFqSyxTQUFTUSxjQUFjLGtCQUN6Q2xILEtBQUt5USxJQUFJRyxRQUFRNVEsS0FBS3dRLGdCQUN0QnhRLEtBQUt5USxJQUFJNUMsWUFBWVcsR0FDckJ4TyxLQUFLeVEsSUFBSTVDLFlBQVk3TixLQUFLd0gsa0JBQzFCeEgsS0FBS3lRLElBQUk1QyxZQUFZN04sS0FBS2tRLGVBQzFCbFEsS0FBS3lRLElBQUk1QyxZQUFZN04sS0FBS2lRLGdCQUMxQmpRLEtBQUs2USxvQkFBc0JuSyxTQUFTUSxjQUFjLGVBQ2xEbEgsS0FBSzJRLFdBQVc5QyxZQUFZN04sS0FBS21RLGlCQUNqQ25RLEtBQUswUSxXQUFXN0MsWUFBWTdOLEtBQUtnUSxpQkFtTHJDLE9BakxVLFlBQUFjLGlCQUFSLFNBQXlCTCxFQUFpQjdKLEVBQWVtSyxHQUNuRC9RLEtBQUt1USxTQUFTM0osSUFDaEI2SixFQUFJTyxvQkFBb0JwSyxFQUFPNUcsS0FBS3VRLFNBQVMzSixJQUUvQzVHLEtBQUt1USxTQUFTM0osR0FBU21LLEVBQ3ZCTixFQUFJOUosaUJBQWlCQyxFQUFPNUcsS0FBS3VRLFNBQVMzSixLQUU1QyxZQUFBZ0Isb0JBQUEsU0FBb0JtSixHQUNsQi9RLEtBQUs4USxpQkFBaUI5USxLQUFLeVEsSUFBSyxZQUFhTSxJQUUvQyxZQUFBeEksa0JBQUEsU0FBa0J3SSxHQUNoQi9RLEtBQUs4USxpQkFBaUI5USxLQUFLeVEsSUFBSyxVQUFXTSxJQUU3QyxZQUFBdEksb0JBQUEsU0FBb0JzSSxHQUNsQi9RLEtBQUs4USxpQkFBaUI5USxLQUFLeVEsSUFBSyxZQUFhTSxJQUUvQyxZQUFBNUgsMkJBQUEsU0FBMkI0SCxHQUN6Qi9RLEtBQUs4USxpQkFBaUI5USxLQUFLMlEsV0FBWSxZQUFhSSxJQUV0RCxZQUFBeEgseUJBQUEsU0FBeUJ3SCxHQUN2Qi9RLEtBQUs4USxpQkFBaUI5USxLQUFLMlEsV0FBWSxVQUFXSSxJQUVwRCxZQUFBdkgsMkJBQUEsU0FBMkJ1SCxHQUN6Qi9RLEtBQUs4USxpQkFBaUI5USxLQUFLMlEsV0FBWSxZQUFhSSxJQUV0RCxZQUFBbEksU0FBQSxTQUFTM0YsRUFBWStOLEdBQ25CLElBQUlDLEVBQ0NsUixLQUFLb1EsV0FBV2UsSUFBSWpPLEdBS3ZCZ08sRUFBT2xSLEtBQUtvUSxXQUFXdEssSUFBSTVDLElBSjNCZ08sRUFBTzNELEVBQVVPLFdBQVUsR0FDM0I5TixLQUFLa1EsY0FBY3JDLFlBQVlxRCxHQUMvQmxSLEtBQUtvUSxXQUFXckssSUFBSTdDLEVBQU1nTyxJQUk1QixJQUFNRSxFQUFVRixFQUFLRyxTQUFTLEdBQ3hCQyxFQUFxQkosRUFBS0csU0FBUyxHQUNuQ0UsRUFBbUJMLEVBQUtHLFNBQVMsR0FDakNHLEVBQWVOLEVBQUtHLFNBQVMsR0FDN0JJLEVBQWFQLEVBQUtHLFNBQVMsR0FDM0I1UixFQUFLeUQsRUFBS3pELEdBQUd5RixVQUNieEYsRUFBS3dELEVBQUt4RCxHQUFHd0YsVUFDYnZGLEVBQUt1RCxFQUFLdkQsR0FBR3VGLFVBQ2J0RixFQUFLc0QsRUFBS3RELEdBQUdzRixVQUNuQmtNLEVBQVEzRCxhQUFhLEtBQU1oTyxHQUMzQjJSLEVBQVEzRCxhQUFhLEtBQU0vTixHQUMzQjBSLEVBQVEzRCxhQUFhLEtBQU05TixHQUMzQnlSLEVBQVEzRCxhQUFhLEtBQU03TixHQUMzQjRSLEVBQWFsQyxVQUFZMkIsRUFDekJRLEVBQVduQyxVQUFZMkIsRUFDdkIsSUFBTXZPLEVBQVEsS0FBT1EsRUFBS0YsR0FBRzFCLElBQUk0QixFQUFLSCxJQUFJTCxRQUFVcEMsS0FBS3VDLEdBQUssR0FBS3ZDLEtBQUt1QyxHQUNsRVMsRUFBU0osRUFBS0ksT0FBTyxJQUNyQkMsRUFBUUwsRUFBS0ssTUFBTSxJQUN6QitOLEVBQW1CN0QsYUFBYSxZQUFhLGFBQWFoTyxFQUFFLEtBQUtDLEVBQUUsYUFBWTBNLE1BQU0xSixHQUFTLEVBQUlBLEdBQUssS0FDdkc2TyxFQUFpQjlELGFBQWEsWUFBYSxhQUFhOU4sRUFBRSxLQUFLQyxFQUFFLGFBQVl3TSxNQUFNMUosR0FBUyxFQUFJLElBQU1BLEdBQUssS0FDM0c4TyxFQUFhL0QsYUFBYSxZQUFhLGNBQWFyQixNQUFNOUksRUFBT2hFLEdBQUtHLEVBQUs2RCxFQUFPaEUsRUFBRTRGLFdBQVMsTUFBS2tILE1BQU05SSxFQUFPL0QsR0FBS0csRUFBSzRELEVBQU8vRCxFQUFFMkYsV0FBUyxLQUMzSXVNLEVBQVdoRSxhQUFhLFlBQWEsY0FBYXJCLE1BQU03SSxFQUFNakUsR0FBS0ssRUFBSzRELEVBQU1qRSxFQUFFNEYsV0FBUyxNQUFLa0gsTUFBTTdJLEVBQU1oRSxHQUFLSyxFQUFLMkQsRUFBTWhFLEVBQUUyRixXQUFTLE1BRXZJLFlBQUF3TSxVQUFBLFNBQVV4TyxHQUNSLElBQU1nTyxFQUFPbFIsS0FBS29RLFdBQVd0SyxJQUFJNUMsR0FDN0JnTyxJQUNGbFIsS0FBS2tRLGNBQWN5QixZQUFZVCxHQUMvQmxSLEtBQUtvUSxXQUFXd0IsT0FBTzFPLEtBRzNCLFlBQUFtSCxVQUFBLFNBQVV3SCxFQUFnQlosR0FDeEIsSUFBSUMsRUFDQ2xSLEtBQUtzUSxZQUFZYSxJQUFJVSxHQUt4QlgsRUFBT2xSLEtBQUtzUSxZQUFZeEssSUFBSStMLElBSjVCWCxFQUFPbkQsRUFBZUQsV0FBVSxHQUNoQzlOLEtBQUtpUSxlQUFlcEMsWUFBWXFELEdBQ2hDbFIsS0FBS3NRLFlBQVl2SyxJQUFJOEwsRUFBT1gsSUFJOUIsSUFBTVksRUFBVVosRUFBS0csU0FBUyxHQUM5QkgsRUFBS3pELGFBQWEsWUFBYSxhQUFhb0UsRUFBTXZTLEVBQUU0RixVQUFTLEtBQUsyTSxFQUFNdFMsRUFBRTJGLFVBQVMsS0FDbkY0TSxFQUFReEMsVUFBWTJCLEdBRWQsWUFBQWMsZUFBUixTQUF1Qi9ILEdBQ3JCLEtBQU9BLEVBQVVnSSxZQUNmaEksRUFBVTJILFlBQVkzSCxFQUFVZ0ksYUFHcEMsWUFBQUMsbUJBQUEsV0FDRWpTLEtBQUsrUixlQUFlL1IsS0FBS2lRLGlCQUUzQixZQUFBL0csWUFBQSxTQUFZNUQsRUFBa0I0TSxHQUM1QixJQUFJQyxPQUR3QixJQUFBRCxNQUFPLEtBQU81UixLQUFLOFIsTUFBTSxTQUFtQjlSLEtBQUsrUixVQUFZLEtBQUtwTixTQUFTLEtBRWxHakYsS0FBS3FRLGlCQUFpQmMsSUFBSTdMLEdBSzdCNk0sRUFBVW5TLEtBQUtxUSxpQkFBaUJ2SyxJQUFJUixJQUpwQzZNLEVBQVVqRSxFQUFnQkosWUFDMUI5TixLQUFLd0gsaUJBQWlCcUcsWUFBWXNFLEdBQ2xDblMsS0FBS3FRLGlCQUFpQnRLLElBQUlULEVBQVM2TSxJQUlyQ0EsRUFBUTFFLGFBQWEsSUFBSyxLQUFPbkksRUFBUWxCLFNBQVNZLEtBQUksU0FBQWpGLEdBQUssT0FBR0EsRUFBRVQsRUFBRTRGLFVBQVMsSUFBSW5GLEVBQUVSLEVBQUUyRixhQUFhQyxLQUFLLE9BQVMsTUFDOUdnTixFQUFRMUUsYUFBYSxPQUFReUUsSUFFL0IsWUFBQXBKLFlBQUEsU0FBWXhELEdBQ1Z0RixLQUFLd1EsZUFBZS9DLGFBQWEsSUFBSyxLQUFPbkksRUFBUWxCLFNBQVNZLEtBQUksU0FBQWpGLEdBQUssT0FBR0EsRUFBRVQsRUFBRTRGLFVBQVMsSUFBSW5GLEVBQUVSLEVBQUUyRixhQUFhQyxLQUFLLE9BQVMsT0FFNUgsWUFBQThGLGNBQUEsV0FDRWpMLEtBQUsrUixlQUFlL1IsS0FBS3dILG1CQUczQixZQUFBZ0IsV0FBQSxTQUFXeUIsR0FBWCxXQUNFakssS0FBSytSLGVBQWUvUixLQUFLbVEsaUJBQ3pCblEsS0FBSytSLGVBQWUvUixLQUFLZ1EsaUJBQ3pCLElBR01yQixFQUFJLE9BQUssS0FBYXpKLFVBQWxCLFNBQ0gsSUFBeUJBLFVBRHRCLE1BRUgrRSxFQUFPOUYsUUFBUWUsVUFGWixNQURPLElBSURBLFVBSE4sT0FJRitFLEVBQU85RixRQUFRZSxVQUpiLE1BS0gsSUFBeUJBLFVBQzFCb04sRUFBVTNELFFBUkUsSUFTRHpKLFVBRER5SixRQUVULElBQXFDekosVUFGNUJ5SixNQUdUMUUsRUFBTzlGLFFBQVFlLFVBSE55SixRQUlQLElBQTRCekosVUFKckJ5SixPQUtSMUUsRUFBTzlGLFFBQVFlLFVBTFB5SixRQU1ULElBQXFDekosVUFBUyxLQUUvQ2dNLEVBQU8vQyxFQUFnQkwsV0FBVSxHQUNqQ3pJLEVBQVk2TCxFQUFLRyxTQUFTLEdBQzFCa0IsRUFBZ0JyQixFQUFLRyxTQUFTLEdBQzlCbUIsRUFBYXRCLEVBQUtHLFNBQVMsR0FDakNrQixFQUFjOUUsYUFBYSxJQUFLNkUsR0FDaENFLEVBQVcvRSxhQUFhLElBQUtrQixHQUc3QixJQURBLElBQUk4RCxFQUFNLEUsV0FDRG5PLEdBQ1AsSUFBTXNCLEVBQW9CMkksRUFBOEJULFlBQ3hEbEksRUFBa0I2SCxhQUFhLE1BQUssSUFBZ0J2SSxXQUNwRFUsRUFBa0I2SCxhQUFhLElBQUtnRixFQUFJdk4sV0FDeENVLEVBQWtCNkgsYUFBYSxRQTNCaEIsSUEyQmtDdkksV0FDakRVLEVBQWtCNkgsYUFBYSxTQUFVeEQsRUFBTzVFLFVBQVVmLEdBQUdILE1BQU1lLFdBQ25FVSxFQUFrQjZILGFBQWEsT0FBUTJCLEVBQU90SixJQUFJbUUsRUFBTzVFLFVBQVVmLEdBQUdKLE9BQ3RFbUIsRUFBVXdJLFlBQVlqSSxHQUV0QixJQUFNOE0sRUFBUzlELEVBQWVkLFdBQVUsR0FDeEM0RSxFQUFPeEwsY0FBYyxpQkFBaUIrQyxFQUFPNUUsVUFBVWYsR0FBR0osS0FBSSxNQUFNdUosYUFBYSxXQUFZLFlBQzdGaUYsRUFBTy9MLGlCQUFpQixVQUFVLFNBQUFDLEdBQ2hDcUQsRUFBTzVFLFVBQVVmLEdBQUdKLEtBQU93TyxFQUFPckQsTUFDbEN6SixFQUFrQjZILGFBQWEsT0FBUTJCLEVBQU90SixJQUFJNE0sRUFBT3JELFFBQ3pELEVBQUs1Rix3QkFFUGlKLEVBQU81RCxNQUFNMkQsS0FBT0EsRUFBTSxJQUFNeEksRUFBTzVFLFVBQVVmLEdBQUdILE1BQVEsR0FBR2UsVUFBWSxLQUUzRSxFQUFLOEssZ0JBQWdCbkMsWUFBWTZFLEdBRWpDRCxHQUFPeEksRUFBTzVFLFVBQVVmLEdBQUdILE8sT0FwQnBCRyxFQUFJLEVBQUdBLEVBQUkyRixFQUFPNUUsVUFBVVgsT0FBUUosSSxFQUFwQ0EsR0F1QlR0RSxLQUFLbVEsZ0JBQWdCdEMsWUFBWXFELEdBQ2pDbFIsS0FBSzBRLFdBQVcxSixVQUFVNUYsSUFBSSxZQUVoQyxZQUFBK0YsWUFBQSxXQUNFbkgsS0FBSzBRLFdBQVcxSixVQUFVQyxPQUFPLFdBQ2pDakgsS0FBSytSLGVBQWUvUixLQUFLbVEsaUJBQ3pCblEsS0FBSytSLGVBQWUvUixLQUFLZ1Esa0JBRTNCLFlBQUF6RixlQUFBLFNBQWU5RSxHQUFmLFdBQ0V6RixLQUFLK1IsZUFBZS9SLEtBQUs2USxxQkFDekIsSUFBTTlNLEVBQUl3TCxFQUFVekIsWUFDcEIvSixFQUFFdUwsVUFBWSxZQUNkdkwsRUFBRStLLE1BQU02RCxVQUFZLE9BQ3BCNU8sRUFBRStLLE1BQU04RCxlQUFpQixZQUN6QjVTLEtBQUs2USxvQkFBb0JoRCxZQUFZOUosR0FDckMwQixFQUFXRSxTQUFRLFNBQUNFLEVBQVUzQixHQUM1QixJQUFNSCxFQUFJd0wsRUFBVXpCLFlBQ3BCL0osRUFBRXVMLFVBQWVwTCxFQUFJLE1BQU0yQixFQUFXLEtBQWdCWCxRQUFRLEdBQUUsT0FDaEVuQixFQUFFK0ssTUFBTStELFdBQWEsYUFBYXpELEVBQU90SixJQUFJNUIsR0FDN0MsRUFBSzJNLG9CQUFvQmhELFlBQVk5SixPQUczQyxFQS9NQSxNIiwiZmlsZSI6Im1haW4uanMiLCJzb3VyY2VzQ29udGVudCI6WyJleHBvcnQgY2xhc3MgVmVjdG9yMiB7XHJcbiAgY29uc3RydWN0b3IocHVibGljIHggPSAwLCBwdWJsaWMgeSA9IDApIHt9XHJcbiAgc3RhdGljIGRvdFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB4MSAqIHgyICsgeTEgKiB5MjtcclxuICB9XHJcbiAgc3RhdGljIGRvdCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmRvdFJhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBkb3Qob3RoZXI6IFZlY3RvcjIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZG90KHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGNyb3NzUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHgxICogeTIgLSB4MiAqIHkxO1xyXG4gIH1cclxuICBzdGF0aWMgY3Jvc3ModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5jcm9zc1Jhdyh1LngsIHUueSwgdi54LCB2LnkpO1xyXG4gIH1cclxuICBjcm9zcyhvdGhlcjogVmVjdG9yMik6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5jcm9zcyh0aGlzLCBvdGhlcik7XHJcbiAgfVxyXG4gIHN0YXRpYyBsZW4yUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnBvdyh4LCAyKSArIE1hdGgucG93KHksIDIpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuMih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlbjJSYXcodS54LCB1LnkpO1xyXG4gIH1cclxuICBsZW4yKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5sZW4yKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbGVuUmF3KHg6IG51bWJlciwgeTogbnVtYmVyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiBNYXRoLnNxcnQodGhpcy5sZW4yUmF3KHgsIHkpKTtcclxuICB9XHJcbiAgc3RhdGljIGxlbih1OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLmxlblJhdyh1LngsIHUueSk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIubGVuKHRoaXMpO1xyXG4gIH1cclxuICBzdGF0aWMgbm9ybWFsaXplUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xyXG4gICAgY29uc3QgY29lZiA9IGJ5IC8gdGhpcy5sZW5SYXcoeCwgeSk7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcoeCwgeSwgY29lZik7XHJcbiAgfVxyXG4gIHN0YXRpYyBub3JtYWxpemUodTogVmVjdG9yMiwgYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLm5vcm1hbGl6ZVJhdyh1LngsIHUueSwgYnkpO1xyXG4gIH1cclxuICBub3JtYWxpemUoYnk6IG51bWJlciA9IDEpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm5vcm1hbGl6ZSh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHNSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHgxID09PSB4MiAmJiB5MSA9PT0geTI7XHJcbiAgfVxyXG4gIHN0YXRpYyBlcXVhbHModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIHRoaXMuZXF1YWxzUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGVxdWFscyhvdGhlcjogVmVjdG9yMik6IGJvb2xlYW4ge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuZXF1YWxzKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIGFkZFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgKyB4MiwgeTEgKyB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBhZGQodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuYWRkUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIGFkZChvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuYWRkKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIHN1YlJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeDEgLSB4MiwgeTEgLSB5Mik7XHJcbiAgfVxyXG4gIHN0YXRpYyBzdWIodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMuc3ViUmF3KHUueCwgdS55LCB2LngsIHYueSk7XHJcbiAgfVxyXG4gIHN1YihvdGhlcjogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuc3ViKHRoaXMsIG90aGVyKTtcclxuICB9XHJcbiAgc3RhdGljIG11bFJhdyh4OiBudW1iZXIsIHk6IG51bWJlciwgYnk6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKHggKiBieSwgeSAqIGJ5KTtcclxuICB9XHJcbiAgc3RhdGljIG11bCh1OiBWZWN0b3IyLCBieTogbnVtYmVyKTogVmVjdG9yMiB7XHJcbiAgICByZXR1cm4gdGhpcy5tdWxSYXcodS54LCB1LnksIGJ5KTtcclxuICB9XHJcbiAgbXVsKGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiBWZWN0b3IyLm11bCh0aGlzLCBieSk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25UaW1lc1JhdyhcclxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXHJcbiAgICBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyXHJcbiAgKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICBjb25zdCBkZXQgPSB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGV4IC0gc3gsIGV5IC0gc3kpO1xyXG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KGV4IC0gc3gsIGV5IC0gc3ksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0LFxyXG4gICAgICB0aGlzLmNyb3NzUmF3KHR4IC0gZngsIHR5IC0gZnksIGZ4IC0gc3gsIGZ5IC0gc3kpIC8gZGV0XHJcbiAgICApO1xyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uVGltZXMoXHJcbiAgICBmcm9tOiBWZWN0b3IyLCB0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMlxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvblRpbWVzKHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gVmVjdG9yMi5pbnRlcnNlY3Rpb25UaW1lcyh0aGlzLCB0bywgc3RhcnQsIGVuZCk7XHJcbiAgfVxyXG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25SYXcoXHJcbiAgICBmeDogbnVtYmVyLCBmeTogbnVtYmVyLCB0eDogbnVtYmVyLCB0eTogbnVtYmVyLFxyXG4gICAgc3g6IG51bWJlciwgc3k6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlclxyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgY29uc3QgdGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzUmF3KGZ4LCBmeSwgdHgsIHR5LCBzeCwgc3ksIGV4LCBleSk7XHJcbiAgICBpZiAodGltZXMpIHtcclxuICAgICAgdGltZXMueSA9IGZ5ICsgKHR5IC0gZnkpICogdGltZXMueDtcclxuICAgICAgdGltZXMueCA9IGZ4ICsgKHR4IC0gZngpICogdGltZXMueDtcclxuICAgICAgcmV0dXJuIHRpbWVzO1xyXG4gICAgfVxyXG4gIH1cclxuICBzdGF0aWMgaW50ZXJzZWN0aW9uKGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XHJcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25SYXcoZnJvbS54LCBmcm9tLnksIHRvLngsIHRvLnksIHN0YXJ0LngsIHN0YXJ0LnksIGVuZC54LCBlbmQueSk7XHJcbiAgfVxyXG4gIGludGVyc2VjdGlvbih0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xyXG4gICAgcmV0dXJuIFZlY3RvcjIuaW50ZXJzZWN0aW9uKHRoaXMsIHRvLCBzdGFydCwgZW5kKTtcclxuICB9XHJcbiAgYW5nbGUob3RoZXI/OiBWZWN0b3IyKTogbnVtYmVyIHtcclxuICAgIGlmIChvdGhlcikge1xyXG4gICAgICAgY29uc3QgYTEgPSB0aGlzLmFuZ2xlKCk7XHJcbiAgICAgICBjb25zdCBhMiA9IG90aGVyLmFuZ2xlKCk7XHJcbiAgICAgICBpZiAoYTIgPCBhMSkge1xyXG4gICAgICAgIHJldHVybiBhMiArIDIgKiBNYXRoLlBJIC0gYTE7XHJcbiAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgIHJldHVybiBhMiAtIGExO1xyXG4gICAgICAgfVxyXG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPiAwKSB7XHJcbiAgICAgIHJldHVybiBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9IGVsc2Uge1xyXG4gICAgICByZXR1cm4gMiAqIE1hdGguUEkgLSBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XHJcbiAgICB9XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBMaW5lIHtcclxuICBzdGF0aWMgZnJvbVZlY3RvcnModjE6IFZlY3RvcjIsIHYyOiBWZWN0b3IyKTogTGluZSB7XHJcbiAgICBjb25zdCBsaW5lID0gbmV3IExpbmUoKTtcclxuICAgIGxpbmUudjEgPSB2MTtcclxuICAgIGxpbmUudjIgPSB2MjtcclxuICAgIHJldHVybiBsaW5lO1xyXG4gIH1cclxuICB2MTogVmVjdG9yMjtcclxuICB2MjogVmVjdG9yMjtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHgxPzogbnVtYmVyLFxyXG4gICAgeTE/OiBudW1iZXIsXHJcbiAgICB4Mj86IG51bWJlcixcclxuICAgIHkyPzogbnVtYmVyXHJcbiAgKSB7XHJcbiAgICB0aGlzLnYxID0gbmV3IFZlY3RvcjIoeDEsIHkxKTtcclxuICAgIHRoaXMudjIgPSBuZXcgVmVjdG9yMih4MiwgeTIpO1xyXG4gIH1cclxuICBnZXQgeDEoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLng7XHJcbiAgfVxyXG4gIGdldCB5MSgpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEueTtcclxuICB9XHJcbiAgZ2V0IHgyKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy52Mi54O1xyXG4gIH1cclxuICBnZXQgeTIoKTogbnVtYmVyIHtcclxuICAgIHJldHVybiB0aGlzLnYyLnk7XHJcbiAgfVxyXG4gIGxlbigpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuIHRoaXMudjIuc3ViKHRoaXMudjEpLmxlbigpO1xyXG4gIH1cclxuICBwb2ludEF0KHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCh0KSk7XHJcbiAgfVxyXG4gIGJlZm9yZSh0OiBudW1iZXIpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmFkZCh0aGlzLnYyLnN1Yih0aGlzLnYxKS5tdWwoLXQgLyB0aGlzLmxlbigpKSk7XHJcbiAgfVxyXG4gIGFmdGVyKHQ6IG51bWJlcik6IFZlY3RvcjIge1xyXG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCgodGhpcy5sZW4oKSArIHQpIC8gdGhpcy5sZW4oKSkpO1xyXG4gIH1cclxuICBpbnRlcnNlY3Rpb25UaW1lc1dpdGgob3RoZXI6IExpbmUpOiBWZWN0b3IyIHtcclxuICAgIHJldHVybiB0aGlzLnYxLmludGVyc2VjdGlvblRpbWVzKHRoaXMudjIsIG90aGVyLnYxLCBvdGhlci52Mik7XHJcbiAgfVxyXG4gIHVwZGF0ZShkeDEgPSAwLCBkeTEgPSAwLCBkeDIgPSAwLCBkeTIgPSAwKTogdm9pZCB7XHJcbiAgICB0aGlzLnYxLnggKz0gZHgxO1xyXG4gICAgdGhpcy52MS55ICs9IGR5MTtcclxuICAgIHRoaXMudjIueCArPSBkeDI7XHJcbiAgICB0aGlzLnYyLnkgKz0gZHkyO1xyXG4gIH1cclxuICBuZWFyZXN0VG8ocDogVmVjdG9yMik6IFZlY3RvcjIge1xyXG4gICAgaWYgKHRoaXMudjEuZXF1YWxzKHRoaXMudjIpKSB7XHJcbiAgICAgIHJldHVybiBuZXcgVmVjdG9yMih0aGlzLnYxLngsIHRoaXMudjEueSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCB1ID0gdGhpcy52Mi5zdWIodGhpcy52MSk7XHJcbiAgICBjb25zdCB0ID0gdS5kb3QocC5zdWIodGhpcy52MSkpIC8gdS5sZW4yKCk7XHJcbiAgICByZXR1cm4gdGhpcy5wb2ludEF0KE1hdGgubWF4KDAsIE1hdGgubWluKHQsIDEpKSk7XHJcbiAgfVxyXG59IiwiZXhwb3J0IGNsYXNzIExpdGhvbG9naWNhbExheWVyIHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyB0eXBlOiBzdHJpbmcsXHJcbiAgICBwdWJsaWMgZGVwdGg6IG51bWJlcixcclxuICApIHtcclxuXHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcclxuXHJcbmV4cG9ydCBjbGFzcyBQb2x5Z29uIHtcclxuICBjb25zdHJ1Y3RvcihyZWFkb25seSB2ZXJ0aWNlczogVmVjdG9yMltdID0gW10pIHtcclxuXHJcbiAgfVxyXG4gIHByaXZhdGUgYXJlYUJldHdlZW4oaTogbnVtYmVyLCBqOiBudW1iZXIpOiBudW1iZXIge1xyXG4gICAgcmV0dXJuICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHRoaXMudmVydGljZXNbaV0ueSArIHRoaXMudmVydGljZXNbal0ueSkgLyAyO1xyXG4gIH1cclxuICBhcmVhKCk6IG51bWJlciB7XHJcbiAgICBsZXQgYSA9IDA7XHJcbiAgICBsZXQgaSA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTtcclxuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xyXG4gICAgICBhICs9IHRoaXMuYXJlYUJldHdlZW4oaSwgaik7XHJcbiAgICAgIGkgPSBqO1xyXG4gICAgfVxyXG4gICAgcmV0dXJuIGE7XHJcbiAgfVxyXG4gIGNvbnRhaW5zKHY6IFZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgIGxldCBjID0gZmFsc2U7XHJcbiAgICBmb3IgKGxldCBpID0gMCwgaiA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTsgaSA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBqID0gaSsrKSB7XHJcbiAgICAgIGlmIChcclxuICAgICAgICB0aGlzLnZlcnRpY2VzW2ldLnkgPiB2LnkgIT09IHRoaXMudmVydGljZXNbal0ueSA+IHYueSAmJlxyXG4gICAgICAgIHYueCA8ICh0aGlzLnZlcnRpY2VzW2pdLnggLSB0aGlzLnZlcnRpY2VzW2ldLngpICogKHYueSAtIHRoaXMudmVydGljZXNbaV0ueSkgLyAodGhpcy52ZXJ0aWNlc1tqXS55IC0gdGhpcy52ZXJ0aWNlc1tpXS55KSArIHRoaXMudmVydGljZXNbaV0ueFxyXG4gICAgICApIHtcclxuICAgICAgICBjID0gIWM7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBjO1xyXG4gIH1cclxuICByZXZlcnNlKCk6IHZvaWQge1xyXG4gICAgdGhpcy52ZXJ0aWNlcy5yZXZlcnNlKCk7XHJcbiAgfVxyXG4gIGVkZ2VDb3VudCgpOiBudW1iZXIge1xyXG4gICAgaWYgKHRoaXMudmVydGljZXMubGVuZ3RoID4gMSkge1xyXG4gICAgICByZXR1cm4gdGhpcy52ZXJ0aWNlcy5sZW5ndGg7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gMDtcclxuICB9XHJcbiAgZWRnZXMoKTogTGluZVtdIHtcclxuICAgIGlmICh0aGlzLnZlcnRpY2VzLmxlbmd0aCA+IDEpIHtcclxuICAgICAgcmV0dXJuIHRoaXMudmVydGljZXMubWFwKCh2LCBpKSA9PiBMaW5lLmZyb21WZWN0b3JzKHRoaXMudmVydGljZXNbaV0sIHRoaXMudmVydGljZXNbaSA8IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMSA/IGkgKyAxIDogMF0pKTtcclxuICAgIH1cclxuICAgIHJldHVybiBbXTtcclxuICB9XHJcbiAgdG9TdHJpbmcoKTogc3RyaW5nIHtcclxuICAgIHJldHVybiBgJHt0aGlzLnZlcnRpY2VzLmxlbmd0aH0gcG9pbnRzOiBgICsgdGhpcy52ZXJ0aWNlcy5tYXAodiA9PiBgKCR7di54LnRvRml4ZWQoKX0sICR7di55LnRvRml4ZWQoKX0pYCkuam9pbignLCAnKSArIGAgKGFyZWE6ICR7dGhpcy5hcmVhKCkudG9GaXhlZCgpfSlgO1xyXG4gIH1cclxufSIsImltcG9ydCB7IExpdGhvbG9naWNhbExheWVyIH0gZnJvbSBcIi4vbGl0aG9sb2dpY2FsLWxheWVyXCI7XHJcbmltcG9ydCB7IFBvbHlnb24gfSBmcm9tIFwiLi9wb2x5Z29uXCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XHJcblxyXG5leHBvcnQgY2xhc3MgU3VydmV5IHtcclxuICBjb25zdHJ1Y3RvcihcclxuICAgIHB1YmxpYyBjb29yZGluYXRlczogVmVjdG9yMixcclxuICAgIHB1YmxpYyBsaXRob2xvZ3k6IExpdGhvbG9naWNhbExheWVyW10sXHJcbiAgICBwdWJsaWMgcG9seWdvbjogUG9seWdvbixcclxuICApIHtcclxuXHJcbiAgfVxyXG4gIGRlcHRoKCk6IG51bWJlciB7XHJcbiAgICByZXR1cm4gdGhpcy5saXRob2xvZ3kucmVkdWNlKChkZXB0aCwgbGF5ZXIpID0+IGRlcHRoICsgbGF5ZXIuZGVwdGgsIDApO1xyXG4gIH1cclxuICBxdWFudGl0aWVzKCk6IE1hcDxzdHJpbmcsIG51bWJlcj4ge1xyXG4gICAgY29uc3QgcXVhbnRpdGllcyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgICBpZiAodGhpcy5wb2x5Z29uKSB7XHJcbiAgICAgIGNvbnN0IGFyZWEgPSB0aGlzLnBvbHlnb24uYXJlYSgpO1xyXG4gICAgICB0aGlzLmxpdGhvbG9neS5mb3JFYWNoKGxpdGhvbG9naWNhbExheWVyID0+IHtcclxuICAgICAgICBsZXQgcXVhbnRpdHkgPSBxdWFudGl0aWVzLmdldChsaXRob2xvZ2ljYWxMYXllci50eXBlKSB8fCAwO1xyXG4gICAgICAgIHF1YW50aXRpZXMuc2V0KGxpdGhvbG9naWNhbExheWVyLnR5cGUsIHF1YW50aXR5ICsgTWF0aC5yb3VuZChhcmVhICogbGl0aG9sb2dpY2FsTGF5ZXIuZGVwdGgpKTtcclxuICAgICAgfSk7XHJcbiAgICB9XHJcbiAgICByZXR1cm4gcXVhbnRpdGllcztcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBQb2xwbG90UmVuZGVyZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3BvbHBsb3QtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgTGl0aG9sb2dpY2FsTGF5ZXIgfSBmcm9tIFwiLi9saXRob2xvZ2ljYWwtbGF5ZXJcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgU3VydmV5IH0gZnJvbSBcIi4vc3VydmV5XCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XHJcblxyXG5jb25zdCBDTElDS19USFJFU0hPTEQgPSAyMDtcclxuXHJcbmNvbnN0IGVudW0gTW9kZXMge1xyXG4gIENvbnRvdXIsXHJcbiAgQXhlcyxcclxuICBTdXJ2ZXlzXHJcbn1cclxuXHJcbmV4cG9ydCBjbGFzcyBQb2xwbG90IHtcclxuICBheGVzOiBMaW5lW10gPSBbXTtcclxuICBjb250b3VyID0gbmV3IFBvbHlnb24oKTtcclxuICBpbnRlcnNlY3Rpb25UaW1lczogbnVtYmVyW11bXSA9IFtdO1xyXG4gIGludGVyc2VjdGlvbnM6IFZlY3RvcjJbXSA9IFtdO1xyXG4gIGludGVyc2VjdGlvbkluZGV4OiBudW1iZXJbXVtdID0gW107XHJcbiAgcG9seWdvbnM6IFBvbHlnb25bXSA9IFtdO1xyXG4gIHN1cnZleXM6IFN1cnZleVtdID0gW107XHJcbiAgcXVhbnRpdGllcyA9IG5ldyBNYXA8c3RyaW5nLCBudW1iZXI+KCk7XHJcbiAgbW9kZSA9IE1vZGVzLkNvbnRvdXI7XHJcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVuZGVyZXI6IFBvbHBsb3RSZW5kZXJlcikge1xyXG4gICAgLy8gcmVtb3ZlIG5leHQgaGFja3kgZXZlbnRMaXN0ZW5lclxyXG4gICAgZG9jdW1lbnQuYWRkRXZlbnRMaXN0ZW5lcigna2V5dXAnLCBldmVudCA9PiB7XHJcbiAgICAgIGlmIChldmVudC5rZXkgPT09ICdzJykge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IE1vZGVzLlN1cnZleXM7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1dHRvbicpLmZvckVhY2goKGRpdjogSFRNTERpdkVsZW1lbnQpID0+IGRpdi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpKTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWRpdC1zdXJ2ZXlzJykuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgICAgfSBlbHNlIGlmIChldmVudC5rZXkgPT09ICdjJykge1xyXG4gICAgICAgIHRoaXMubW9kZSA9IE1vZGVzLkNvbnRvdXI7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5jbGVhclN1cnZleSgpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXR0b24nKS5mb3JFYWNoKChkaXY6IEhUTUxEaXZFbGVtZW50KSA9PiBkaXYuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKSk7XHJcbiAgICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VkaXQtY29udG91cicpLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgIH0gZWxzZSBpZiAoZXZlbnQua2V5ID09PSAnYScpIHtcclxuICAgICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5BeGVzO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuY2xlYXJTdXJ2ZXkoKTtcclxuICAgICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV0dG9uJykuZm9yRWFjaCgoZGl2OiBIVE1MRGl2RWxlbWVudCkgPT4gZGl2LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJykpO1xyXG4gICAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LWF4ZXMnKS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICB9IGVsc2UgaWYgKGV2ZW50LmtleSA9PT0gJ0VzY2FwZScpIHtcclxuICAgICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyU3VydmV5KCk7XHJcbiAgICAgIH1cclxuICAgIH0pO1xyXG5cclxuICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJyNlZGl0LWNvbnRvdXInKS5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIGV2ZW50ID0+IHtcclxuICAgICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvckFsbCgnLmJ1dHRvbicpLmZvckVhY2goKGRpdjogSFRNTERpdkVsZW1lbnQpID0+IGRpdi5jbGFzc0xpc3QucmVtb3ZlKCdzZWxlY3RlZCcpKTtcclxuICAgICAgKGV2ZW50LnRhcmdldCBhcyBIVE1MRGl2RWxlbWVudCkuY2xhc3NMaXN0LmFkZCgnc2VsZWN0ZWQnKTtcclxuICAgICAgdGhpcy5tb2RlID0gTW9kZXMuQ29udG91cjtcclxuICAgICAgdGhpcy5yZW5kZXJlci5jbGVhclN1cnZleSgpO1xyXG4gICAgfSk7XHJcblxyXG4gICAgZG9jdW1lbnQucXVlcnlTZWxlY3RvcignI2VkaXQtYXhlcycpLmFkZEV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgZXZlbnQgPT4ge1xyXG4gICAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yQWxsKCcuYnV0dG9uJykuZm9yRWFjaCgoZGl2OiBIVE1MRGl2RWxlbWVudCkgPT4gZGl2LmNsYXNzTGlzdC5yZW1vdmUoJ3NlbGVjdGVkJykpO1xyXG4gICAgICAoZXZlbnQudGFyZ2V0IGFzIEhUTUxEaXZFbGVtZW50KS5jbGFzc0xpc3QuYWRkKCdzZWxlY3RlZCcpO1xyXG4gICAgICB0aGlzLm1vZGUgPSBNb2Rlcy5BeGVzO1xyXG4gICAgICB0aGlzLnJlbmRlcmVyLmNsZWFyU3VydmV5KCk7XHJcbiAgICB9KTtcclxuXHJcbiAgICBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcjZWRpdC1zdXJ2ZXlzJykuYWRkRXZlbnRMaXN0ZW5lcignY2xpY2snLCBldmVudCA9PiB7XHJcbiAgICAgIGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3JBbGwoJy5idXR0b24nKS5mb3JFYWNoKChkaXY6IEhUTUxEaXZFbGVtZW50KSA9PiBkaXYuY2xhc3NMaXN0LnJlbW92ZSgnc2VsZWN0ZWQnKSk7XHJcbiAgICAgIChldmVudC50YXJnZXQgYXMgSFRNTERpdkVsZW1lbnQpLmNsYXNzTGlzdC5hZGQoJ3NlbGVjdGVkJyk7XHJcbiAgICAgIHRoaXMubW9kZSA9IE1vZGVzLlN1cnZleXM7XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnVwZGF0ZVF1YW50aXRpZXMoKTtcclxuXHJcbiAgICBsZXQgZHJhZ2dlZExpbmVJbmRleCA9IC0xO1xyXG4gICAgbGV0IGRyYWdnZWRWZWN0b3IyOiBWZWN0b3IyO1xyXG4gICAgbGV0IGRyYWdnZWRTdXJ2ZXlJbmRleCA9IC0xO1xyXG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZURvd25IYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuQXhlcyB8fCB0aGlzLm1vZGUgPT09IE1vZGVzLkNvbnRvdXIpIHtcclxuICAgICAgICBkcmFnZ2VkTGluZUluZGV4ID0gdGhpcy5uZWFyZXN0TGluZUluZGV4RnJvbShcclxuICAgICAgICAgIG1vdXNlLFxyXG4gICAgICAgICAgQ0xJQ0tfVEhSRVNIT0xELFxyXG4gICAgICAgICAgdGhpcy5tb2RlID09PSBNb2Rlcy5BeGVzXHJcbiAgICAgICAgICAgID8gdGhpcy5heGVzXHJcbiAgICAgICAgICAgIDogdGhpcy5jb250b3VyLmVkZ2VzKClcclxuICAgICAgICApO1xyXG4gICAgICAgIGlmIChkcmFnZ2VkTGluZUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuQXhlcykge1xyXG4gICAgICAgICAgICB0aGlzLmFkZExpbmUobmV3IExpbmUobW91c2UueCwgbW91c2UueSwgbW91c2UueCwgbW91c2UueSkpO1xyXG4gICAgICAgICAgICBkcmFnZ2VkTGluZUluZGV4ID0gdGhpcy5saW5lcy5sZW5ndGggLSAxO1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjI7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuQ29udG91cikge1xyXG4gICAgICAgICAgICB0aGlzLmFkZENvbnRvdXIobmV3IExpbmUobW91c2UueCwgbW91c2UueSwgbW91c2UueCwgbW91c2UueSkpO1xyXG4gICAgICAgICAgICBkcmFnZ2VkTGluZUluZGV4ID0gMDtcclxuICAgICAgICAgICAgZHJhZ2dlZFZlY3RvcjIgPSB0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYxO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5BeGVzKSB7XHJcbiAgICAgICAgICAgIGRyYWdnZWRMaW5lSW5kZXggKz0gdGhpcy5jb250b3VyLmVkZ2VDb3VudCgpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgICAgaWYgKG1vdXNlLnN1Yih0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYxKS5sZW4oKSA8IENMSUNLX1RIUkVTSE9MRCkge1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjE7XHJcbiAgICAgICAgICB9IGVsc2UgaWYgKG1vdXNlLnN1Yih0aGlzLmxpbmVzW2RyYWdnZWRMaW5lSW5kZXhdLnYyKS5sZW4oKSA8IENMSUNLX1RIUkVTSE9MRCkge1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMiA9IHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udjI7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuU3VydmV5cykge1xyXG4gICAgICAgIGRyYWdnZWRTdXJ2ZXlJbmRleCA9IHRoaXMubmVhcmVzdFN1cnZleUluZGV4RnJvbShtb3VzZSwgQ0xJQ0tfVEhSRVNIT0xEKTtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ID09PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5hZGRTdXJ2ZXkobW91c2UpO1xyXG4gICAgICAgICAgZHJhZ2dlZFN1cnZleUluZGV4ID0gdGhpcy5zdXJ2ZXlzLmxlbmd0aCAtIDE7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICBsZXQgYWN0aXZlU3VydmV5OiBTdXJ2ZXk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlVXBIYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgLy8gcmV0dXJuIGlmIGNsaWNrIGlzIG5vdCBmcm9tIG1vdXNlIGxlZnQgYnV0dG9uXHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuQXhlcyB8fCB0aGlzLm1vZGUgPT09IE1vZGVzLkNvbnRvdXIpIHtcclxuICAgICAgICBkcmFnZ2VkTGluZUluZGV4ID0gLTE7XHJcbiAgICAgICAgZHJhZ2dlZFZlY3RvcjIgPSBudWxsO1xyXG4gICAgICB9IGVsc2UgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuU3VydmV5cykge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkU3VydmV5SW5kZXggIT09IC0xKSB7XHJcbiAgICAgICAgICBhY3RpdmVTdXJ2ZXkgPSB0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XTtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1N1cnZleShhY3RpdmVTdXJ2ZXkpO1xyXG4gICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICBhY3RpdmVTdXJ2ZXkgPSBudWxsO1xyXG4gICAgICAgIH1cclxuICAgICAgICBkcmFnZ2VkU3VydmV5SW5kZXggPSAtMTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcblxyXG4gICAgbGV0IHBvbHlnb25Db250YWluZXI6IFBvbHlnb247XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlTW92ZUhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICAvLyByZXR1cm4gaWYgY2xpY2sgaXMgbm90IGZyb20gbW91c2UgbGVmdCBidXR0b25cclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAodGhpcy5tb2RlID09PSBNb2Rlcy5BeGVzIHx8IHRoaXMubW9kZSA9PT0gTW9kZXMuQ29udG91cikge1xyXG4gICAgICAgIGlmIChkcmFnZ2VkVmVjdG9yMiB8fCBkcmFnZ2VkTGluZUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgaWYgKGRyYWdnZWRWZWN0b3IyKSB7XHJcbiAgICAgICAgICAgIGRyYWdnZWRWZWN0b3IyLnggKz0gZXZlbnQubW92ZW1lbnRYO1xyXG4gICAgICAgICAgICBkcmFnZ2VkVmVjdG9yMi55ICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgIHRoaXMubGluZXNbZHJhZ2dlZExpbmVJbmRleF0udXBkYXRlKGV2ZW50Lm1vdmVtZW50WCwgZXZlbnQubW92ZW1lbnRZLCBldmVudC5tb3ZlbWVudFgsIGV2ZW50Lm1vdmVtZW50WSk7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKGRyYWdnZWRMaW5lSW5kZXgpO1xyXG4gICAgICAgICAgaWYgKHRoaXMubW9kZSA9PT0gTW9kZXMuQXhlcykge1xyXG4gICAgICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKFxyXG4gICAgICAgICAgICAgIHRoaXMuYXhlc1tkcmFnZ2VkTGluZUluZGV4IC0gdGhpcy5jb250b3VyLmVkZ2VDb3VudCgpXSxcclxuICAgICAgICAgICAgICAoZHJhZ2dlZExpbmVJbmRleCAtIHRoaXMuY29udG91ci5lZGdlQ291bnQoKSkudG9TdHJpbmcoKVxyXG4gICAgICAgICAgICApO1xyXG4gICAgICAgICAgfSBlbHNlIHtcclxuICAgICAgICAgICAgaWYgKGRyYWdnZWRMaW5lSW5kZXggPT09IHRoaXMuY29udG91ci5lZGdlQ291bnQoKSAtIDEpIHtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKGRyYWdnZWRMaW5lSW5kZXggLSAxKTtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDApO1xyXG4gICAgICAgICAgICB9IGVsc2UgaWYgKGRyYWdnZWRMaW5lSW5kZXggPT09IDApIHtcclxuICAgICAgICAgICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKHRoaXMuY29udG91ci5lZGdlQ291bnQoKSAtIDEpO1xyXG4gICAgICAgICAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoMSk7XHJcbiAgICAgICAgICAgIH0gZWxzZSB7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhkcmFnZ2VkTGluZUluZGV4IC0gMSk7XHJcbiAgICAgICAgICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhkcmFnZ2VkTGluZUluZGV4ICsgMSk7XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3Q29udG91cih0aGlzLmNvbnRvdXIpO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfSBlbHNlIGlmICh0aGlzLm1vZGUgPT09IE1vZGVzLlN1cnZleXMpIHtcclxuICAgICAgICBpZiAoZHJhZ2dlZFN1cnZleUluZGV4ICE9PSAtMSkge1xyXG4gICAgICAgICAgdGhpcy5zdXJ2ZXlzW2RyYWdnZWRTdXJ2ZXlJbmRleF0uY29vcmRpbmF0ZXMueCArPSBldmVudC5tb3ZlbWVudFg7XHJcbiAgICAgICAgICB0aGlzLnN1cnZleXNbZHJhZ2dlZFN1cnZleUluZGV4XS5jb29yZGluYXRlcy55ICs9IGV2ZW50Lm1vdmVtZW50WTtcclxuICAgICAgICAgIHRoaXMudXBkYXRlU3VydmV5KHRoaXMuc3VydmV5c1tkcmFnZ2VkU3VydmV5SW5kZXhdKTtcclxuICAgICAgICB9XHJcbiAgICAgICAgLy8gVE9ETzogc2hvdWxkIGJlIGluIGEgZnVuY3Rpb25cclxuICAgICAgICBjb25zdCBtb3VzZSA9IG5ldyBWZWN0b3IyKGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xyXG4gICAgICAgIGxldCBpc0luc2lkZSA9IGZhbHNlO1xyXG4gICAgICAgIGxldCBvbGRQb2x5Z29uQ29udGFpbmVyID0gcG9seWdvbkNvbnRhaW5lcjtcclxuICAgICAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgdGhpcy5wb2x5Z29ucykge1xyXG4gICAgICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMobW91c2UpKSB7XHJcbiAgICAgICAgICAgIGlmIChwb2x5Z29uICE9PSBwb2x5Z29uQ29udGFpbmVyKSB7XHJcbiAgICAgICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihwb2x5Z29uLCAncmVkJyk7XHJcbiAgICAgICAgICAgICAgcG9seWdvbkNvbnRhaW5lciA9IHBvbHlnb247XHJcbiAgICAgICAgICAgIH1cclxuICAgICAgICAgICAgaXNJbnNpZGUgPSB0cnVlO1xyXG4gICAgICAgICAgICBicmVhaztcclxuICAgICAgICAgIH1cclxuICAgICAgICB9XHJcbiAgICAgICAgaWYgKCFpc0luc2lkZSkge1xyXG4gICAgICAgICAgcG9seWdvbkNvbnRhaW5lciA9IG51bGw7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChvbGRQb2x5Z29uQ29udGFpbmVyICYmIG9sZFBvbHlnb25Db250YWluZXIgIT09IHBvbHlnb25Db250YWluZXIpIHtcclxuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvbHlnb24ob2xkUG9seWdvbkNvbnRhaW5lciwgJ3doaXRlJyk7XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcblxyXG4gICAgbGV0IGRyYWdnZWRMaXRob2xvZ3lMYXllcjogTGl0aG9sb2dpY2FsTGF5ZXI7XHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpZGViYXJNb3VzZURvd25IYW5kbGVyKGV2ZW50ID0+IHtcclxuICAgICAgaWYgKGV2ZW50LmJ1dHRvbikge1xyXG4gICAgICAgIHJldHVybjtcclxuICAgICAgfVxyXG4gICAgICBpZiAoYWN0aXZlU3VydmV5KSB7XHJcbiAgICAgICAgY29uc3QgbW91c2UgPSBuZXcgVmVjdG9yMihldmVudC5vZmZzZXRYLCBldmVudC5vZmZzZXRZKTtcclxuICAgICAgICBjb25zdCBvZmZzZXQgPSBuZXcgVmVjdG9yMigzMDAsIDEwMCk7XHJcbiAgICAgICAgZm9yIChjb25zdCBsaXRob2xvZ2ljYWxMYXllciBvZiBhY3RpdmVTdXJ2ZXkubGl0aG9sb2d5KSB7XHJcbiAgICAgICAgICBjb25zdCBwb2x5Z29uID0gbmV3IFBvbHlnb24oW1xyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKC0yNSwgMCkpLFxyXG4gICAgICAgICAgICBvZmZzZXQuYWRkKG5ldyBWZWN0b3IyKDI1LCAwKSksXHJcbiAgICAgICAgICAgIG9mZnNldC5hZGQobmV3IFZlY3RvcjIoMjUsIGxpdGhvbG9naWNhbExheWVyLmRlcHRoKSksXHJcbiAgICAgICAgICAgIG9mZnNldC5hZGQobmV3IFZlY3RvcjIoLTI1LCBsaXRob2xvZ2ljYWxMYXllci5kZXB0aCkpLFxyXG4gICAgICAgICAgXSk7XHJcbiAgICAgICAgICBvZmZzZXQueSArPSBsaXRob2xvZ2ljYWxMYXllci5kZXB0aDtcclxuICAgICAgICAgIGlmIChwb2x5Z29uLmNvbnRhaW5zKG1vdXNlKSkge1xyXG4gICAgICAgICAgICBkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIgPSBsaXRob2xvZ2ljYWxMYXllcjtcclxuICAgICAgICAgICAgYnJlYWs7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLnNldFNpZGViYXJNb3VzZVVwSGFuZGxlcihldmVudCA9PiB7XHJcbiAgICAgIGlmIChldmVudC5idXR0b24pIHtcclxuICAgICAgICByZXR1cm47XHJcbiAgICAgIH1cclxuICAgICAgZHJhZ2dlZExpdGhvbG9neUxheWVyID0gbnVsbDtcclxuICAgIH0pO1xyXG5cclxuICAgIHRoaXMucmVuZGVyZXIuc2V0U2lkZWJhck1vdXNlTW92ZUhhbmRsZXIoZXZlbnQgPT4ge1xyXG4gICAgICBpZiAoZXZlbnQuYnV0dG9uKSB7XHJcbiAgICAgICAgcmV0dXJuO1xyXG4gICAgICB9XHJcbiAgICAgIGlmIChkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIpIHtcclxuICAgICAgICBkcmFnZ2VkTGl0aG9sb2d5TGF5ZXIuZGVwdGggKz0gZXZlbnQubW92ZW1lbnRZO1xyXG4gICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd1N1cnZleShhY3RpdmVTdXJ2ZXkpO1xyXG4gICAgICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gICAgICB9XHJcbiAgICB9KTtcclxuXHJcbiAgICB0aGlzLnJlbmRlcmVyLmxpdGhvQ2hhbmdlSGFuZGxlciA9ICgpID0+IHtcclxuICAgICAgdGhpcy51cGRhdGVRdWFudGl0aWVzKCk7XHJcbiAgICB9O1xyXG4gIH1cclxuICBnZXQgbGluZXMoKTogTGluZVtdIHtcclxuICAgIHJldHVybiB0aGlzLmNvbnRvdXIuZWRnZXMoKS5jb25jYXQodGhpcy5heGVzKTtcclxuICB9XHJcbiAgbmVhcmVzdExpbmVJbmRleEZyb20odjogVmVjdG9yMiwgdGhyZXNob2xkID0gK0luZmluaXR5LCBsaW5lcyA9IHRoaXMubGluZXMpOiBudW1iZXIge1xyXG4gICAgbGV0IG5lYXJlc3RMaW5lSW5kZXggPSAtMTtcclxuICAgIGxldCBuZWFyZXN0RGlzdCA9ICtJbmZpbml0eTtcclxuICAgIGxldCBkaXN0OiBudW1iZXI7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IGxpbmVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGRpc3QgPSBsaW5lc1tpXS5uZWFyZXN0VG8odikuc3ViKHYpLmxlbigpO1xyXG4gICAgICBpZiAoZGlzdCA8IHRocmVzaG9sZCAmJiBkaXN0IDwgbmVhcmVzdERpc3QpIHtcclxuICAgICAgICBuZWFyZXN0RGlzdCA9IGRpc3Q7XHJcbiAgICAgICAgbmVhcmVzdExpbmVJbmRleCA9IGk7XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBuZWFyZXN0TGluZUluZGV4O1xyXG4gIH1cclxuICBuZWFyZXN0U3VydmV5SW5kZXhGcm9tKHY6IFZlY3RvcjIsIHRocmVzaG9sZCA9ICtJbmZpbml0eSk6IG51bWJlciB7XHJcbiAgICBsZXQgbmVhcmVzdFN1cnZleUluZGV4ID0gLTE7XHJcbiAgICBsZXQgbmVhcmVzdERpc3QgPSArSW5maW5pdHk7XHJcbiAgICBsZXQgZGlzdDogbnVtYmVyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCB0aGlzLnN1cnZleXMubGVuZ3RoOyBpKyspIHtcclxuICAgICAgZGlzdCA9IHRoaXMuc3VydmV5c1tpXS5jb29yZGluYXRlcy5zdWIodikubGVuKCk7XHJcbiAgICAgIGlmIChkaXN0IDwgdGhyZXNob2xkICYmIGRpc3QgPCBuZWFyZXN0RGlzdCkge1xyXG4gICAgICAgIG5lYXJlc3REaXN0ID0gZGlzdDtcclxuICAgICAgICBuZWFyZXN0U3VydmV5SW5kZXggPSBpO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICByZXR1cm4gbmVhcmVzdFN1cnZleUluZGV4O1xyXG4gIH1cclxuICBhZGRTdXJ2ZXkoY29vcmRpbmF0ZXM6IFZlY3RvcjIpOiB2b2lkIHtcclxuICAgIGxldCBjb250YWluZXI6IFBvbHlnb247XHJcbiAgICBmb3IgKGNvbnN0IHBvbHlnb24gb2YgdGhpcy5wb2x5Z29ucykge1xyXG4gICAgICBpZiAocG9seWdvbi5jb250YWlucyhjb29yZGluYXRlcykpIHtcclxuICAgICAgICBjb250YWluZXIgPSBwb2x5Z29uO1xyXG4gICAgICAgIGJyZWFrO1xyXG4gICAgICB9XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdXJ2ZXkgPSBuZXcgU3VydmV5KGNvb3JkaW5hdGVzLCBbXHJcbiAgICAgIG5ldyBMaXRob2xvZ2ljYWxMYXllcignbm9uIGlkZW50aWZpw6knLCA1MCksXHJcbiAgICAgIG5ldyBMaXRob2xvZ2ljYWxMYXllcignbm9uIGlkZW50aWZpw6knLCA1MCksXHJcbiAgICAgIG5ldyBMaXRob2xvZ2ljYWxMYXllcignbm9uIGlkZW50aWZpw6knLCA1MCksXHJcbiAgICBdLCBjb250YWluZXIpO1xyXG4gICAgdGhpcy5zdXJ2ZXlzLnB1c2goc3VydmV5KTtcclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd1BvaW50KGNvb3JkaW5hdGVzLCBjb250YWluZXIgPyAoY29udGFpbmVyLmFyZWEoKSAvICgxMCAqIDEwKSkudG9GaXhlZCgyKSArICcgbTInIDogJycpO1xyXG4gICAgdGhpcy51cGRhdGVRdWFudGl0aWVzKCk7XHJcbiAgfVxyXG4gIC8vIFRPRE86IGNsZWFudXAgYWRkIHVwZGF0ZSByZW5kZXIgYW5kIG90aGVyIHdlaXJkIGZ1bmN0aW9uc1xyXG4gIHVwZGF0ZVN1cnZleShzdXJ2ZXk6IFN1cnZleSk6IHZvaWQge1xyXG4gICAgc3VydmV5LnBvbHlnb24gPSBudWxsO1xyXG4gICAgZm9yIChjb25zdCBwb2x5Z29uIG9mIHRoaXMucG9seWdvbnMpIHtcclxuICAgICAgaWYgKHBvbHlnb24uY29udGFpbnMoc3VydmV5LmNvb3JkaW5hdGVzKSkge1xyXG4gICAgICAgIHN1cnZleS5wb2x5Z29uID0gcG9seWdvbjtcclxuICAgICAgICBicmVhaztcclxuICAgICAgfVxyXG4gICAgfVxyXG4gICAgdGhpcy5yZW5kZXJlci5kcmF3UG9pbnQoc3VydmV5LmNvb3JkaW5hdGVzLCBzdXJ2ZXkucG9seWdvbiA/IChzdXJ2ZXkucG9seWdvbi5hcmVhKCkgLyAoMTAgKiAxMCkpLnRvRml4ZWQoMikgKyAnIG0yJyA6ICcnKTtcclxuICAgIHRoaXMudXBkYXRlUXVhbnRpdGllcygpO1xyXG4gIH1cclxuICB1cGRhdGVRdWFudGl0aWVzKCk6IHZvaWQge1xyXG4gICAgdGhpcy5xdWFudGl0aWVzLmNsZWFyKCk7XHJcbiAgICB0aGlzLnN1cnZleXMuZm9yRWFjaChzdXJ2ZXkgPT4ge1xyXG4gICAgICBzdXJ2ZXkucXVhbnRpdGllcygpLmZvckVhY2goKHF1YW50aXR5LCB0eXBlKSA9PiB7XHJcbiAgICAgICAgdGhpcy5xdWFudGl0aWVzLnNldCh0eXBlLCAodGhpcy5xdWFudGl0aWVzLmdldCh0eXBlKSB8fCAwKSArIHF1YW50aXR5KTtcclxuICAgICAgfSk7XHJcbiAgICB9KTtcclxuICAgIHRoaXMucmVuZGVyZXIuZHJhd1F1YW50aXRpZXModGhpcy5xdWFudGl0aWVzKTtcclxuICB9XHJcbiAgaW5pdEludGVyc2VjdGlvbkRhdGEoXHJcbiAgICBhdCA9IHRoaXMubGluZXMubGVuZ3RoLFxyXG4gICAgbGluZUNvdW50ID0gdGhpcy5saW5lcy5sZW5ndGgsXHJcbiAgICBpbnRlcnNlY3Rpb25UaW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXMsXHJcbiAgICBpbnRlcnNlY3Rpb25zID0gdGhpcy5pbnRlcnNlY3Rpb25zLFxyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXggPSB0aGlzLmludGVyc2VjdGlvbkluZGV4LFxyXG4gICk6IHZvaWQge1xyXG4gICAgY29uc3QgbmV3SW50ZXJzZWN0aW9uVGltZXM6IG51bWJlcltdID0gW107XHJcbiAgICBjb25zdCBuZXdJbnRlcnNlY3Rpb25JbmRleDogbnVtYmVyW10gPSBbXTtcclxuICAgIGZvciAobGV0IGkgPSAwOyBpIDwgbGluZUNvdW50OyBpKyspIHtcclxuICAgICAgaW50ZXJzZWN0aW9uVGltZXNbaV0uc3BsaWNlKGF0LCAwLCBOYU4pO1xyXG4gICAgICBpbnRlcnNlY3Rpb25zLnB1c2gobmV3IFZlY3RvcjIoKSk7XHJcbiAgICAgIGludGVyc2VjdGlvbkluZGV4W2ldLnNwbGljZShhdCwgMCwgaW50ZXJzZWN0aW9ucy5sZW5ndGggLSAxKTtcclxuICAgICAgbmV3SW50ZXJzZWN0aW9uVGltZXMucHVzaChOYU4pO1xyXG4gICAgICBuZXdJbnRlcnNlY3Rpb25JbmRleC5wdXNoKGludGVyc2VjdGlvbnMubGVuZ3RoIC0gMSk7XHJcbiAgICB9XHJcbiAgICBuZXdJbnRlcnNlY3Rpb25UaW1lcy5zcGxpY2UoYXQsIDAsIE5hTik7XHJcbiAgICBuZXdJbnRlcnNlY3Rpb25JbmRleC5zcGxpY2UoYXQsIDAsIC0xKTtcclxuICAgIGludGVyc2VjdGlvblRpbWVzLnNwbGljZShhdCwgMCwgbmV3SW50ZXJzZWN0aW9uVGltZXMpO1xyXG4gICAgaW50ZXJzZWN0aW9uSW5kZXguc3BsaWNlKGF0LCAwLCBuZXdJbnRlcnNlY3Rpb25JbmRleCk7XHJcbiAgfVxyXG4gIGFkZExpbmUobGluZTogTGluZSk6IHZvaWQge1xyXG4gICAgLy8gYXBwZW5kIG5ldyBjb250b3VyIGF0IHRoZSBlbmQgb2YgbGluZXNcclxuICAgIGNvbnN0IGxpbmVzID0gdGhpcy5saW5lcztcclxuICAgIGNvbnN0IGF0ID0gbGluZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5pbml0SW50ZXJzZWN0aW9uRGF0YShhdCwgYXQpO1xyXG4gICAgdGhpcy5heGVzLnB1c2gobGluZSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKGxpbmUsIGF0LnRvU3RyaW5nKCkpO1xyXG4gICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhhdCk7XHJcbiAgfVxyXG4gIGFkZENvbnRvdXIobGluZTogTGluZSk6IHZvaWQge1xyXG4gICAgLy8gVE9ETyBvcHRpbWl6YXRpb25cclxuICAgIC8vIGFwcGVuZCBuZXcgY29udG91ciBhdCB0aGUgYmVnaW4gb2YgbGluZXNcclxuICAgIGNvbnN0IGVkZ2VDb3VudCA9IHRoaXMuY29udG91ci5lZGdlQ291bnQoKTtcclxuICAgIGxldCBsaW5lQ291bnQgPSBlZGdlQ291bnQgKyB0aGlzLmF4ZXMubGVuZ3RoO1xyXG4gICAgdGhpcy5pbml0SW50ZXJzZWN0aW9uRGF0YSgwLCBsaW5lQ291bnQrKyk7XHJcbiAgICB0aGlzLmluaXRJbnRlcnNlY3Rpb25EYXRhKDAsIGxpbmVDb3VudCsrKTtcclxuICAgIHRoaXMuY29udG91ci52ZXJ0aWNlcy5zcGxpY2UoMCwgMCwgbGluZS52MSwgbGluZS52Mik7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmRyYXdDb250b3VyKHRoaXMuY29udG91cik7XHJcbiAgICBjb25zdCBsaW5lcyA9IHRoaXMubGluZXM7XHJcbiAgICBpZiAoZWRnZUNvdW50ID09PSAwKSB7XHJcbiAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoMCwgbGluZXMsIHRydWUpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDEsIGxpbmVzKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoMCwgbGluZXMsIHRydWUpO1xyXG4gICAgICB0aGlzLnVwZGF0ZUludGVyc2VjdGlvblRpbWVzKDEsIGxpbmVzLCB0cnVlKTtcclxuICAgICAgdGhpcy51cGRhdGVJbnRlcnNlY3Rpb25UaW1lcyhsaW5lQ291bnQgLSAxLCBsaW5lcyk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIHVwZGF0ZUludGVyc2VjdGlvblRpbWVzKFxyXG4gICAgYXQ6IG51bWJlcixcclxuICAgIGxpbmVzID0gdGhpcy5saW5lcyxcclxuICAgIHNraXBSZW5kZXIgPSBmYWxzZSxcclxuICAgIGludGVyc2VjdGlvblRpbWVzID0gdGhpcy5pbnRlcnNlY3Rpb25UaW1lcyxcclxuICAgIGludGVyc2VjdGlvbnMgPSB0aGlzLmludGVyc2VjdGlvbnMsXHJcbiAgICBpbnRlcnNlY3Rpb25JbmRleCA9IHRoaXMuaW50ZXJzZWN0aW9uSW5kZXgsXHJcbiAgKTogdm9pZCB7XHJcbiAgICBjb25zdCBsaW5lID0gbGluZXNbYXRdO1xyXG4gICAgbGV0IHRpbWVzOiBWZWN0b3IyO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xyXG4gICAgICBpZiAoaSAhPT0gYXQpIHtcclxuICAgICAgICB0aW1lcyA9IGxpbmVzW2ldLmludGVyc2VjdGlvblRpbWVzV2l0aChsaW5lKTtcclxuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXVthdF0gPSB0aW1lcy54O1xyXG4gICAgICAgIGludGVyc2VjdGlvblRpbWVzW2F0XVtpXSA9IHRpbWVzLnk7XHJcbiAgICAgICAgaWYgKGkgPCBhdCkge1xyXG4gICAgICAgICAgaW50ZXJzZWN0aW9uc1tpbnRlcnNlY3Rpb25JbmRleFtpXVthdF1dID0gbGluZXNbaV0ucG9pbnRBdCh0aW1lcy54KTtcclxuICAgICAgICB9IGVsc2Uge1xyXG4gICAgICAgICAgaW50ZXJzZWN0aW9uc1tpbnRlcnNlY3Rpb25JbmRleFthdF1baV1dID0gbGluZXNbaV0ucG9pbnRBdCh0aW1lcy54KTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIGlmICghc2tpcFJlbmRlcikge1xyXG4gICAgICB0aGlzLnJlbmRlckludGVyc2VjdGlvbnMoKTtcclxuICAgIH1cclxuICB9XHJcbiAgcmVuZGVySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcclxuICAgIC8vIHRoaXMucmVuZGVyZXIuY2xlYXJJbnRlcnNlY3Rpb25zKCk7XHJcbiAgICAvLyB0aGlzLmludGVyc2VjdGlvbnMuZm9yRWFjaChpbnRlcnNlY3Rpb24gPT4ge1xyXG4gICAgLy8gICB0aGlzLnJlbmRlcmVyLmRyYXdQb2ludChpbnRlcnNlY3Rpb24pO1xyXG4gICAgLy8gfSk7XHJcbiAgICB0aGlzLnJlbmRlcmVyLmNsZWFyUG9seWdvbnMoKTtcclxuICAgIHRoaXMucG9seWdvbnMgPSBbXTtcclxuICAgIGNvbnN0IHBhcnRpYWxzID0gdGhpcy5idWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzKCk7XHJcbiAgICBjb25zdCBwb2x5Z29uSW5kZXhlcyA9IHRoaXMuYnVpbGRQb2x5Z29uSW5kZXhlc0Zyb21QYXJ0aWFscyhwYXJ0aWFscyk7XHJcbiAgICBjb25zdCBwb2x5Z29ucyA9IHBvbHlnb25JbmRleGVzLm1hcChwb2x5Z29uSW5kZXggPT4gbmV3IFBvbHlnb24ocG9seWdvbkluZGV4Lm1hcChpID0+IHRoaXMuaW50ZXJzZWN0aW9uc1tpXSkpKTtcclxuICAgIHBvbHlnb25zLmZvckVhY2gocG9seWdvbiA9PiB7XHJcbiAgICAgIGlmIChwb2x5Z29uLmFyZWEoKSA+IDApIHtcclxuICAgICAgICB0aGlzLnBvbHlnb25zLnB1c2gocG9seWdvbik7XHJcbiAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihwb2x5Z29uLCAnd2hpdGUnKTtcclxuICAgICAgfVxyXG4gICAgfSk7XHJcbiAgICB0aGlzLnN1cnZleXMuZm9yRWFjaChzdXJ2ZXkgPT4gdGhpcy51cGRhdGVTdXJ2ZXkoc3VydmV5KSk7XHJcbiAgfVxyXG4gIHRlc3RTaWRlKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIsIHc6IFZlY3RvcjIpOiBib29sZWFuIHtcclxuICAgIHJldHVybiB2LnN1Yih1KS5jcm9zcyh3LnN1Yih1KSkgPiAwO1xyXG4gIH1cclxuICBwYXJ0aWFsc092ZXJsYXBzKHAxOiBudW1iZXJbXSwgcDI6IG51bWJlcltdKTogMiB8IDAge1xyXG4gICAgcmV0dXJuIHAxW3AxLmxlbmd0aCAtIDJdID09PSBwMlswXSAmJiBwMVtwMS5sZW5ndGggLSAxXSA9PT0gcDJbMV0gPyAyIDogMDtcclxuICB9XHJcbiAgcGFydGlhbHNNZWV0KHAxOiBudW1iZXJbXSwgcDI6IG51bWJlcltdKTogMSB8IDAge1xyXG4gICAgcmV0dXJuIHAxW3AxLmxlbmd0aCAtIDFdID09PSBwMlswXSA/IDEgOiAwO1xyXG4gIH1cclxuICBidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMoXHJcbiAgICBjZW50ZXI6IG51bWJlcixcclxuICAgIGluZGV4ZXM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyLCBudW1iZXJdLFxyXG4gICk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdIHtcclxuICAgIGNvbnN0IHBhcnRzOiBbbnVtYmVyLCBudW1iZXIsIG51bWJlcl1bXSA9IFtdO1xyXG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBpbmRleGVzLmxlbmd0aDsgaSsrKSB7XHJcbiAgICAgIGlmICh0eXBlb2YgaW5kZXhlc1tpXSA9PT0gJ251bWJlcicpIHtcclxuICAgICAgICBsZXQgaiA9IGkgKyAxO1xyXG4gICAgICAgIGlmIChqID09PSBpbmRleGVzLmxlbmd0aCkge1xyXG4gICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgfVxyXG4gICAgICAgIHdoaWxlICh0eXBlb2YgaW5kZXhlc1tqXSAhPT0gJ251bWJlcicpwqB7XHJcbiAgICAgICAgICBqKys7XHJcbiAgICAgICAgICBpZiAoaiA9PT0gaW5kZXhlcy5sZW5ndGgpIHtcclxuICAgICAgICAgICAgaiA9IDA7XHJcbiAgICAgICAgICB9XHJcbiAgICAgICAgfVxyXG4gICAgICAgIGlmIChpICE9PSBqKSB7XHJcbiAgICAgICAgICBwYXJ0cy5wdXNoKFtpbmRleGVzW2ldLCBjZW50ZXIsIGluZGV4ZXNbal1dKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIHJldHVybiBwYXJ0cztcclxuICB9XHJcbiAgYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyhcclxuICAgIGxpbmVzID0gdGhpcy5saW5lcyxcclxuICAgIGludGVyc2VjdGlvblRpbWVzID0gdGhpcy5pbnRlcnNlY3Rpb25UaW1lcyxcclxuICAgIGludGVyc2VjdGlvbkluZGV4ID0gdGhpcy5pbnRlcnNlY3Rpb25JbmRleFxyXG4gICk6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdIHtcclxuICAgIC8vIGNvbnNvbGUubG9nKCdidWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzJyk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xyXG4gICAgLy8gY29uc29sZS5sb2coJ2xpbmVzLmxlbmd0aCA9ICcsIGxpbmVzLmxlbmd0aCk7XHJcbiAgICBjb25zdCBlZGdlQ291bnQgPSB0aGlzLmNvbnRvdXIuZWRnZUNvdW50KCk7XHJcbiAgICBjb25zdCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkgPSBpbnRlcnNlY3Rpb25UaW1lc1xyXG4gICAgICAubWFwKChpbnRlcnNlY3Rpb25UaW1lc0F0SSwgaSkgPT4ge1xyXG4gICAgICAgIHJldHVybiBpbnRlcnNlY3Rpb25UaW1lc0F0SVxyXG4gICAgICAgICAgLm1hcCgoXywgaikgPT4gailcclxuICAgICAgICAgIC5maWx0ZXIoaiA9PiB7XHJcbiAgICAgICAgICAgIHJldHVybiAhaXNOYU4oaW50ZXJzZWN0aW9uVGltZXNBdElbal0pICYmIDAgPD0gaW50ZXJzZWN0aW9uVGltZXNBdElbal0gJiYgaW50ZXJzZWN0aW9uVGltZXNBdElbal0gPD0gMSAmJlxyXG4gICAgICAgICAgICAgICFpc05hTihpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSkgJiYgMCA8PSBpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSAmJiBpbnRlcnNlY3Rpb25UaW1lc1tqXVtpXSA8PSAxICYmXHJcbiAgICAgICAgICAgICAgLy8gb25seSB0YWtlcyBpbnRlcnNlY3Rpb24gd2l0aCBvciBpbnNpZGUgY29udG91ciAoVE9ETzogcmVtb3ZlIHBvbHlnb25zIGlzIGNvbnRvdXIgY29uY2F2aXRpZXMpXHJcbiAgICAgICAgICAgICAgKGkgPCBlZGdlQ291bnQgfHwgaiA8IGVkZ2VDb3VudCB8fCB0aGlzLmNvbnRvdXIuY29udGFpbnModGhpcy5pbnRlcnNlY3Rpb25zW2ludGVyc2VjdGlvbkluZGV4W2ldW2pdXSkpO1xyXG4gICAgICAgICAgfSlcclxuICAgICAgICAgIC5zb3J0KChpLCBqKSA9PiBpbnRlcnNlY3Rpb25UaW1lc0F0SVtpXSAtIGludGVyc2VjdGlvblRpbWVzQXRJW2pdKTtcclxuICAgICAgfSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZyhpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkpO1xyXG4gICAgY29uc3QgcGFydGlhbHM6IFtudW1iZXIsIG51bWJlciwgbnVtYmVyXVtdID0gW107XHJcbiAgICBmb3IgKGxldCBsb2NhbEluZGV4ID0gMDsgbG9jYWxJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheS5sZW5ndGg7IGxvY2FsSW5kZXgrKykge1xyXG4gICAgICBmb3IgKGxldCBsb2NhbEludGVySW5kZXggPSAwOyBsb2NhbEludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF0ubGVuZ3RoOyBsb2NhbEludGVySW5kZXgrKykge1xyXG4gICAgICAgIGNvbnN0IGZvcmVpZ25JbmRleCA9IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtsb2NhbEludGVySW5kZXhdO1xyXG4gICAgICAgIGlmIChsb2NhbEluZGV4IDwgZm9yZWlnbkluZGV4KSB7XHJcbiAgICAgICAgICBjb25zdCBpbnRlciA9IGludGVyc2VjdGlvbkluZGV4W2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtsb2NhbEludGVySW5kZXhdXTtcclxuXHJcbiAgICAgICAgICBjb25zdCBwcmV2TG9jYWxJbnRlckluZGV4ID0gbG9jYWxJbnRlckluZGV4IC0gMTtcclxuICAgICAgICAgIGNvbnN0IG5leHRMb2NhbEludGVySW5kZXggPSBsb2NhbEludGVySW5kZXggKyAxO1xyXG5cclxuICAgICAgICAgIGNvbnN0IGZvcmVpZ25JbnRlckluZGV4ID0gaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0uZmluZEluZGV4KGkgPT4gaSA9PT0gbG9jYWxJbmRleCk7XHJcbiAgICAgICAgICBjb25zdCBmb3JlaWduaXNSaWdodFNpZGVkID0gdGhpcy50ZXN0U2lkZShsaW5lc1tsb2NhbEluZGV4XS52MSwgbGluZXNbbG9jYWxJbmRleF0udjIsIGxpbmVzW2ZvcmVpZ25JbmRleF0udjEpO1xyXG4gICAgICAgICAgY29uc3QgcHJldkZvcmVpZ25JbnRlckluZGV4ID0gZm9yZWlnbmlzUmlnaHRTaWRlZCA/IGZvcmVpZ25JbnRlckluZGV4IC0gMSA6IGZvcmVpZ25JbnRlckluZGV4ICsgMTtcclxuICAgICAgICAgIGNvbnN0IG5leHRGb3JlaWduSW50ZXJJbmRleCA9IGZvcmVpZ25pc1JpZ2h0U2lkZWQgPyBmb3JlaWduSW50ZXJJbmRleCArIDEgOiBmb3JlaWduSW50ZXJJbmRleCAtIDE7XHJcblxyXG4gICAgICAgICAgLy8gY29uc29sZS5sb2coYFxyXG4gICAgICAgICAgLy8gICBsb2NhbEluZGV4OiAke2xvY2FsSW5kZXh9XHJcbiAgICAgICAgICAvLyAgIGxvY2FsSW50ZXJzZWN0aW9ucyAke2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVxyXG4gICAgICAgICAgLy8gICAgIC5tYXAoKF8sIGkpID0+IGkgPT09IGxvY2FsSW50ZXJJbmRleCA/IGBbJHtffV1gIDogXylcclxuICAgICAgICAgIC8vICAgICAuam9pbignLCAnKX1cclxuICAgICAgICAgIC8vICAgZm9yZWlnbkluZGV4OiAke2ZvcmVpZ25JbmRleH1cclxuICAgICAgICAgIC8vICAgZm9yZWlnbkludGVyc2VjdGlvbnMgJHtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVxyXG4gICAgICAgICAgLy8gICAgIC5tYXAoKF8sIGkpID0+IGkgPT09IGZvcmVpZ25JbnRlckluZGV4ID8gYFske199XWAgOiBfKVxyXG4gICAgICAgICAgLy8gICAgIC5qb2luKCcsICcpfVxyXG4gICAgICAgICAgLy8gYCk7XHJcblxyXG4gICAgICAgICAgY29uc3QgcHJldkxvY2FsSW50ZXIgPSAwIDwgbG9jYWxJbnRlckluZGV4XHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbbG9jYWxJbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW3ByZXZMb2NhbEludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBuZXh0TG9jYWxJbnRlciA9IGxvY2FsSW50ZXJJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XS5sZW5ndGggLSAxXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbbG9jYWxJbmRleF1baW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW25leHRMb2NhbEludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBwcmV2Rm9yZWlnbkludGVyID0gLTEgPCBwcmV2Rm9yZWlnbkludGVySW5kZXggJiYgcHJldkZvcmVpZ25JbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0ubGVuZ3RoXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbZm9yZWlnbkluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVtwcmV2Rm9yZWlnbkludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICBjb25zdCBuZXh0Rm9yZWlnbkludGVyID0gLTEgPCBuZXh0Rm9yZWlnbkludGVySW5kZXggJiYgbmV4dEZvcmVpZ25JbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF0ubGVuZ3RoXHJcbiAgICAgICAgICAgID8gaW50ZXJzZWN0aW9uSW5kZXhbZm9yZWlnbkluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVtuZXh0Rm9yZWlnbkludGVySW5kZXhdXVxyXG4gICAgICAgICAgICA6IG51bGw7XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIF5cclxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgbmV4dEZvcmVpZ25JbnRlclxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICAvLyAgLS0tcHJldkxvY2FsSW50ZXItLS1pbnRlci0tLW5leHRMb2NhbEludGVyLS0tPlxyXG4gICAgICAgICAgLy8gICAgICAgICAgICAgICAgICAgICAgICB8XHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICBwcmV2Rm9yZWlnbkludGVyXHJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcclxuICAgICAgICAgIGNvbnN0IHBhcnRzID0gdGhpcy5idWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvbkluZGV4ZXMoXHJcbiAgICAgICAgICAgIGludGVyLFxyXG4gICAgICAgICAgICBbXHJcbiAgICAgICAgICAgICAgcHJldkxvY2FsSW50ZXIsXHJcbiAgICAgICAgICAgICAgbmV4dEZvcmVpZ25JbnRlcixcclxuICAgICAgICAgICAgICBuZXh0TG9jYWxJbnRlcixcclxuICAgICAgICAgICAgICBwcmV2Rm9yZWlnbkludGVyXHJcbiAgICAgICAgICAgIF1cclxuICAgICAgICAgICk7XHJcbiAgICAgICAgICBwYXJ0aWFscy5wdXNoKC4uLnBhcnRzKTtcclxuICAgICAgICB9XHJcbiAgICAgIH1cclxuICAgIH1cclxuICAgIC8vIGNvbnNvbGUubG9nKCdwYXJ0aWFscycsIHBhcnRpYWxzKTtcclxuICAgIHJldHVybiBwYXJ0aWFscztcclxuICB9XHJcbiAgYnVpbGRQb2x5Z29uSW5kZXhlc0Zyb21QYXJ0aWFscyhwYXJ0aWFsczogW251bWJlciwgbnVtYmVyLCBudW1iZXJdW10pOiBudW1iZXJbXVtdIHtcclxuICAgIGNvbnN0IHBvbHlnb25JbmRleGVzOiBudW1iZXJbXVtdID0gW107XHJcbiAgICBsZXQgaSA9IDA7XHJcbiAgICBsZXQgb3ZlcmxhcDogbnVtYmVyO1xyXG4gICAgd2hpbGUgKGkgPCBwYXJ0aWFscy5sZW5ndGgpIHtcclxuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJ0aWFscy5sZW5ndGg7IGorKynCoHtcclxuICAgICAgICBpZiAoaSAhPT0gaikge1xyXG4gICAgICAgICAgaWYgKHRoaXMucGFydGlhbHNPdmVybGFwcyhwYXJ0aWFsc1tpXSwgcGFydGlhbHNbal0pKSB7XHJcbiAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tpXTogJHtwYXJ0aWFsc1tpXS50b1N0cmluZygpfSxcclxuICAgICAgICAgICAgLy8gICBwYXJ0aWFsc1tqXTogJHtwYXJ0aWFsc1tqXS50b1N0cmluZygpfSxcclxuICAgICAgICAgICAgLy8gYCk7XHJcbiAgICAgICAgICAgIHBhcnRpYWxzW2ldLnNwbGljZSgtMiwgMiwgLi4ucGFydGlhbHNbal0pO1xyXG4gICAgICAgICAgICAvLyBjb25zb2xlLmxvZyhgXHJcbiAgICAgICAgICAgIC8vICAgcGFydGlhbHNbaV06ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX0gW05FV10sXHJcbiAgICAgICAgICAgIC8vIGApO1xyXG4gICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaiwgMSk7XHJcbiAgICAgICAgICAgIGlmIChqIDwgaSkge1xyXG4gICAgICAgICAgICAgIGktLTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBvdmVybGFwID0gdGhpcy5wYXJ0aWFsc092ZXJsYXBzKHBhcnRpYWxzW2ldLCBwYXJ0aWFsc1tpXSkgfHwgdGhpcy5wYXJ0aWFsc01lZXQocGFydGlhbHNbaV0sIHBhcnRpYWxzW2ldKTtcclxuICAgICAgICAgICAgaWYgKG92ZXJsYXAgPiAwKSB7XHJcbiAgICAgICAgICAgICAgcGFydGlhbHNbaV0uc3BsaWNlKDAsIG92ZXJsYXApO1xyXG4gICAgICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcclxuICAgICAgICAgICAgICAvLyAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9IFtDTE9TRURdLFxyXG4gICAgICAgICAgICAgIC8vIGApO1xyXG4gICAgICAgICAgICAgIHBvbHlnb25JbmRleGVzLnB1c2gocGFydGlhbHNbaV0pO1xyXG4gICAgICAgICAgICAgIHBhcnRpYWxzLnNwbGljZShpLCAxKTtcclxuICAgICAgICAgICAgfVxyXG4gICAgICAgICAgICBpID0gLTE7XHJcbiAgICAgICAgICAgIGJyZWFrO1xyXG4gICAgICAgICAgfVxyXG4gICAgICAgIH1cclxuICAgICAgfVxyXG4gICAgICBpKys7XHJcbiAgICB9XHJcbiAgICAvLyBjb25zb2xlLmxvZygnaW5jb21wbGV0ZSBwb2x5Z29ucycpO1xyXG4gICAgLy8gcGFydGlhbHMubWFwKHAgPT4gY29uc29sZS5sb2cocC50b1N0cmluZygpKSk7XHJcbiAgICAvLyBjb25zb2xlLmxvZygncG9seWdvbnMnLCBwb2x5Z29ucyk7XHJcbiAgICAvLyBwb2x5Z29ucy5tYXAocCA9PiBjb25zb2xlLmxvZyhwLnRvU3RyaW5nKCkpKTtcclxuICAgIHJldHVybiBwb2x5Z29uSW5kZXhlcztcclxuICB9XHJcbn0iLCJpbXBvcnQgeyBQb2xwbG90UmVuZGVyZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3BvbHBsb3QtcmVuZGVyZXJcIjtcclxuaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcclxuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL3BvbHlnb25cIjtcclxuaW1wb3J0IHsgU3VydmV5IH0gZnJvbSBcIi4vc3VydmV5XCI7XHJcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XHJcblxyXG4vLyBsaW5lXHJcbmNvbnN0IGdUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5nVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnYmxhY2snKTtcclxuZ1RlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XHJcblxyXG5jb25zdCBsaW5lVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2xpbmUnKTtcclxubGluZVRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLWRhc2hhcnJheScsICcxMCwgNCwgMSwgNCcpO1xyXG5cclxuY29uc3QgYW5jaG9yVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuYW5jaG9yVGVtcGxhdGUuc2V0QXR0cmlidXRlKFxyXG4gICdkJyxcclxuICAnTSAwLCAwICcgK1xyXG4gICdBIDEwLCAxMCwgMCwgMCwgMCwgLTUsIC01ICcgK1xyXG4gICdBIDEwLCAxMCwgMCwgMSwgMSwgNSwgLTUgJyArXHJcbiAgJ0EgMTAsIDEwLCAwLCAwLCAwLCAwLCAwJ1xyXG4pO1xyXG5hbmNob3JUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnd2hpdGUnKTtcclxuXHJcbmNvbnN0IHRleHRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAndGV4dCcpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnYWxpZ25tZW50LWJhc2VsaW5lJywgJ2NlbnRyYWwnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1mYW1pbHknLCAnY29uc29sYXMsIFwiTGliZXJhdGlvbiBNb25vXCIsIGNvdXJpZXIsIG1vbm9zcGFjZScpO1xyXG50ZXh0VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsICcxMDAnKTtcclxudGV4dFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZm9udC1zaXplJywgJzE0cHgnKTtcclxuXHJcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChsaW5lVGVtcGxhdGUpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQoYW5jaG9yVGVtcGxhdGUpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQoYW5jaG9yVGVtcGxhdGUuY2xvbmVOb2RlKCkpO1xyXG5nVGVtcGxhdGUuYXBwZW5kQ2hpbGQodGV4dFRlbXBsYXRlKTtcclxuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKHRleHRUZW1wbGF0ZS5jbG9uZU5vZGUoKSk7XHJcblxyXG4vLyBwb2ludFxyXG5jb25zdCBnUG9pbnRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xyXG5nUG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5nUG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjRweCcpO1xyXG5cclxuY29uc3QgcG9pbnRUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnY2lyY2xlJyk7XHJcbnBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XHJcbnBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdyJywgJzMnKTtcclxuXHJcbmNvbnN0IHRleHRQb2ludFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICd0ZXh0Jyk7XHJcbnRleHRQb2ludFRlbXBsYXRlLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgJ3RyYW5zbGF0ZSgwLCAxMCknKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCd0ZXh0LWFuY2hvcicsICdtaWRkbGUnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdhbGlnbm1lbnQtYmFzZWxpbmUnLCAnaGFuZ2luZycpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtZmFtaWx5JywgJ2NvbnNvbGFzLCBcIkxpYmVyYXRpb24gTW9ub1wiLCBjb3VyaWVyLCBtb25vc3BhY2UnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXdlaWdodCcsICcxMDAnKTtcclxudGV4dFBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmb250LXNpemUnLCAnMTRweCcpO1xyXG50ZXh0UG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZvbnQtc3R5bGUnLCAnaXRhbGljJyk7XHJcblxyXG5nUG9pbnRUZW1wbGF0ZS5hcHBlbmRDaGlsZChwb2ludFRlbXBsYXRlKTtcclxuZ1BvaW50VGVtcGxhdGUuYXBwZW5kQ2hpbGQodGV4dFBvaW50VGVtcGxhdGUpO1xyXG5cclxuLy8gcG9seWdvblxyXG5jb25zdCBwb2x5Z29uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICdncmVlbicpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMC43Jyk7XHJcbnBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjhweCcpO1xyXG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgJzUsIDInKTtcclxucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XHJcblxyXG4vLyBzdXJ2ZXlcclxuY29uc3QgZ1N1cnZleVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbmdTdXJ2ZXlUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsICd0cmFuc2xhdGUoMzAwLCAxMDApJyk7XHJcblxyXG5jb25zdCBzdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuc3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnZmlsbCcsICd1cmwoI2VhcnRoLWhhdGNoKScpO1xyXG5zdXJ2ZXlCb3R0b21Qb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMCcpO1xyXG5cclxuY29uc3Qgc3VydmV5VG9wUG9seWdvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbnN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwtb3BhY2l0eScsICcwJyk7XHJcbnN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xyXG5zdXJ2ZXlUb3BQb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC44cHgnKTtcclxuXHJcbmNvbnN0IHN1cnZleUxpdGhvbG9neVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcblxyXG5nU3VydmV5VGVtcGxhdGUuYXBwZW5kQ2hpbGQoc3VydmV5TGl0aG9sb2d5VGVtcGxhdGUpO1xyXG5nU3VydmV5VGVtcGxhdGUuYXBwZW5kQ2hpbGQoc3VydmV5Qm90dG9tUG9seWdvblRlbXBsYXRlKTtcclxuZ1N1cnZleVRlbXBsYXRlLmFwcGVuZENoaWxkKHN1cnZleVRvcFBvbHlnb25UZW1wbGF0ZSk7XHJcblxyXG4vLyBsaXRob2xvZ2ljYWxMYXllclxyXG5jb25zdCBsaXRob2xvZ2ljYWxMYXllclJlY3RUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAncmVjdCcpO1xyXG5cclxuLy8gZWFydGhIYXRjaFxyXG5jb25zdCBoYXRjaFBhdHRlcm4gPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdHRlcm4nKTtcclxuaGF0Y2hQYXR0ZXJuLmlkID0gJ2VhcnRoLWhhdGNoJztcclxuaGF0Y2hQYXR0ZXJuLnNldEF0dHJpYnV0ZSgncGF0dGVyblVuaXRzJywgJ3VzZXJTcGFjZU9uVXNlJyk7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgJzI1Jyk7XHJcbmhhdGNoUGF0dGVybi5zZXRBdHRyaWJ1dGUoJ2hlaWdodCcsICcyNScpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCdzdHJva2UnLCAnIzIyMmQzMicpO1xyXG5oYXRjaFBhdHRlcm4uc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC40cHgnKTtcclxuXHJcbmxldCBoYXRjaFBhdGggPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ3BhdGgnKTtcclxuY29uc3QgaGF0Y2hEcyA9IFtcclxuICAnTS0xLDEgbDIsLTInLFxyXG4gICdNLTEsOSBsMTAsLTEwJyxcclxuXHJcbiAgJ00tMSwxOCBsNCwtNCcsXHJcbiAgJ00tMSwyNiBsOCwtOCcsXHJcbiAgLy8gJ002LDI2IGw0LC00JyxcclxuICAnTTcsMjYgbDQsLTQnLFxyXG5cclxuICAvLyAnTTE1LDI2IGwxMCwtMTAnLFxyXG4gICdNMTYsMjYgbDEwLC0xMCcsXHJcbiAgLy8gJ00yMywyNiBsMiwtMicsXHJcbiAgJ00yNCwyNiBsMiwtMicsXHJcblxyXG4gICdNMTQsMyBsNCwtNCcsXHJcbiAgJ00xOCw3IGw4LC04JyxcclxuICAnTTIyLDExIGw0LC00JyxcclxuXHJcbiAgJ00yLDExIGwxMywxMycsXHJcbiAgJ002LDcgbDEzLDEzJyxcclxuICAnTTEwLDMgbDEzLDEzJyxcclxuXTtcclxuZm9yIChjb25zdCBkIG9mIGhhdGNoRHMpIHtcclxuICBoYXRjaFBhdGguc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcbiAgaGF0Y2hQYXR0ZXJuLmFwcGVuZENoaWxkKGhhdGNoUGF0aCk7XHJcbiAgaGF0Y2hQYXRoID0gaGF0Y2hQYXRoLmNsb25lTm9kZSgpIGFzIFNWR1BhdGhFbGVtZW50XHJcbn1cclxuXHJcbi8vIHR5cGUgc2VsZWN0XHJcbmNvbnN0IHNlbGVjdFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgnc2VsZWN0Jyk7XHJcbnNlbGVjdFRlbXBsYXRlLnN0eWxlLnBvc2l0aW9uID0gJ2Fic29sdXRlJztcclxuc2VsZWN0VGVtcGxhdGUuc3R5bGUudHJhbnNmb3JtID0gJ3RyYW5zbGF0ZVkoLTQ5JSknO1xyXG5zZWxlY3RUZW1wbGF0ZS5zdHlsZS5sZWZ0ID0gJzI0cHgnO1xyXG5sZXQgb3B0aW9uVGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdvcHRpb24nKTtcclxuY29uc3QgdmFsdWVzID0gW1xyXG4gICdub24gaWRlbnRpZmnDqScsXHJcbiAgJ2FyZ2lsZScsXHJcbiAgJ2NhbGNhaXJlJ1xyXG5dO1xyXG5jb25zdCBjb2xvcnMgPSBuZXcgTWFwKFtcclxuICBbdmFsdWVzWzBdLCAnI2ZkZTMxMiddLFxyXG4gIFt2YWx1ZXNbMV0sICcjMjg5ZmRlJ10sXHJcbiAgW3ZhbHVlc1syXSwgJyNhYmZlMTInXVxyXG5dKTtcclxuXHJcbmZvciAoY29uc3QgdmFsdWUgb2YgdmFsdWVzKSB7XHJcbiAgb3B0aW9uVGVtcGxhdGUuaW5uZXJIVE1MID0gdmFsdWU7XHJcbiAgb3B0aW9uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCd2YWx1ZScsIHZhbHVlKTtcclxuICBzZWxlY3RUZW1wbGF0ZS5hcHBlbmRDaGlsZChvcHRpb25UZW1wbGF0ZSk7XHJcbiAgb3B0aW9uVGVtcGxhdGUgPSBvcHRpb25UZW1wbGF0ZS5jbG9uZU5vZGUoKSBhcyBIVE1MT3B0aW9uRWxlbWVudDtcclxufVxyXG5cclxuLy8gcXVhbnRpdHlcclxuY29uc3QgcFRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudCgncCcpO1xyXG5wVGVtcGxhdGUuc3R5bGUuYm9yZGVyTGVmdFdpZHRoID0gJzE0cHgnO1xyXG5wVGVtcGxhdGUuc3R5bGUuZm9udEZhbWlseSA9ICdjb25zb2xhcywgXCJMaWJlcmF0aW9uIE1vbm9cIiwgY291cmllciwgbW9ub3NwYWNlJztcclxucFRlbXBsYXRlLnN0eWxlLmZvbnRXZWlnaHQgPSAnMTAwJztcclxucFRlbXBsYXRlLnN0eWxlLmZvbnRTaXplID0gJzE0cHgnO1xyXG5wVGVtcGxhdGUuc3R5bGUuaGVpZ2h0ID0gJzE0cHgnO1xyXG5wVGVtcGxhdGUuc3R5bGUucGFkZGluZ0xlZnQgPSAnOHB4JztcclxuXHJcbi8vIGNvbnRvdXJcclxuY29uc3QgY29udG91clRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XHJcbmNvbnRvdXJUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnIzAwMDUnKTtcclxuXHJcbmV4cG9ydCBjbGFzcyBTdmdSZW5kZXJlciBpbXBsZW1lbnRzIFBvbHBsb3RSZW5kZXJlciB7XHJcbiAgcHJpdmF0ZSBzdmc6IFNWR0VsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBzaWRlYmFyRGl2OiBIVE1MRGl2RWxlbWVudDtcclxuICBwcml2YXRlIHNpZGViYXJTdmc6IFNWR0VsZW1lbnQ7XHJcbiAgcHJpdmF0ZSBzZWxlY3RDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50KCdkaXYnKTtcclxuICBwcml2YXRlIHBvaW50Q29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbiAgcHJpdmF0ZSBwb2x5Z29uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbiAgcHJpdmF0ZSBsaW5lQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XHJcbiAgcHJpdmF0ZSBzdXJ2ZXlDb250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcclxuICBwcml2YXRlIHF1YW50aXRpZXNDb250YWluZXI6IEhUTUxEaXZFbGVtZW50O1xyXG4gIHByaXZhdGUgc3ZnR0J5TGluZSA9IG5ldyBNYXA8TGluZSwgU1ZHR0VsZW1lbnQ+KCk7XHJcbiAgcHJpdmF0ZSBzdmdQYXRoQnlQb2x5Z29uID0gbmV3IE1hcDxQb2x5Z29uLCBTVkdQYXRoRWxlbWVudD4oKTtcclxuICBwcml2YXRlIHN2Z0dCeVBvaW50ID0gbmV3IE1hcDxWZWN0b3IyLCBTVkdHRWxlbWVudD4oKTtcclxuICBwcml2YXRlIGhhbmRsZXJzOiBSZWNvcmQ8c3RyaW5nLCAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQ+ID0ge307XHJcbiAgcHVibGljIGxpdGhvQ2hhbmdlSGFuZGxlcjogKCkgPT4gdm9pZDtcclxuICBwcml2YXRlIHN2Z0NvbnRvdXJQYXRoOiBTVkdQYXRoRWxlbWVudDtcclxuICBjb25zdHJ1Y3RvcigpIHtcclxuICAgIHRoaXMuc3ZnQ29udG91clBhdGggPSBjb250b3VyVGVtcGxhdGUuY2xvbmVOb2RlKCkgYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICB0aGlzLnN2ZyA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5jb250ZW50Jyk7XHJcbiAgICB0aGlzLnNpZGViYXJEaXYgPSBkb2N1bWVudC5xdWVyeVNlbGVjdG9yKCcuc2lkZWJhcicpO1xyXG4gICAgdGhpcy5zaWRlYmFyU3ZnID0gZG9jdW1lbnQucXVlcnlTZWxlY3RvcignLnNpZGViYXIgPiBzdmcnKTtcclxuICAgIHRoaXMuc3ZnLnByZXBlbmQodGhpcy5zdmdDb250b3VyUGF0aCk7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZChoYXRjaFBhdHRlcm4pO1xyXG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5wb2x5Z29uQ29udGFpbmVyKTtcclxuICAgIHRoaXMuc3ZnLmFwcGVuZENoaWxkKHRoaXMubGluZUNvbnRhaW5lcik7XHJcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLnBvaW50Q29udGFpbmVyKTtcclxuICAgIHRoaXMucXVhbnRpdGllc0NvbnRhaW5lciA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJy5xdWFudGl0aWVzJyk7XHJcbiAgICB0aGlzLnNpZGViYXJTdmcuYXBwZW5kQ2hpbGQodGhpcy5zdXJ2ZXlDb250YWluZXIpO1xyXG4gICAgdGhpcy5zaWRlYmFyRGl2LmFwcGVuZENoaWxkKHRoaXMuc2VsZWN0Q29udGFpbmVyKTtcclxuICB9XHJcbiAgcHJpdmF0ZSBfc2V0RXZlbnRIYW5kbGVyKHN2ZzogU1ZHRWxlbWVudCwgZXZlbnQ6IHN0cmluZywgaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICBpZiAodGhpcy5oYW5kbGVyc1tldmVudF0pIHtcclxuICAgICAgc3ZnLnJlbW92ZUV2ZW50TGlzdGVuZXIoZXZlbnQsIHRoaXMuaGFuZGxlcnNbZXZlbnRdKTtcclxuICAgIH1cclxuICAgIHRoaXMuaGFuZGxlcnNbZXZlbnRdID0gaGFuZGxlcjtcclxuICAgIHN2Zy5hZGRFdmVudExpc3RlbmVyKGV2ZW50LCB0aGlzLmhhbmRsZXJzW2V2ZW50XSk7XHJcbiAgfVxyXG4gIHNldE1vdXNlRG93bkhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zdmcsICdtb3VzZWRvd24nLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0TW91c2VVcEhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zdmcsICdtb3VzZXVwJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIHNldE1vdXNlTW92ZUhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zdmcsICdtb3VzZW1vdmUnLCBoYW5kbGVyKTtcclxuICB9XHJcbiAgc2V0U2lkZWJhck1vdXNlRG93bkhhbmRsZXIoaGFuZGxlcjogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiB2b2lkKTogdm9pZCB7XHJcbiAgICB0aGlzLl9zZXRFdmVudEhhbmRsZXIodGhpcy5zaWRlYmFyU3ZnLCAnbW91c2Vkb3duJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIHNldFNpZGViYXJNb3VzZVVwSGFuZGxlcihoYW5kbGVyOiAoZXZlbnQ6IE1vdXNlRXZlbnQpID0+IHZvaWQpOiB2b2lkIHtcclxuICAgIHRoaXMuX3NldEV2ZW50SGFuZGxlcih0aGlzLnNpZGViYXJTdmcsICdtb3VzZXVwJywgaGFuZGxlcik7XHJcbiAgfVxyXG4gIHNldFNpZGViYXJNb3VzZU1vdmVIYW5kbGVyKGhhbmRsZXI6IChldmVudDogTW91c2VFdmVudCkgPT4gdm9pZCk6IHZvaWQge1xyXG4gICAgdGhpcy5fc2V0RXZlbnRIYW5kbGVyKHRoaXMuc2lkZWJhclN2ZywgJ21vdXNlbW92ZScsIGhhbmRsZXIpO1xyXG4gIH1cclxuICBkcmF3TGluZShsaW5lOiBMaW5lLCBuYW1lOiBzdHJpbmcpOiB2b2lkIHtcclxuICAgIGxldCBzdmdHOiBTVkdHRWxlbWVudDtcclxuICAgIGlmICghdGhpcy5zdmdHQnlMaW5lLmhhcyhsaW5lKSkge1xyXG4gICAgICBzdmdHID0gZ1RlbXBsYXRlLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdHRWxlbWVudDtcclxuICAgICAgdGhpcy5saW5lQ29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z0cpO1xyXG4gICAgICB0aGlzLnN2Z0dCeUxpbmUuc2V0KGxpbmUsIHN2Z0cpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3ZnRyA9IHRoaXMuc3ZnR0J5TGluZS5nZXQobGluZSk7XHJcbiAgICB9XHJcbiAgICBjb25zdCBzdmdMaW5lID0gc3ZnRy5jaGlsZHJlblswXSBhcyBTVkdMaW5lRWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1BhdGhBbmNob3JTdGFydCA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICBjb25zdCBzdmdQYXRoQW5jaG9yRW5kID0gc3ZnRy5jaGlsZHJlblsyXSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgIGNvbnN0IHN2Z1RleHRTdGFydCA9IHN2Z0cuY2hpbGRyZW5bM10gYXMgU1ZHVGV4dEVsZW1lbnQ7XHJcbiAgICBjb25zdCBzdmdUZXh0RW5kID0gc3ZnRy5jaGlsZHJlbls0XSBhcyBTVkdUZXh0RWxlbWVudDtcclxuICAgIGNvbnN0IHgxID0gbGluZS54MS50b0ZpeGVkKCk7XHJcbiAgICBjb25zdCB5MSA9IGxpbmUueTEudG9GaXhlZCgpO1xyXG4gICAgY29uc3QgeDIgPSBsaW5lLngyLnRvRml4ZWQoKTtcclxuICAgIGNvbnN0IHkyID0gbGluZS55Mi50b0ZpeGVkKCk7XHJcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneDEnLCB4MSk7XHJcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneTEnLCB5MSk7XHJcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneDInLCB4Mik7XHJcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneTInLCB5Mik7XHJcbiAgICBzdmdUZXh0U3RhcnQuaW5uZXJIVE1MID0gbmFtZTtcclxuICAgIHN2Z1RleHRFbmQuaW5uZXJIVE1MID0gbmFtZTtcclxuICAgIGNvbnN0IGFuZ2xlID0gMTgwICogKGxpbmUudjIuc3ViKGxpbmUudjEpLmFuZ2xlKCkgLSBNYXRoLlBJIC8gMikgLyBNYXRoLlBJO1xyXG4gICAgY29uc3QgYmVmb3JlID0gbGluZS5iZWZvcmUoMTQpO1xyXG4gICAgY29uc3QgYWZ0ZXIgPSBsaW5lLmFmdGVyKDE0KTtcclxuICAgIHN2Z1BhdGhBbmNob3JTdGFydC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt4MX0sICR7eTF9KSByb3RhdGUoJHtpc05hTihhbmdsZSkgPyAwIDogYW5nbGV9KWApO1xyXG4gICAgc3ZnUGF0aEFuY2hvckVuZC5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHt4Mn0sICR7eTJ9KSByb3RhdGUoJHtpc05hTihhbmdsZSkgPyAwIDogMTgwICsgYW5nbGV9KWApO1xyXG4gICAgc3ZnVGV4dFN0YXJ0LnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2lzTmFOKGJlZm9yZS54KSA/IHgxIDogYmVmb3JlLngudG9GaXhlZCgpfSwgJHtpc05hTihiZWZvcmUueSkgPyB5MSA6IGJlZm9yZS55LnRvRml4ZWQoKX0pYCk7XHJcbiAgICBzdmdUZXh0RW5kLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke2lzTmFOKGFmdGVyLngpID8geDIgOiBhZnRlci54LnRvRml4ZWQoKX0sICR7aXNOYU4oYWZ0ZXIueSkgPyB5MiA6IGFmdGVyLnkudG9GaXhlZCgpfSlgKTtcclxuICB9XHJcbiAgZXJhc2VMaW5lKGxpbmU6IExpbmUpOiB2b2lkIHtcclxuICAgIGNvbnN0IHN2Z0cgPSB0aGlzLnN2Z0dCeUxpbmUuZ2V0KGxpbmUpO1xyXG4gICAgaWYgKHN2Z0cpIHtcclxuICAgICAgdGhpcy5saW5lQ29udGFpbmVyLnJlbW92ZUNoaWxkKHN2Z0cpO1xyXG4gICAgICB0aGlzLnN2Z0dCeUxpbmUuZGVsZXRlKGxpbmUpO1xyXG4gICAgfVxyXG4gIH1cclxuICBkcmF3UG9pbnQocG9pbnQ6IFZlY3RvcjIsIG5hbWU6IHN0cmluZyk6IHZvaWQge1xyXG4gICAgbGV0IHN2Z0c6IFNWR0dFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLnN2Z0dCeVBvaW50Lmhhcyhwb2ludCkpIHtcclxuICAgICAgc3ZnRyA9IGdQb2ludFRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdHRWxlbWVudDtcclxuICAgICAgdGhpcy5wb2ludENvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdHKTtcclxuICAgICAgdGhpcy5zdmdHQnlQb2ludC5zZXQocG9pbnQsIHN2Z0cpO1xyXG4gICAgfSBlbHNlIHtcclxuICAgICAgc3ZnRyA9IHRoaXMuc3ZnR0J5UG9pbnQuZ2V0KHBvaW50KTtcclxuICAgIH1cclxuICAgIGNvbnN0IHN2Z1RleHQgPSBzdmdHLmNoaWxkcmVuWzFdIGFzIFNWR1RleHRFbGVtZW50O1xyXG4gICAgc3ZnRy5zZXRBdHRyaWJ1dGUoJ3RyYW5zZm9ybScsIGB0cmFuc2xhdGUoJHtwb2ludC54LnRvRml4ZWQoKX0sICR7cG9pbnQueS50b0ZpeGVkKCl9KWApO1xyXG4gICAgc3ZnVGV4dC5pbm5lckhUTUwgPSBuYW1lO1xyXG4gIH1cclxuICBwcml2YXRlIGNsZWFyQ29udGFpbmVyKGNvbnRhaW5lcjogRWxlbWVudCk6IHZvaWQge1xyXG4gICAgd2hpbGUgKGNvbnRhaW5lci5maXJzdENoaWxkKSB7XHJcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XHJcbiAgICB9XHJcbiAgfVxyXG4gIGNsZWFySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5wb2ludENvbnRhaW5lcik7XHJcbiAgfVxyXG4gIGRyYXdQb2x5Z29uKHBvbHlnb246IFBvbHlnb24sIGZpbGwgPSAnIycgKyAoTWF0aC5mbG9vcigoMTY3NzcyMTUgLSAxZTUpICogTWF0aC5yYW5kb20oKSkgKyAxZTUpLnRvU3RyaW5nKDE2KSk6IHZvaWQge1xyXG4gICAgbGV0IHN2Z1BhdGg6IFNWR1BhdGhFbGVtZW50O1xyXG4gICAgaWYgKCF0aGlzLnN2Z1BhdGhCeVBvbHlnb24uaGFzKHBvbHlnb24pKSB7XHJcbiAgICAgIHN2Z1BhdGggPSBwb2x5Z29uVGVtcGxhdGUuY2xvbmVOb2RlKCkgYXMgU1ZHUGF0aEVsZW1lbnQ7XHJcbiAgICAgIHRoaXMucG9seWdvbkNvbnRhaW5lci5hcHBlbmRDaGlsZChzdmdQYXRoKTtcclxuICAgICAgdGhpcy5zdmdQYXRoQnlQb2x5Z29uLnNldChwb2x5Z29uLCBzdmdQYXRoKTtcclxuICAgIH0gZWxzZSB7XHJcbiAgICAgIHN2Z1BhdGggPSB0aGlzLnN2Z1BhdGhCeVBvbHlnb24uZ2V0KHBvbHlnb24pO1xyXG4gICAgfVxyXG4gICAgc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2QnLCAnTSAnICsgcG9seWdvbi52ZXJ0aWNlcy5tYXAodiA9PiBgJHt2LngudG9GaXhlZCgpfSAke3YueS50b0ZpeGVkKCl9YCkuam9pbignIEwgJykgKyAnIFonKTtcclxuICAgIHN2Z1BhdGguc2V0QXR0cmlidXRlKCdmaWxsJywgZmlsbCk7XHJcbiAgfVxyXG4gIGRyYXdDb250b3VyKHBvbHlnb246IFBvbHlnb24pOiB2b2lkIHtcclxuICAgIHRoaXMuc3ZnQ29udG91clBhdGguc2V0QXR0cmlidXRlKCdkJywgJ00gJyArIHBvbHlnb24udmVydGljZXMubWFwKHYgPT4gYCR7di54LnRvRml4ZWQoKX0gJHt2LnkudG9GaXhlZCgpfWApLmpvaW4oJyBMICcpICsgJyBaJyk7XHJcbiAgfVxyXG4gIGNsZWFyUG9seWdvbnMoKTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMucG9seWdvbkNvbnRhaW5lcik7XHJcbiAgfVxyXG5cclxuICBkcmF3U3VydmV5KHN1cnZleTogU3VydmV5KTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMuc3VydmV5Q29udGFpbmVyKTtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5zZWxlY3RDb250YWluZXIpO1xyXG4gICAgY29uc3QgV0lEVEggPSAyMDA7XHJcbiAgICBjb25zdCBUSElDS05FU1MgPSAxMDtcclxuICAgIGNvbnN0IERJQU1FVEVSID0gNTA7XHJcbiAgICBjb25zdCBkID0gYE0gJHsoLVdJRFRIIC8gMikudG9GaXhlZCgpfSwgMCBgICtcclxuICAgICAgYGggJHsoKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfSBgICtcclxuICAgICAgYHYgJHtzdXJ2ZXkuZGVwdGgoKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAke0RJQU1FVEVSLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGB2ICR7LXN1cnZleS5kZXB0aCgpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGBoICR7KChXSURUSCAtIERJQU1FVEVSKSAvIDIpLnRvRml4ZWQoKX1gO1xyXG4gICAgY29uc3QgZEJvdHRvbSA9IGQgKyAnICcgK1xyXG4gICAgICBgdiAke1RISUNLTkVTUy50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgaCAkeyhUSElDS05FU1MgLSAoV0lEVEggLSBESUFNRVRFUikgLyAyKS50b0ZpeGVkKCl9IGAgK1xyXG4gICAgICBgdiAke3N1cnZleS5kZXB0aCgpLnRvRml4ZWQoKX0gYCArXHJcbiAgICAgIGBoICR7KC0oMiAqIFRISUNLTkVTUyArIERJQU1FVEVSKSkudG9GaXhlZCgpfSBgICtcclxuICAgICAgYHYgJHstc3VydmV5LmRlcHRoKCkudG9GaXhlZCgpfSBgICtcclxuICAgICAgYGggJHsoVEhJQ0tORVNTIC0gKFdJRFRIIC0gRElBTUVURVIpIC8gMikudG9GaXhlZCgpfSBaYDtcclxuXHJcbiAgICBjb25zdCBzdmdHID0gZ1N1cnZleVRlbXBsYXRlLmNsb25lTm9kZSh0cnVlKSBhcyBTVkdHRWxlbWVudDtcclxuICAgIGNvbnN0IGxpdGhvbG9neSA9IHN2Z0cuY2hpbGRyZW5bMF0gYXMgU1ZHR0VsZW1lbnQ7XHJcbiAgICBjb25zdCBib3R0b21Qb2x5Z29uID0gc3ZnRy5jaGlsZHJlblsxXSBhcyBTVkdQYXRoRWxlbWVudDtcclxuICAgIGNvbnN0IHRvcFBvbHlnb24gPSBzdmdHLmNoaWxkcmVuWzJdIGFzIFNWR1BhdGhFbGVtZW50O1xyXG4gICAgYm90dG9tUG9seWdvbi5zZXRBdHRyaWJ1dGUoJ2QnLCBkQm90dG9tKTtcclxuICAgIHRvcFBvbHlnb24uc2V0QXR0cmlidXRlKCdkJywgZCk7XHJcblxyXG4gICAgbGV0IHRvcCA9IDA7XHJcbiAgICBmb3IgKGxldCBpID0gMDsgaSA8IHN1cnZleS5saXRob2xvZ3kubGVuZ3RoOyBpKyspIHtcclxuICAgICAgY29uc3QgbGl0aG9sb2dpY2FsTGF5ZXIgPSBsaXRob2xvZ2ljYWxMYXllclJlY3RUZW1wbGF0ZS5jbG9uZU5vZGUoKSBhcyBTVkdSZWN0RWxlbWVudDtcclxuICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCd4JywgKC1ESUFNRVRFUiAvIDIpLnRvRml4ZWQoKSk7XHJcbiAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgneScsIHRvcC50b0ZpeGVkKCkpO1xyXG4gICAgICBsaXRob2xvZ2ljYWxMYXllci5zZXRBdHRyaWJ1dGUoJ3dpZHRoJywgRElBTUVURVIudG9GaXhlZCgpKTtcclxuICAgICAgbGl0aG9sb2dpY2FsTGF5ZXIuc2V0QXR0cmlidXRlKCdoZWlnaHQnLCBzdXJ2ZXkubGl0aG9sb2d5W2ldLmRlcHRoLnRvRml4ZWQoKSk7XHJcbiAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgnZmlsbCcsIGNvbG9ycy5nZXQoc3VydmV5LmxpdGhvbG9neVtpXS50eXBlKSk7XHJcbiAgICAgIGxpdGhvbG9neS5hcHBlbmRDaGlsZChsaXRob2xvZ2ljYWxMYXllcik7XHJcblxyXG4gICAgICBjb25zdCBzZWxlY3QgPSBzZWxlY3RUZW1wbGF0ZS5jbG9uZU5vZGUodHJ1ZSkgYXMgSFRNTFNlbGVjdEVsZW1lbnQ7XHJcbiAgICAgIHNlbGVjdC5xdWVyeVNlbGVjdG9yKGBvcHRpb25bdmFsdWU9XCIke3N1cnZleS5saXRob2xvZ3lbaV0udHlwZX1cIl1gKS5zZXRBdHRyaWJ1dGUoJ3NlbGVjdGVkJywgJ3NlbGVjdGVkJyk7XHJcbiAgICAgIHNlbGVjdC5hZGRFdmVudExpc3RlbmVyKCdjaGFuZ2UnLCBldmVudCA9PiB7XHJcbiAgICAgICAgc3VydmV5LmxpdGhvbG9neVtpXS50eXBlID0gc2VsZWN0LnZhbHVlO1xyXG4gICAgICAgIGxpdGhvbG9naWNhbExheWVyLnNldEF0dHJpYnV0ZSgnZmlsbCcsIGNvbG9ycy5nZXQoc2VsZWN0LnZhbHVlKSk7XHJcbiAgICAgICAgdGhpcy5saXRob0NoYW5nZUhhbmRsZXIoKTtcclxuICAgICAgfSk7XHJcbiAgICAgIHNlbGVjdC5zdHlsZS50b3AgPSAodG9wICsgMTAwICsgc3VydmV5LmxpdGhvbG9neVtpXS5kZXB0aCAvIDIpLnRvRml4ZWQoKSArICdweCc7XHJcblxyXG4gICAgICB0aGlzLnNlbGVjdENvbnRhaW5lci5hcHBlbmRDaGlsZChzZWxlY3QpO1xyXG5cclxuICAgICAgdG9wICs9IHN1cnZleS5saXRob2xvZ3lbaV0uZGVwdGg7XHJcbiAgICB9XHJcblxyXG4gICAgdGhpcy5zdXJ2ZXlDb250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnRyk7XHJcbiAgICB0aGlzLnNpZGViYXJEaXYuY2xhc3NMaXN0LmFkZCgndmlzaWJsZScpO1xyXG4gIH1cclxuICBjbGVhclN1cnZleSgpOiB2b2lkIHtcclxuICAgIHRoaXMuc2lkZWJhckRpdi5jbGFzc0xpc3QucmVtb3ZlKCd2aXNpYmxlJyk7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMuc3VydmV5Q29udGFpbmVyKTtcclxuICAgIHRoaXMuY2xlYXJDb250YWluZXIodGhpcy5zZWxlY3RDb250YWluZXIpO1xyXG4gIH1cclxuICBkcmF3UXVhbnRpdGllcyhxdWFudGl0aWVzOiBNYXA8c3RyaW5nLCBudW1iZXI+KTogdm9pZCB7XHJcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMucXVhbnRpdGllc0NvbnRhaW5lcik7XHJcbiAgICBjb25zdCBwID0gcFRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgcC5pbm5lckhUTUwgPSBgVm9sdW1lcyA6YDtcclxuICAgIHAuc3R5bGUuZm9udFN0eWxlID0gJ2JvbGQnO1xyXG4gICAgcC5zdHlsZS50ZXh0RGVjb3JhdGlvbiA9ICd1bmRlcmxpbmUnO1xyXG4gICAgdGhpcy5xdWFudGl0aWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKHApO1xyXG4gICAgcXVhbnRpdGllcy5mb3JFYWNoKChxdWFudGl0eSwgdHlwZSkgPT4ge1xyXG4gICAgICBjb25zdCBwID0gcFRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIEhUTUxQYXJhZ3JhcGhFbGVtZW50O1xyXG4gICAgICBwLmlubmVySFRNTCA9IGAke3R5cGV9ICgkeyhxdWFudGl0eSAvICgxMCAqIDEwICogNTApKS50b0ZpeGVkKDIpfSBtwrMpYDtcclxuICAgICAgcC5zdHlsZS5ib3JkZXJMZWZ0ID0gYDhweCBzb2xpZCAke2NvbG9ycy5nZXQodHlwZSl9YDtcclxuICAgICAgdGhpcy5xdWFudGl0aWVzQ29udGFpbmVyLmFwcGVuZENoaWxkKHApO1xyXG4gICAgfSk7XHJcbiAgfVxyXG59IiwiaW1wb3J0IHsgUG9scGxvdCB9IGZyb20gXCIuL3BvbHBsb3RcIjtcclxuaW1wb3J0IHsgU3ZnUmVuZGVyZXIgfSBmcm9tIFwiLi9zdmctcmVuZGVyZXJcIjtcclxuXHJcbmNvbnN0IHN2Z1JlbmRlcmVyID0gbmV3IFN2Z1JlbmRlcmVyKCk7XHJcbmNvbnN0IHBvbHBsb3QgPSBuZXcgUG9scGxvdChzdmdSZW5kZXJlcik7Il0sInNvdXJjZVJvb3QiOiIifQ==