(()=>{"use strict";var t=function(){function t(t,e){void 0===t&&(t=0),void 0===e&&(e=0),this.x=t,this.y=e}return t.dotRaw=function(t,e,n,i){return t*n+e*i},t.dot=function(t,e){return this.dotRaw(t.x,t.y,e.x,e.y)},t.prototype.dot=function(e){return t.dot(this,e)},t.crossRaw=function(t,e,n,i){return t*i-n*e},t.cross=function(t,e){return this.crossRaw(t.x,t.y,e.x,e.y)},t.prototype.cross=function(e){return t.cross(this,e)},t.lenRaw=function(t,e){return Math.sqrt(Math.pow(t,2)+Math.pow(e,2))},t.len=function(t){return this.lenRaw(t.x,t.y)},t.prototype.len=function(){return t.len(this)},t.normalizeRaw=function(t,e,n){void 0===n&&(n=1);var i=n/this.lenRaw(t,e);return this.mulRaw(t,e,i)},t.normalize=function(t,e){return void 0===e&&(e=1),this.normalizeRaw(t.x,t.y,e)},t.prototype.normalize=function(e){return void 0===e&&(e=1),t.normalize(this,e)},t.equalsRaw=function(t,e,n,i){return Math.abs(t-n)<3&&Math.abs(e-i)<3},t.equals=function(t,e){return this.equalsRaw(t.x,t.y,e.x,e.y)},t.prototype.equals=function(e){return t.equals(this,e)},t.addRaw=function(e,n,i,r){return new t(e+i,n+r)},t.add=function(t,e){return this.addRaw(t.x,t.y,e.x,e.y)},t.prototype.add=function(e){return t.add(this,e)},t.subRaw=function(e,n,i,r){return new t(e-i,n-r)},t.sub=function(t,e){return this.subRaw(t.x,t.y,e.x,e.y)},t.prototype.sub=function(e){return t.sub(this,e)},t.mulRaw=function(e,n,i){return new t(e*i,n*i)},t.mul=function(t,e){return this.mulRaw(t.x,t.y,e)},t.prototype.mul=function(e){return t.mul(this,e)},t.intersectionTimesRaw=function(e,n,i,r,o,s,u,a){var c=this.crossRaw(i-e,r-n,u-o,a-s);return new t(this.crossRaw(u-o,a-s,e-o,n-s)/c,this.crossRaw(i-e,r-n,e-o,n-s)/c)},t.intersectionTimes=function(t,e,n,i){return this.intersectionTimesRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersectionTimes=function(e,n,i){return t.intersectionTimes(this,e,n,i)},t.intersectionRaw=function(t,e,n,i,r,o,s,u){var a=this.intersectionTimesRaw(t,e,n,i,r,o,s,u);if(a)return a.y=e+(i-e)*a.x,a.x=t+(n-t)*a.x,a},t.intersection=function(t,e,n,i){return this.intersectionRaw(t.x,t.y,e.x,e.y,n.x,n.y,i.x,i.y)},t.prototype.intersection=function(e,n,i){return t.intersection(this,e,n,i)},t.prototype.angle=function(t){if(t){var e=this.angle(),n=t.angle();return n<e?n+2*Math.PI-e:n-e}return this.y>0?Math.acos(this.x/this.len()):2*Math.PI-Math.acos(this.x/this.len())},t}(),e=function(){function e(e,n,i,r){this.v1=new t(e,n),this.v2=new t(i,r)}return Object.defineProperty(e.prototype,"x1",{get:function(){return this.v1.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y1",{get:function(){return this.v1.y},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"x2",{get:function(){return this.v2.x},enumerable:!1,configurable:!0}),Object.defineProperty(e.prototype,"y2",{get:function(){return this.v2.y},enumerable:!1,configurable:!0}),e.prototype.len=function(){return this.v2.sub(this.v1).len()},e.prototype.pointAt=function(t){return this.v1.add(this.v2.sub(this.v1).mul(t))},e.prototype.before=function(t){return this.v1.add(this.v2.sub(this.v1).mul(-t/this.len()))},e.prototype.after=function(t){return this.v1.add(this.v2.sub(this.v1).mul((this.len()+t)/this.len()))},e.prototype.intersectionTimesWith=function(t){return this.v1.intersectionTimes(this.v2,t.v1,t.v2)},e.prototype.update=function(t,e,n,i){void 0===t&&(t=0),void 0===e&&(e=0),void 0===n&&(n=0),void 0===i&&(i=0),this.v1.x+=t,this.v1.y+=e,this.v2.x+=n,this.v2.y+=i},e}(),n=function(){function t(t){void 0===t&&(t=[]),this.vertices=t}return t.prototype.areaBetween=function(t,e){return(this.vertices[e].x-this.vertices[t].x)*(this.vertices[t].y+this.vertices[e].y)/2},t.prototype.area=function(){for(var t=0,e=this.vertices.length-1,n=0;n<this.vertices.length;n++)t+=this.areaBetween(e,n),e=n;return t},t.prototype.shareEdge=function(t,e){for(var n=this.vertices.length-1,i=0;i<this.vertices.length;i++){if(this.vertices[n].equals(t)&&this.vertices[i].equals(e))return!0;n=i}return!1},t.prototype.intersectionWith=function(t){},t.prototype.reverse=function(){this.vertices.reverse()},t.prototype.toString=function(){return this.vertices.length+" points: "+this.vertices.map((function(t){return"("+t.x.toFixed()+", "+t.y.toFixed()+")"})).join(", ")+" (area: "+this.area().toFixed()+")"},t}(),i=function(){for(var t=0,e=0,n=arguments.length;e<n;e++)t+=arguments[e].length;var i=Array(t),r=0;for(e=0;e<n;e++)for(var o=arguments[e],s=0,u=o.length;s<u;s++,r++)i[r]=o[s];return i},r=function(){function t(t){var n,i,r,o,s=this;this.renderer=t,this.lines=[],this.intersectionTimes=[],this.intersectionPoints=[],this.renderer.setMouseDownHandler((function(t,r,o){i=o||null,(n=r||null)||(n=new e(t.clientX,t.clientY,t.clientX,t.clientY),i=n.v2,s.addLine(n))})),this.renderer.setMouseUpHandler((function(t,e,u){e?(r&&r!==e&&s.renderer.drawLine(r,e===o,!1),r=e,s.renderer.drawLine(r,e===o,!0)):r&&s.renderer.drawLine(r,e===o,!1),n=null,i=null})),this.renderer.setMouseMoveHandler((function(t,e,u){e?(o&&o!==e&&s.renderer.drawLine(o,!1,e===r),o=e,s.renderer.drawLine(o,!0,e===r)):o&&(s.renderer.drawLine(o,!1,e===r),o=null),n&&(i?(i.x=t.clientX,i.y=t.clientY):n.update(t.movementX,t.movementY,t.movementX,t.movementY),s.updateIntersectionTimes(n),s.renderer.drawLine(n,n===o,n===r))}))}return t.prototype.addLine=function(t){this.addIntersectionTimes(t),this.lines.push(t),this.renderer.drawLine(t,!1,!1)},t.prototype.addIntersectionTimes=function(t,e,n,i){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersectionPoints);for(var r,o=[],s=[],u=0;u<e.length;u++)r=e[u].intersectionTimesWith(t),n[u].push(r.x),i[u].push(0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[u].v1.add(e[u].v2.sub(e[u].v1).mul(r.x)):null),o.push(r.y),s.push(null);o.push(NaN),s.push(null),n.push(o),i.push(s),this.renderIntersections()},t.prototype.updateIntersectionTimes=function(t,e,n,i){void 0===e&&(e=this.lines),void 0===n&&(n=this.intersectionTimes),void 0===i&&(i=this.intersectionPoints);for(var r,o=e.indexOf(t),s=0;s<e.length;s++)s!==o&&(r=e[s].intersectionTimesWith(t),n[s][o]=r.x,n[o][s]=r.y,s<o?i[s][o]=0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[s].v1.add(e[s].v2.sub(e[s].v1).mul(r.x)):null:i[o][s]=0<=r.x&&r.x<=1&&0<=r.y&&r.y<=1?e[s].v1.add(e[s].v2.sub(e[s].v1).mul(r.x)):null);this.renderIntersections()},t.prototype.renderIntersections=function(){var t=this;this.renderer.clearIntersections(),this.intersectionPoints.forEach((function(e){e.forEach((function(e){e&&t.renderer.drawPoint(e)}))})),this.renderer.clearPolygons();var e=this.buildPartialsFromIntersectionTimes();this.buildPolygonsFromPartials(e).forEach((function(e){return t.renderer.drawPolygon(e)}))},t.prototype.testSide=function(t,e,n){return e.sub(t).cross(n.sub(t))>0},t.prototype.partialsAreConnected=function(t,e){return t.vertices[t.vertices.length-2].equals(e.vertices[0])&&t.vertices[t.vertices.length-1].equals(e.vertices[1])},t.prototype.buildPartialsFromPoints=function(t,e,i,r){for(var o=[],s=0;s<e.length;s++)if(e[s]){var u=s+1;for(u===e.length&&(u=0);!e[u];)++u===e.length&&(u=0);s!==u&&o.push([s,u])}return o.map((function(i){var r=i[0],o=i[1];return new n([e[r],t,e[o]])}))},t.prototype.buildPartialsFromIntersectionTimes=function(t,e){void 0===t&&(t=this.lines),void 0===e&&(e=this.intersectionTimes),console.log("buildPartialsFromIntersectionTimes"),console.log("----------------------------------"),console.log("lines.length = ",t.length);var n=e.map((function(t,n){return t.map((function(t,e){return e})).filter((function(i){return!isNaN(t[i])&&0<=t[i]&&t[i]<=1&&!isNaN(e[i][n])&&0<=e[i][n]&&e[i][n]<=1})).sort((function(e,n){return t[e]-t[n]}))}));console.log(n);for(var i=[],r=function(r){for(var s=0;s<n[r].length;s++){var u=n[r][s];if(r<u){var a=t[r].pointAt(e[r][n[r][s]]),c=s-1,l=s+1,h=n[u].findIndex((function(t){return t===r})),p=h-1,d=h+1,v=0<s?t[r].pointAt(e[r][n[r][c]]):null,f=s<n[r].length-1?t[r].pointAt(e[r][n[r][l]]):null,y=0<h?t[u].pointAt(e[u][n[u][p]]):null,g=h<n[u].length-1?t[u].pointAt(e[u][n[u][d]]):null,w=o.buildPartialsFromPoints(a,[v,g,f,y],t[r],t[u]);i.push.apply(i,w)}}},o=this,s=0;s<n.length;s++)r(s);return i},t.prototype.buildPolygonsFromPartials=function(t){for(var e,n=[],r=0;r<t.length;){for(var o=0;o<t.length;o++)if(r!==o&&this.partialsAreConnected(t[r],t[o])){console.log("\n              partials[i]: "+t[r].toString()+",\n              partials[j]: "+t[o].toString()+",\n            "),(e=t[r].vertices).splice.apply(e,i([-2,2],t[o].vertices)),console.log("\n              partials[i]: "+t[r].toString()+" [NEW],\n            "),t.splice(o,1),o<r&&r--,this.partialsAreConnected(t[r],t[r])?(t[r].vertices.splice(0,2),console.log("\n                new connected polygon: "+t[r].toString()+"\n              "),n.push(t[r]),t.splice(r,1)):t[r].vertices[0].equals(t[r].vertices[t[r].vertices.length-1])&&(t[r].vertices.pop(),console.log("\n                new closed polygon: "+t[r].toString()+"\n              "),n.push(t[r]),t.splice(r,1)),r=-1;break}r++}return console.log("polygons",n),n.map((function(t){return console.log(t.toString())})),n},t}(),o=document.createElementNS("http://www.w3.org/2000/svg","g");o.setAttribute("stroke","black"),o.setAttribute("stroke-width","0.4px");var s=document.createElementNS("http://www.w3.org/2000/svg","line");s.setAttribute("stroke-dasharray","10, 4, 1, 4");var u=document.createElementNS("http://www.w3.org/2000/svg","path");u.setAttribute("d","M 0, 0A 10, 10, 0, 0, 0, -5, -5A 10, 10, 0, 1, 1, 5, -5A 10, 10, 0, 0, 0, 0, 0"),u.setAttribute("fill","white"),o.appendChild(s),o.appendChild(u),o.appendChild(u.cloneNode());var a=document.createElementNS("http://www.w3.org/2000/svg","circle");a.setAttribute("fill","green"),a.setAttribute("r","3");var c=document.createElementNS("http://www.w3.org/2000/svg","path");c.setAttribute("fill","green"),c.setAttribute("fill-opacity","0.7"),c.setAttribute("stroke-width","3"),c.setAttribute("stroke","grey");var l=new(function(){function t(){this.svg=document.createElementNS("http://www.w3.org/2000/svg","svg"),this.intersectionContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.polygonContainer=document.createElementNS("http://www.w3.org/2000/svg","g"),this.svgGByLine=new Map,this.lineBySvgG=new Map,this.svg.appendChild(this.intersectionContainer),this.svg.appendChild(this.polygonContainer)}return t.prototype.clickHandlerWrapper=function(t){var e=this;return function(n){var i=document.elementFromPoint(n.clientX,n.clientY),r=e.lineBySvgG.get(i.parentNode);i instanceof SVGPathElement&&i.parentNode!==e.polygonContainer?i.parentNode.children[1]===i?t(n,r,r.v1):t(n,r,r.v2):i instanceof SVGLineElement?t(n,r):t(n)}},t.prototype.setMouseDownHandler=function(t){this.onMouseDown&&this.svg.removeEventListener("mousedown",this.onMouseDown),this.onMouseDown=this.clickHandlerWrapper(t),this.svg.addEventListener("mousedown",this.onMouseDown)},t.prototype.setMouseUpHandler=function(t){this.onMouseUp&&this.svg.removeEventListener("mouseup",this.onMouseUp),this.onMouseUp=this.clickHandlerWrapper(t),this.svg.addEventListener("mouseup",this.onMouseUp)},t.prototype.setMouseMoveHandler=function(t){this.onMouseMove&&this.svg.removeEventListener("mousemove",this.onMouseMove),this.onMouseMove=this.clickHandlerWrapper(t),this.svg.addEventListener("mousemove",this.onMouseMove)},t.prototype.drawLine=function(t,e,n){var i;void 0===e&&(e=!1),void 0===n&&(n=!1),this.svgGByLine.has(t)?i=this.svgGByLine.get(t):(i=o.cloneNode(!0),this.svg.appendChild(i),this.svgGByLine.set(t,i),this.lineBySvgG.set(i,t));var r=i.children[0],s=i.children[1],u=i.children[2],a=t.x1.toFixed(),c=t.y1.toFixed(),l=t.x2.toFixed(),h=t.y2.toFixed();r.setAttribute("x1",a),r.setAttribute("y1",c),r.setAttribute("x2",l),r.setAttribute("y2",h),e?i.setAttribute("stroke-width","0.8px"):i.setAttribute("stroke-width","0.4px"),n?i.setAttribute("stroke","#19a194"):i.setAttribute("stroke","black");var p=180*(t.v2.sub(t.v1).angle()-Math.PI/2)/Math.PI;s.setAttribute("transform","translate("+a+", "+c+") rotate("+(isNaN(p)?0:p)+")"),u.setAttribute("transform","translate("+l+", "+h+") rotate("+(isNaN(p)?0:180+p)+")")},t.prototype.eraseLine=function(t){var e=this.svgGByLine.get(t);e&&(this.svg.removeChild(e),this.svgGByLine.delete(t))},t.prototype.drawPoint=function(t){var e=a.cloneNode();e.setAttribute("cx",t.x.toFixed()),e.setAttribute("cy",t.y.toFixed()),this.intersectionContainer.appendChild(e)},t.prototype.clearContainer=function(t){for(;t.firstChild;)t.removeChild(t.firstChild)},t.prototype.clearIntersections=function(){this.clearContainer(this.intersectionContainer)},t.prototype.drawPolygon=function(t){var e=c.cloneNode();e.setAttribute("d","M "+t.vertices.map((function(t){return t.x.toFixed()+" "+t.y.toFixed()})).join(" L ")+"Z"),e.setAttribute("fill","#"+(Math.floor(16677215*Math.random())+1e5).toString(16)),this.polygonContainer.appendChild(e)},t.prototype.clearPolygons=function(){this.clearContainer(this.polygonContainer)},t}());new r(l),document.querySelector("body").appendChild(l.svg)})();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3ZlY3RvcjIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9saW5lLnRzIiwid2VicGFjazovL3BvbHBsb3QvLi9zcmMvcG9seWdvbi50cyIsIndlYnBhY2s6Ly9wb2xwbG90Ly4vc3JjL3BvbHBsb3QudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9zdmctcmVuZGVyZXIudHMiLCJ3ZWJwYWNrOi8vcG9scGxvdC8uL3NyYy9pbmRleC50cyJdLCJuYW1lcyI6WyJ4IiwieSIsImRvdFJhdyIsIngxIiwieTEiLCJ4MiIsInkyIiwiZG90IiwidSIsInYiLCJ0aGlzIiwib3RoZXIiLCJWZWN0b3IyIiwiY3Jvc3NSYXciLCJjcm9zcyIsImxlblJhdyIsIk1hdGgiLCJzcXJ0IiwicG93IiwibGVuIiwibm9ybWFsaXplUmF3IiwiYnkiLCJjb2VmIiwibXVsUmF3Iiwibm9ybWFsaXplIiwiZXF1YWxzUmF3IiwiYWJzIiwiZXF1YWxzIiwiYWRkUmF3IiwiYWRkIiwic3ViUmF3Iiwic3ViIiwibXVsIiwiaW50ZXJzZWN0aW9uVGltZXNSYXciLCJmeCIsImZ5IiwidHgiLCJ0eSIsInN4Iiwic3kiLCJleCIsImV5IiwiZGV0IiwiaW50ZXJzZWN0aW9uVGltZXMiLCJmcm9tIiwidG8iLCJzdGFydCIsImVuZCIsImludGVyc2VjdGlvblJhdyIsInRpbWVzIiwiaW50ZXJzZWN0aW9uIiwiYW5nbGUiLCJhMSIsImEyIiwiUEkiLCJhY29zIiwidjEiLCJ2MiIsInBvaW50QXQiLCJ0IiwiYmVmb3JlIiwiYWZ0ZXIiLCJpbnRlcnNlY3Rpb25UaW1lc1dpdGgiLCJ1cGRhdGUiLCJkeDEiLCJkeTEiLCJkeDIiLCJkeTIiLCJ2ZXJ0aWNlcyIsImFyZWFCZXR3ZWVuIiwiaSIsImoiLCJhcmVhIiwiYSIsImxlbmd0aCIsInNoYXJlRWRnZSIsImludGVyc2VjdGlvbldpdGgiLCJsaW5lIiwicmV2ZXJzZSIsInRvU3RyaW5nIiwibWFwIiwidG9GaXhlZCIsImpvaW4iLCJyZW5kZXJlciIsImRyYWdnZWRMaW5lIiwiZHJhZ2dlZFZlY3RvcjIiLCJzZWxlY3RlZExpbmUiLCJob3ZlcmVkTGluZSIsImxpbmVzIiwiaW50ZXJzZWN0aW9uUG9pbnRzIiwic2V0TW91c2VEb3duSGFuZGxlciIsImV2ZW50IiwiY2xpY2tlZExpbmUiLCJjbGlja2VkVmVjdG9yMiIsIkxpbmUiLCJjbGllbnRYIiwiY2xpZW50WSIsImFkZExpbmUiLCJzZXRNb3VzZVVwSGFuZGxlciIsImRyYXdMaW5lIiwic2V0TW91c2VNb3ZlSGFuZGxlciIsIm1vdmVtZW50WCIsIm1vdmVtZW50WSIsInVwZGF0ZUludGVyc2VjdGlvblRpbWVzIiwiYWRkSW50ZXJzZWN0aW9uVGltZXMiLCJwdXNoIiwibmV3SW50ZXJzZWN0aW9uVGltZXMiLCJuZXdJbnRlcnNlY3Rpb25Qb2ludHMiLCJOYU4iLCJyZW5kZXJJbnRlcnNlY3Rpb25zIiwiaW5kZXgiLCJpbmRleE9mIiwiY2xlYXJJbnRlcnNlY3Rpb25zIiwiZm9yRWFjaCIsImludGVyc2VjdGlvblBvaW50IiwiZHJhd1BvaW50IiwiY2xlYXJQb2x5Z29ucyIsInBhcnRpYWxzIiwiYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyIsImJ1aWxkUG9seWdvbnNGcm9tUGFydGlhbHMiLCJwb2x5Z29uIiwiZHJhd1BvbHlnb24iLCJ0ZXN0U2lkZSIsInciLCJwYXJ0aWFsc0FyZUNvbm5lY3RlZCIsInAxIiwicDIiLCJidWlsZFBhcnRpYWxzRnJvbVBvaW50cyIsInBvaW50cyIsImxvY2FsTGluZSIsImZvcmVpZ25MaW5lIiwicGFydHMiLCJQb2x5Z29uIiwiY29uc29sZSIsImxvZyIsImludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheSIsImludGVyc2VjdGlvblRpbWVzQXRJIiwiXyIsImZpbHRlciIsImlzTmFOIiwic29ydCIsImxvY2FsSW5kZXgiLCJsb2NhbEludGVySW5kZXgiLCJmb3JlaWduSW5kZXgiLCJpbnRlciIsInByZXZMb2NhbEludGVySW5kZXgiLCJuZXh0TG9jYWxJbnRlckluZGV4IiwiZm9yZWlnbkludGVySW5kZXgiLCJmaW5kSW5kZXgiLCJwcmV2Rm9yZWlnbkludGVySW5kZXgiLCJuZXh0Rm9yZWlnbkludGVySW5kZXgiLCJwcmV2TG9jYWxJbnRlciIsIm5leHRMb2NhbEludGVyIiwicHJldkZvcmVpZ25JbnRlciIsIm5leHRGb3JlaWduSW50ZXIiLCJwb2x5Z29ucyIsInNwbGljZSIsInBvcCIsInAiLCJnVGVtcGxhdGUiLCJkb2N1bWVudCIsImNyZWF0ZUVsZW1lbnROUyIsInNldEF0dHJpYnV0ZSIsImxpbmVUZW1wbGF0ZSIsImFuY2hvclRlbXBsYXRlIiwiYXBwZW5kQ2hpbGQiLCJjbG9uZU5vZGUiLCJwb2ludFRlbXBsYXRlIiwicG9seWdvblRlbXBsYXRlIiwic3ZnUmVuZGVyZXIiLCJzdmciLCJpbnRlcnNlY3Rpb25Db250YWluZXIiLCJwb2x5Z29uQ29udGFpbmVyIiwic3ZnR0J5TGluZSIsIk1hcCIsImxpbmVCeVN2Z0ciLCJjbGlja0hhbmRsZXJXcmFwcGVyIiwiY2xpY2tIYW5kbGVyIiwiZWxlbWVudEF0IiwiZWxlbWVudEZyb21Qb2ludCIsImdldCIsInBhcmVudE5vZGUiLCJTVkdQYXRoRWxlbWVudCIsImNoaWxkcmVuIiwiU1ZHTGluZUVsZW1lbnQiLCJvbk1vdXNlRG93biIsInJlbW92ZUV2ZW50TGlzdGVuZXIiLCJhZGRFdmVudExpc3RlbmVyIiwib25Nb3VzZVVwIiwib25Nb3VzZU1vdmUiLCJpc0hvdmVyZWQiLCJpc1NlbGVjdGVkIiwic3ZnRyIsImhhcyIsInNldCIsInN2Z0xpbmUiLCJzdmdQYXRoQW5jaG9yU3RhcnQiLCJzdmdQYXRoQW5jaG9yRW5kIiwiZXJhc2VMaW5lIiwicmVtb3ZlQ2hpbGQiLCJkZWxldGUiLCJwb2ludCIsInN2Z0NpcmNsZSIsImNsZWFyQ29udGFpbmVyIiwiY29udGFpbmVyIiwiZmlyc3RDaGlsZCIsInN2Z1BhdGgiLCJmbG9vciIsInJhbmRv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dGVudCI6WyJjb25zdCBFUFNJTE9OID0gMztcblxuZXhwb3J0IGNsYXNzIFZlY3RvcjIge1xuICBjb25zdHJ1Y3RvcihwdWJsaWMgeCA9IDAsIHB1YmxpYyB5ID0gMCkge31cbiAgc3RhdGljIGRvdFJhdyh4MTogbnVtYmVyLCB5MTogbnVtYmVyLCB4MjogbnVtYmVyLCB5MjogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4geDEgKiB4MiArIHkxICogeTI7XG4gIH1cbiAgc3RhdGljIGRvdCh1OiBWZWN0b3IyLCB2OiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5kb3RSYXcodS54LCB1LnksIHYueCwgdi55KTtcbiAgfVxuICBkb3Qob3RoZXI6IFZlY3RvcjIpOiBudW1iZXIge1xuICAgIHJldHVybiBWZWN0b3IyLmRvdCh0aGlzLCBvdGhlcik7XG4gIH1cbiAgc3RhdGljIGNyb3NzUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiB4MSAqIHkyIC0geDIgKiB5MTtcbiAgfVxuICBzdGF0aWMgY3Jvc3ModTogVmVjdG9yMiwgdjogVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMuY3Jvc3NSYXcodS54LCB1LnksIHYueCwgdi55KTtcbiAgfVxuICBjcm9zcyhvdGhlcjogVmVjdG9yMik6IG51bWJlciB7XG4gICAgcmV0dXJuIFZlY3RvcjIuY3Jvc3ModGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBsZW5SYXcoeDogbnVtYmVyLCB5OiBudW1iZXIpOiBudW1iZXIge1xuICAgIHJldHVybiBNYXRoLnNxcnQoTWF0aC5wb3coeCwgMikgKyBNYXRoLnBvdyh5LCAyKSk7XG4gIH1cbiAgc3RhdGljIGxlbih1OiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy5sZW5SYXcodS54LCB1LnkpO1xuICB9XG4gIGxlbigpOiBudW1iZXIge1xuICAgIHJldHVybiBWZWN0b3IyLmxlbih0aGlzKTtcbiAgfVxuICBzdGF0aWMgbm9ybWFsaXplUmF3KHg6IG51bWJlciwgeTogbnVtYmVyLCBieTogbnVtYmVyID0gMSk6IFZlY3RvcjIge1xuICAgIGNvbnN0IGNvZWYgPSBieSAvIHRoaXMubGVuUmF3KHgsIHkpO1xuICAgIHJldHVybiB0aGlzLm11bFJhdyh4LCB5LCBjb2VmKTtcbiAgfVxuICBzdGF0aWMgbm9ybWFsaXplKHU6IFZlY3RvcjIsIGJ5OiBudW1iZXIgPSAxKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMubm9ybWFsaXplUmF3KHUueCwgdS55LCBieSk7XG4gIH1cbiAgbm9ybWFsaXplKGJ5OiBudW1iZXIgPSAxKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIFZlY3RvcjIubm9ybWFsaXplKHRoaXMsIGJ5KTtcbiAgfVxuICBzdGF0aWMgZXF1YWxzUmF3KHgxOiBudW1iZXIsIHkxOiBudW1iZXIsIHgyOiBudW1iZXIsIHkyOiBudW1iZXIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gTWF0aC5hYnMoeDEgLSB4MikgPCBFUFNJTE9OICYmIE1hdGguYWJzKHkxIC0geTIpIDwgRVBTSUxPTjtcbiAgICAvLyByZXR1cm4geDEgPT09IHgyICYmIHkxID09PSB5MjtcbiAgfVxuICBzdGF0aWMgZXF1YWxzKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gdGhpcy5lcXVhbHNSYXcodS54LCB1LnksIHYueCwgdi55KTtcbiAgfVxuICBlcXVhbHMob3RoZXI6IFZlY3RvcjIpOiBib29sZWFuIHtcbiAgICByZXR1cm4gVmVjdG9yMi5lcXVhbHModGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBhZGRSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih4MSArIHgyLCB5MSArIHkyKTtcbiAgfVxuICBzdGF0aWMgYWRkKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5hZGRSYXcodS54LCB1LnksIHYueCwgdi55KTtcbiAgfVxuICBhZGQob3RoZXI6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gVmVjdG9yMi5hZGQodGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBzdWJSYXcoeDE6IG51bWJlciwgeTE6IG51bWJlciwgeDI6IG51bWJlciwgeTI6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiBuZXcgVmVjdG9yMih4MSAtIHgyLCB5MSAtIHkyKTtcbiAgfVxuICBzdGF0aWMgc3ViKHU6IFZlY3RvcjIsIHY6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gdGhpcy5zdWJSYXcodS54LCB1LnksIHYueCwgdi55KTtcbiAgfVxuICBzdWIob3RoZXI6IFZlY3RvcjIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gVmVjdG9yMi5zdWIodGhpcywgb3RoZXIpO1xuICB9XG4gIHN0YXRpYyBtdWxSYXcoeDogbnVtYmVyLCB5OiBudW1iZXIsIGJ5OiBudW1iZXIpOiBWZWN0b3IyIHtcbiAgICByZXR1cm4gbmV3IFZlY3RvcjIoeCAqIGJ5LCB5ICogYnkpO1xuICB9XG4gIHN0YXRpYyBtdWwodTogVmVjdG9yMiwgYnk6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLm11bFJhdyh1LngsIHUueSwgYnkpO1xuICB9XG4gIG11bChieTogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIFZlY3RvcjIubXVsKHRoaXMsIGJ5KTtcbiAgfVxuICBzdGF0aWMgaW50ZXJzZWN0aW9uVGltZXNSYXcoXG4gICAgZng6IG51bWJlciwgZnk6IG51bWJlciwgdHg6IG51bWJlciwgdHk6IG51bWJlcixcbiAgICBzeDogbnVtYmVyLCBzeTogbnVtYmVyLCBleDogbnVtYmVyLCBleTogbnVtYmVyXG4gICk6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xuICAgIGNvbnN0IGRldCA9IHRoaXMuY3Jvc3NSYXcodHggLSBmeCwgdHkgLSBmeSwgZXggLSBzeCwgZXkgLSBzeSk7XG4gICAgcmV0dXJuIG5ldyBWZWN0b3IyKFxuICAgICAgdGhpcy5jcm9zc1JhdyhleCAtIHN4LCBleSAtIHN5LCBmeCAtIHN4LCBmeSAtIHN5KSAvIGRldCxcbiAgICAgIHRoaXMuY3Jvc3NSYXcodHggLSBmeCwgdHkgLSBmeSwgZnggLSBzeCwgZnkgLSBzeSkgLyBkZXRcbiAgICApO1xuICB9XG4gIHN0YXRpYyBpbnRlcnNlY3Rpb25UaW1lcyhcbiAgICBmcm9tOiBWZWN0b3IyLCB0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMlxuICApOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcbiAgICByZXR1cm4gdGhpcy5pbnRlcnNlY3Rpb25UaW1lc1Jhdyhmcm9tLngsIGZyb20ueSwgdG8ueCwgdG8ueSwgc3RhcnQueCwgc3RhcnQueSwgZW5kLngsIGVuZC55KTtcbiAgfVxuICBpbnRlcnNlY3Rpb25UaW1lcyh0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBWZWN0b3IyLmludGVyc2VjdGlvblRpbWVzKHRoaXMsIHRvLCBzdGFydCwgZW5kKTtcbiAgfVxuICBzdGF0aWMgaW50ZXJzZWN0aW9uUmF3KFxuICAgIGZ4OiBudW1iZXIsIGZ5OiBudW1iZXIsIHR4OiBudW1iZXIsIHR5OiBudW1iZXIsXG4gICAgc3g6IG51bWJlciwgc3k6IG51bWJlciwgZXg6IG51bWJlciwgZXk6IG51bWJlclxuICApOiBWZWN0b3IyIHwgdW5kZWZpbmVkIHtcbiAgICBjb25zdCB0aW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXNSYXcoZngsIGZ5LCB0eCwgdHksIHN4LCBzeSwgZXgsIGV5KTtcbiAgICBpZiAodGltZXMpIHtcbiAgICAgIHRpbWVzLnkgPSBmeSArICh0eSAtIGZ5KSAqIHRpbWVzLng7XG4gICAgICB0aW1lcy54ID0gZnggKyAodHggLSBmeCkgKiB0aW1lcy54O1xuICAgICAgcmV0dXJuIHRpbWVzO1xuICAgIH1cbiAgfVxuICBzdGF0aWMgaW50ZXJzZWN0aW9uKGZyb206IFZlY3RvcjIsIHRvOiBWZWN0b3IyLCBzdGFydDogVmVjdG9yMiwgZW5kOiBWZWN0b3IyKTogVmVjdG9yMiB8IHVuZGVmaW5lZCB7XG4gICAgcmV0dXJuIHRoaXMuaW50ZXJzZWN0aW9uUmF3KGZyb20ueCwgZnJvbS55LCB0by54LCB0by55LCBzdGFydC54LCBzdGFydC55LCBlbmQueCwgZW5kLnkpO1xuICB9XG4gIGludGVyc2VjdGlvbih0bzogVmVjdG9yMiwgc3RhcnQ6IFZlY3RvcjIsIGVuZDogVmVjdG9yMik6IFZlY3RvcjIgfCB1bmRlZmluZWQge1xuICAgIHJldHVybiBWZWN0b3IyLmludGVyc2VjdGlvbih0aGlzLCB0bywgc3RhcnQsIGVuZCk7XG4gIH1cbiAgYW5nbGUob3RoZXI/OiBWZWN0b3IyKTogbnVtYmVyIHtcbiAgICBpZiAob3RoZXIpIHtcbiAgICAgICBjb25zdCBhMSA9IHRoaXMuYW5nbGUoKTtcbiAgICAgICBjb25zdCBhMiA9IG90aGVyLmFuZ2xlKCk7XG4gICAgICAgaWYgKGEyIDwgYTEpIHtcbiAgICAgICAgcmV0dXJuIGEyICsgMiAqIE1hdGguUEkgLSBhMTtcbiAgICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYTIgLSBhMTtcbiAgICAgICB9XG4gICAgfSBlbHNlIGlmICh0aGlzLnkgPiAwKSB7XG4gICAgICByZXR1cm4gTWF0aC5hY29zKHRoaXMueCAvIHRoaXMubGVuKCkpO1xuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gMiAqIE1hdGguUEkgLSBNYXRoLmFjb3ModGhpcy54IC8gdGhpcy5sZW4oKSk7XG4gICAgfVxuICB9XG59IiwiaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcblxuZXhwb3J0IGNsYXNzIExpbmUge1xuICB2MTogVmVjdG9yMjtcbiAgdjI6IFZlY3RvcjI7XG4gIGNvbnN0cnVjdG9yKFxuICAgIHgxPzogbnVtYmVyLFxuICAgIHkxPzogbnVtYmVyLFxuICAgIHgyPzogbnVtYmVyLFxuICAgIHkyPzogbnVtYmVyXG4gICkge1xuICAgIHRoaXMudjEgPSBuZXcgVmVjdG9yMih4MSwgeTEpO1xuICAgIHRoaXMudjIgPSBuZXcgVmVjdG9yMih4MiwgeTIpO1xuICB9XG4gIGdldCB4MSgpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnYxLng7XG4gIH1cbiAgZ2V0IHkxKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudjEueTtcbiAgfVxuICBnZXQgeDIoKTogbnVtYmVyIHtcbiAgICByZXR1cm4gdGhpcy52Mi54O1xuICB9XG4gIGdldCB5MigpOiBudW1iZXIge1xuICAgIHJldHVybiB0aGlzLnYyLnk7XG4gIH1cbiAgbGVuKCk6IG51bWJlciB7XG4gICAgcmV0dXJuIHRoaXMudjIuc3ViKHRoaXMudjEpLmxlbigpO1xuICB9XG4gIHBvaW50QXQodDogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCh0KSk7XG4gIH1cbiAgYmVmb3JlKHQ6IG51bWJlcik6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLnYxLmFkZCh0aGlzLnYyLnN1Yih0aGlzLnYxKS5tdWwoLXQgLyB0aGlzLmxlbigpKSk7XG4gIH1cbiAgYWZ0ZXIodDogbnVtYmVyKTogVmVjdG9yMiB7XG4gICAgcmV0dXJuIHRoaXMudjEuYWRkKHRoaXMudjIuc3ViKHRoaXMudjEpLm11bCgodGhpcy5sZW4oKSArIHQpIC8gdGhpcy5sZW4oKSkpO1xuICB9XG4gIGludGVyc2VjdGlvblRpbWVzV2l0aChvdGhlcjogTGluZSk6IFZlY3RvcjIge1xuICAgIHJldHVybiB0aGlzLnYxLmludGVyc2VjdGlvblRpbWVzKHRoaXMudjIsIG90aGVyLnYxLCBvdGhlci52Mik7XG4gIH1cbiAgdXBkYXRlKGR4MSA9IDAsIGR5MSA9IDAsIGR4MiA9IDAsIGR5MiA9IDApOiB2b2lkIHtcbiAgICB0aGlzLnYxLnggKz0gZHgxO1xuICAgIHRoaXMudjEueSArPSBkeTE7XG4gICAgdGhpcy52Mi54ICs9IGR4MjtcbiAgICB0aGlzLnYyLnkgKz0gZHkyO1xuICB9XG59IiwiaW1wb3J0IHsgTGluZSB9IGZyb20gXCIuL2xpbmVcIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XG5cbmV4cG9ydCBjbGFzcyBQb2x5Z29uIHtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgdmVydGljZXM6IFZlY3RvcjJbXSA9IFtdKSB7XG5cbiAgfVxuICBwcml2YXRlIGFyZWFCZXR3ZWVuKGk6IG51bWJlciwgajogbnVtYmVyKTogbnVtYmVyIHtcbiAgICByZXR1cm4gKHRoaXMudmVydGljZXNbal0ueCAtIHRoaXMudmVydGljZXNbaV0ueCkgKiAodGhpcy52ZXJ0aWNlc1tpXS55ICsgdGhpcy52ZXJ0aWNlc1tqXS55KSAvIDI7XG4gIH1cbiAgYXJlYSgpOiBudW1iZXIge1xuICAgIGxldCBhID0gMDtcbiAgICBsZXQgaSA9IHRoaXMudmVydGljZXMubGVuZ3RoIC0gMTtcbiAgICBmb3IgKGxldCBqID0gMDsgaiA8IHRoaXMudmVydGljZXMubGVuZ3RoOyBqKyspIHtcbiAgICAgIGEgKz0gdGhpcy5hcmVhQmV0d2VlbihpLCBqKTtcbiAgICAgIGkgPSBqO1xuICAgIH1cbiAgICByZXR1cm4gYTtcbiAgfVxuICBzaGFyZUVkZ2UodTogVmVjdG9yMiwgdjogVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIGxldCBpID0gdGhpcy52ZXJ0aWNlcy5sZW5ndGggLSAxO1xuICAgIGZvciAobGV0IGogPSAwOyBqIDwgdGhpcy52ZXJ0aWNlcy5sZW5ndGg7IGorKykge1xuICAgICAgaWYgKHRoaXMudmVydGljZXNbaV0uZXF1YWxzKHUpICYmIHRoaXMudmVydGljZXNbal0uZXF1YWxzKHYpKSB7XG4gICAgICAgIHJldHVybiB0cnVlO1xuICAgICAgfVxuICAgICAgaSA9IGo7XG4gICAgfVxuICAgIHJldHVybiBmYWxzZTtcbiAgfVxuICBpbnRlcnNlY3Rpb25XaXRoKGxpbmU6IExpbmUpIHtcbiAgICBcbiAgfVxuICByZXZlcnNlKCk6IHZvaWQge1xuICAgIHRoaXMudmVydGljZXMucmV2ZXJzZSgpO1xuICB9XG4gIHRvU3RyaW5nKCk6IHN0cmluZyB7XG4gICAgcmV0dXJuIGAke3RoaXMudmVydGljZXMubGVuZ3RofSBwb2ludHM6IGAgKyB0aGlzLnZlcnRpY2VzLm1hcCh2ID0+IGAoJHt2LngudG9GaXhlZCgpfSwgJHt2LnkudG9GaXhlZCgpfSlgKS5qb2luKCcsICcpICsgYCAoYXJlYTogJHt0aGlzLmFyZWEoKS50b0ZpeGVkKCl9KWA7XG4gIH1cbn0iLCJpbXBvcnQgeyBQb2xwbG90UmVuZGVyZXIgfSBmcm9tIFwiLi9pbnRlcmZhY2VzL3BvbHBsb3QtcmVuZGVyZXJcIjtcbmltcG9ydCB7IExpbmUgfSBmcm9tIFwiLi9saW5lXCI7XG5pbXBvcnQgeyBQb2x5Z29uIH0gZnJvbSBcIi4vcG9seWdvblwiO1xuaW1wb3J0IHsgVmVjdG9yMiB9IGZyb20gXCIuL3ZlY3RvcjJcIjtcblxuZXhwb3J0IGNsYXNzIFBvbHBsb3Qge1xuICBsaW5lczogTGluZVtdID0gW107XG4gIGludGVyc2VjdGlvblRpbWVzOiBudW1iZXJbXVtdID0gW107XG4gIGludGVyc2VjdGlvblBvaW50czogVmVjdG9yMltdW10gPSBbXTtcbiAgY29uc3RydWN0b3IocmVhZG9ubHkgcmVuZGVyZXI6IFBvbHBsb3RSZW5kZXJlcikge1xuICAgIGxldCBkcmFnZ2VkTGluZTogTGluZTtcbiAgICBsZXQgZHJhZ2dlZFZlY3RvcjI6IFZlY3RvcjI7XG5cbiAgICB0aGlzLnJlbmRlcmVyLnNldE1vdXNlRG93bkhhbmRsZXIoKGV2ZW50LCBjbGlja2VkTGluZSwgY2xpY2tlZFZlY3RvcjIpID0+IHtcbiAgICAgIGRyYWdnZWRMaW5lID0gY2xpY2tlZExpbmUgfHwgbnVsbDtcbiAgICAgIGRyYWdnZWRWZWN0b3IyID0gY2xpY2tlZFZlY3RvcjIgfHwgbnVsbDtcbiAgICAgIGlmICghZHJhZ2dlZExpbmUpIHtcbiAgICAgICAgZHJhZ2dlZExpbmUgPSBuZXcgTGluZShldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZLCBldmVudC5jbGllbnRYLCBldmVudC5jbGllbnRZKTtcbiAgICAgICAgZHJhZ2dlZFZlY3RvcjIgPSBkcmFnZ2VkTGluZS52MjtcbiAgICAgICAgdGhpcy5hZGRMaW5lKGRyYWdnZWRMaW5lKTtcbiAgICAgIH1cbiAgICB9KTtcblxuICAgIGxldCBzZWxlY3RlZExpbmU6IExpbmU7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZVVwSGFuZGxlcigoZXZlbnQsIGNsaWNrZWRMaW5lLCBjbGlja2VkVmVjdG9yMikgPT4ge1xuICAgICAgaWYgKGNsaWNrZWRMaW5lKSB7XG4gICAgICAgIGlmIChzZWxlY3RlZExpbmUgJiYgc2VsZWN0ZWRMaW5lICE9PSBjbGlja2VkTGluZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUoc2VsZWN0ZWRMaW5lLCBjbGlja2VkTGluZSA9PT0gaG92ZXJlZExpbmUsIGZhbHNlKTtcbiAgICAgICAgfVxuICAgICAgICBzZWxlY3RlZExpbmUgPSBjbGlja2VkTGluZTtcbiAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3TGluZShzZWxlY3RlZExpbmUsIGNsaWNrZWRMaW5lID09PSBob3ZlcmVkTGluZSwgdHJ1ZSk7XG4gICAgICB9IGVsc2UgaWYgKHNlbGVjdGVkTGluZSkge1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKHNlbGVjdGVkTGluZSwgY2xpY2tlZExpbmUgPT09IGhvdmVyZWRMaW5lLCBmYWxzZSk7XG4gICAgICB9XG4gICAgICBkcmFnZ2VkTGluZSA9IG51bGw7XG4gICAgICBkcmFnZ2VkVmVjdG9yMiA9IG51bGw7XG4gICAgfSk7XG5cbiAgICBsZXQgaG92ZXJlZExpbmU6IExpbmU7XG4gICAgdGhpcy5yZW5kZXJlci5zZXRNb3VzZU1vdmVIYW5kbGVyKChldmVudCwgY2xpY2tlZExpbmUsIGNsaWNrZWRWZWN0b3IyKSA9PiB7XG4gICAgICBpZiAoY2xpY2tlZExpbmUpIHtcbiAgICAgICAgaWYgKGhvdmVyZWRMaW5lICYmIGhvdmVyZWRMaW5lICE9PSBjbGlja2VkTGluZSkge1xuICAgICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUoaG92ZXJlZExpbmUsIGZhbHNlLCBjbGlja2VkTGluZSA9PT0gc2VsZWN0ZWRMaW5lKTtcbiAgICAgICAgfVxuICAgICAgICBob3ZlcmVkTGluZSA9IGNsaWNrZWRMaW5lO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKGhvdmVyZWRMaW5lLCB0cnVlLCBjbGlja2VkTGluZSA9PT0gc2VsZWN0ZWRMaW5lKTsgXG4gICAgICB9IGVsc2UgaWYgKGhvdmVyZWRMaW5lKSB7XG4gICAgICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUoaG92ZXJlZExpbmUsIGZhbHNlLCBjbGlja2VkTGluZSA9PT0gc2VsZWN0ZWRMaW5lKTtcbiAgICAgICAgaG92ZXJlZExpbmUgPSBudWxsO1xuICAgICAgfVxuICAgICAgaWYgKGRyYWdnZWRMaW5lKSB7XG4gICAgICAgIGlmIChkcmFnZ2VkVmVjdG9yMikge1xuICAgICAgICAgIGRyYWdnZWRWZWN0b3IyLnggPSBldmVudC5jbGllbnRYO1xuICAgICAgICAgIGRyYWdnZWRWZWN0b3IyLnkgPSBldmVudC5jbGllbnRZO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGRyYWdnZWRMaW5lLnVwZGF0ZShldmVudC5tb3ZlbWVudFgsIGV2ZW50Lm1vdmVtZW50WSwgZXZlbnQubW92ZW1lbnRYLCBldmVudC5tb3ZlbWVudFkpO1xuICAgICAgICB9XG4gICAgICAgIHRoaXMudXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoZHJhZ2dlZExpbmUpO1xuICAgICAgICB0aGlzLnJlbmRlcmVyLmRyYXdMaW5lKGRyYWdnZWRMaW5lLCBkcmFnZ2VkTGluZSA9PT0gaG92ZXJlZExpbmUsIGRyYWdnZWRMaW5lID09PSBzZWxlY3RlZExpbmUpO1xuICAgICAgfVxuICAgIH0pO1xuICB9XG4gIGFkZExpbmUobGluZTogTGluZSk6IHZvaWQge1xuICAgIHRoaXMuYWRkSW50ZXJzZWN0aW9uVGltZXMobGluZSk7XG4gICAgdGhpcy5saW5lcy5wdXNoKGxpbmUpO1xuICAgIHRoaXMucmVuZGVyZXIuZHJhd0xpbmUobGluZSwgZmFsc2UsIGZhbHNlKTtcbiAgfVxuICBhZGRJbnRlcnNlY3Rpb25UaW1lcyhcbiAgICBsaW5lOiBMaW5lLFxuICAgIGxpbmVzID0gdGhpcy5saW5lcyxcbiAgICBpbnRlcnNlY3Rpb25UaW1lcyA9IHRoaXMuaW50ZXJzZWN0aW9uVGltZXMsXG4gICAgaW50ZXJzZWN0aW9uUG9pbnRzID0gdGhpcy5pbnRlcnNlY3Rpb25Qb2ludHNcbiAgKTogdm9pZCB7XG4gICAgY29uc3QgbmV3SW50ZXJzZWN0aW9uVGltZXM6IG51bWJlcltdID0gW107XG4gICAgY29uc3QgbmV3SW50ZXJzZWN0aW9uUG9pbnRzOiBWZWN0b3IyW10gPSBbXTtcbiAgICBsZXQgdGltZXM6IFZlY3RvcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgdGltZXMgPSBsaW5lc1tpXS5pbnRlcnNlY3Rpb25UaW1lc1dpdGgobGluZSk7XG4gICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXS5wdXNoKHRpbWVzLngpO1xuICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzW2ldLnB1c2goXG4gICAgICAgIDAgPD0gdGltZXMueCAmJiB0aW1lcy54IDw9IDEgJiYgMCA8PSB0aW1lcy55ICYmIHRpbWVzLnkgPD0gMVxuICAgICAgICAgID8gbGluZXNbaV0udjEuYWRkKGxpbmVzW2ldLnYyLnN1YihsaW5lc1tpXS52MSkubXVsKHRpbWVzLngpKVxuICAgICAgICAgIDogbnVsbFxuICAgICAgKTtcbiAgICAgIG5ld0ludGVyc2VjdGlvblRpbWVzLnB1c2godGltZXMueSk7XG4gICAgICBuZXdJbnRlcnNlY3Rpb25Qb2ludHMucHVzaChudWxsKTtcbiAgICB9XG4gICAgbmV3SW50ZXJzZWN0aW9uVGltZXMucHVzaChOYU4pO1xuICAgIG5ld0ludGVyc2VjdGlvblBvaW50cy5wdXNoKG51bGwpO1xuICAgIGludGVyc2VjdGlvblRpbWVzLnB1c2gobmV3SW50ZXJzZWN0aW9uVGltZXMpO1xuICAgIGludGVyc2VjdGlvblBvaW50cy5wdXNoKG5ld0ludGVyc2VjdGlvblBvaW50cyk7XG4gICAgdGhpcy5yZW5kZXJJbnRlcnNlY3Rpb25zKCk7XG4gIH1cbiAgdXBkYXRlSW50ZXJzZWN0aW9uVGltZXMoXG4gICAgbGluZTogTGluZSxcbiAgICBsaW5lcyA9IHRoaXMubGluZXMsXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzLFxuICAgIGludGVyc2VjdGlvblBvaW50cyA9IHRoaXMuaW50ZXJzZWN0aW9uUG9pbnRzXG4gICk6IHZvaWQge1xuICAgIGNvbnN0IGluZGV4ID0gbGluZXMuaW5kZXhPZihsaW5lKTtcbiAgICBsZXQgdGltZXM6IFZlY3RvcjI7XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBsaW5lcy5sZW5ndGg7IGkrKykge1xuICAgICAgaWYgKGkgIT09IGluZGV4KSB7XG4gICAgICAgIHRpbWVzID0gbGluZXNbaV0uaW50ZXJzZWN0aW9uVGltZXNXaXRoKGxpbmUpO1xuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpXVtpbmRleF0gPSB0aW1lcy54O1xuICAgICAgICBpbnRlcnNlY3Rpb25UaW1lc1tpbmRleF1baV0gPSB0aW1lcy55O1xuICAgICAgICBpZiAoaSA8IGluZGV4KSB7XG4gICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzW2ldW2luZGV4XSA9IDAgPD0gdGltZXMueCAmJiB0aW1lcy54IDw9IDEgJiYgMCA8PSB0aW1lcy55ICYmIHRpbWVzLnkgPD0gMVxuICAgICAgICAgICAgPyBsaW5lc1tpXS52MS5hZGQobGluZXNbaV0udjIuc3ViKGxpbmVzW2ldLnYxKS5tdWwodGltZXMueCkpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgaW50ZXJzZWN0aW9uUG9pbnRzW2luZGV4XVtpXSA9IDAgPD0gdGltZXMueCAmJiB0aW1lcy54IDw9IDEgJiYgMCA8PSB0aW1lcy55ICYmIHRpbWVzLnkgPD0gMVxuICAgICAgICAgICAgPyBsaW5lc1tpXS52MS5hZGQobGluZXNbaV0udjIuc3ViKGxpbmVzW2ldLnYxKS5tdWwodGltZXMueCkpXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5yZW5kZXJJbnRlcnNlY3Rpb25zKCk7XG4gIH1cbiAgcmVuZGVySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLnJlbmRlcmVyLmNsZWFySW50ZXJzZWN0aW9ucygpO1xuICAgIHRoaXMuaW50ZXJzZWN0aW9uUG9pbnRzLmZvckVhY2goaW50ZXJzZWN0aW9uUG9pbnRzID0+IHtcbiAgICAgIGludGVyc2VjdGlvblBvaW50cy5mb3JFYWNoKGludGVyc2VjdGlvblBvaW50ID0+IHtcbiAgICAgICAgaWYgKGludGVyc2VjdGlvblBvaW50KSB7XG4gICAgICAgICAgdGhpcy5yZW5kZXJlci5kcmF3UG9pbnQoaW50ZXJzZWN0aW9uUG9pbnQpO1xuICAgICAgICB9XG4gICAgICB9KTtcbiAgICB9KTtcbiAgICB0aGlzLnJlbmRlcmVyLmNsZWFyUG9seWdvbnMoKTtcbiAgICBjb25zdCBwYXJ0aWFscyA9IHRoaXMuYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcygpO1xuICAgIHRoaXMuYnVpbGRQb2x5Z29uc0Zyb21QYXJ0aWFscyhwYXJ0aWFscylcbiAgICAgIC5mb3JFYWNoKHBvbHlnb24gPT4gdGhpcy5yZW5kZXJlci5kcmF3UG9seWdvbihwb2x5Z29uKSk7XG4gIH1cbiAgdGVzdFNpZGUodTogVmVjdG9yMiwgdjogVmVjdG9yMiwgdzogVmVjdG9yMik6IGJvb2xlYW4ge1xuICAgIHJldHVybiB2LnN1Yih1KS5jcm9zcyh3LnN1Yih1KSkgPiAwO1xuICB9XG4gIHBhcnRpYWxzQXJlQ29ubmVjdGVkKHAxOiBQb2x5Z29uLCBwMjogUG9seWdvbik6IGJvb2xlYW4ge1xuICAgIHJldHVybiBwMS52ZXJ0aWNlc1twMS52ZXJ0aWNlcy5sZW5ndGggLSAyXS5lcXVhbHMocDIudmVydGljZXNbMF0pICYmXG4gICAgICAgICAgIHAxLnZlcnRpY2VzW3AxLnZlcnRpY2VzLmxlbmd0aCAtIDFdLmVxdWFscyhwMi52ZXJ0aWNlc1sxXSk7XG4gIH1cbiAgYnVpbGRQYXJ0aWFsc0Zyb21Qb2ludHMoXG4gICAgaW50ZXJzZWN0aW9uOiBWZWN0b3IyLFxuICAgIHBvaW50czogW1ZlY3RvcjIsIFZlY3RvcjIsIFZlY3RvcjIsIFZlY3RvcjJdLFxuICAgIGxvY2FsTGluZTogTGluZSxcbiAgICBmb3JlaWduTGluZTogTGluZSxcbiAgKTogUG9seWdvbltdIHtcbiAgICBjb25zdCBwYXJ0czogW251bWJlciwgbnVtYmVyXVtdID0gW107XG4gICAgZm9yIChsZXQgaSA9IDA7IGkgPCBwb2ludHMubGVuZ3RoOyBpKyspIHtcbiAgICAgIGlmIChwb2ludHNbaV0pIHtcbiAgICAgICAgbGV0IGogPSBpICsgMTtcbiAgICAgICAgaWYgKGogPT09IHBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICBqID0gMDtcbiAgICAgICAgfVxuICAgICAgICB3aGlsZSAoIXBvaW50c1tqXSnCoHtcbiAgICAgICAgICBqKys7XG4gICAgICAgICAgaWYgKGogPT09IHBvaW50cy5sZW5ndGgpIHtcbiAgICAgICAgICAgIGogPSAwO1xuICAgICAgICAgIH1cbiAgICAgICAgfVxuICAgICAgICBpZiAoaSAhPT0gaikge1xuICAgICAgICAgIHBhcnRzLnB1c2goW2ksIGpdKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICByZXR1cm4gcGFydHMubWFwKChbaSwgal0pID0+IHtcbiAgICAgIGNvbnN0IHBvbHlnb24gPSBuZXcgUG9seWdvbihbcG9pbnRzW2ldLCBpbnRlcnNlY3Rpb24sIHBvaW50c1tqXV0pO1xuICAgICAgLy8gaWYgKGkgJSAyID09PSAwIHx8IGogJSAyID09PSAwKSB7XG4gICAgICAvLyAgIGlmIChsb2NhbExpbmUudjIueSA8IGxvY2FsTGluZS52MS55IHx8IGxvY2FsTGluZS52Mi54ID49IGxvY2FsTGluZS52MS54KSB7XG4gICAgICAvLyAgICAgcG9seWdvbi5yZXZlcnNlKCk7XG4gICAgICAvLyAgIH1cbiAgICAgIC8vIH0gZWxzZSBpZiAoZm9yZWlnbkxpbmUudjIueSA8IGZvcmVpZ25MaW5lLnYxLnkgfHwgZm9yZWlnbkxpbmUudjIueCA+PSBmb3JlaWduTGluZS52MS54KSB7XG4gICAgICAvLyAgIHBvbHlnb24ucmV2ZXJzZSgpO1xuICAgICAgLy8gfVxuICAgICAgcmV0dXJuIHBvbHlnb247XG4gICAgfSk7XG4gIH1cbiAgYnVpbGRQYXJ0aWFsc0Zyb21JbnRlcnNlY3Rpb25UaW1lcyhcbiAgICBsaW5lcyA9IHRoaXMubGluZXMsXG4gICAgaW50ZXJzZWN0aW9uVGltZXMgPSB0aGlzLmludGVyc2VjdGlvblRpbWVzXG4gICk6IFBvbHlnb25bXSB7XG4gICAgY29uc29sZS5sb2coJ2J1aWxkUGFydGlhbHNGcm9tSW50ZXJzZWN0aW9uVGltZXMnKTtcbiAgICBjb25zb2xlLmxvZygnLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLS0tLScpO1xuICAgIGNvbnNvbGUubG9nKCdsaW5lcy5sZW5ndGggPSAnLCBsaW5lcy5sZW5ndGgpO1xuICAgIGNvbnN0IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheSA9IGludGVyc2VjdGlvblRpbWVzXG4gICAgICAubWFwKChpbnRlcnNlY3Rpb25UaW1lc0F0SSwgaSkgPT4ge1xuICAgICAgICByZXR1cm4gaW50ZXJzZWN0aW9uVGltZXNBdElcbiAgICAgICAgICAubWFwKChfLCBqKSA9PiBqKVxuICAgICAgICAgIC5maWx0ZXIoaiA9PiB7XG4gICAgICAgICAgICByZXR1cm4gIWlzTmFOKGludGVyc2VjdGlvblRpbWVzQXRJW2pdKSAmJiAwIDw9IGludGVyc2VjdGlvblRpbWVzQXRJW2pdICYmIGludGVyc2VjdGlvblRpbWVzQXRJW2pdIDw9IDEgJiZcbiAgICAgICAgICAgICAgIWlzTmFOKGludGVyc2VjdGlvblRpbWVzW2pdW2ldKSAmJiAwIDw9IGludGVyc2VjdGlvblRpbWVzW2pdW2ldICYmIGludGVyc2VjdGlvblRpbWVzW2pdW2ldIDw9IDE7XG4gICAgICAgICAgfSlcbiAgICAgICAgICAuc29ydCgoaSwgaikgPT4gaW50ZXJzZWN0aW9uVGltZXNBdElbaV0gLSBpbnRlcnNlY3Rpb25UaW1lc0F0SVtqXSk7XG4gICAgICB9KTtcbiAgICBjb25zb2xlLmxvZyhpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXkpO1xuICAgIGNvbnN0IHBhcnRpYWxzOiBQb2x5Z29uW10gPSBbXTtcbiAgICBmb3IgKGxldCBsb2NhbEluZGV4ID0gMDsgbG9jYWxJbmRleCA8IGludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheS5sZW5ndGg7IGxvY2FsSW5kZXgrKykge1xuICAgICAgZm9yIChsZXQgbG9jYWxJbnRlckluZGV4ID0gMDsgbG9jYWxJbnRlckluZGV4IDwgaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdLmxlbmd0aDsgbG9jYWxJbnRlckluZGV4KyspIHtcbiAgICAgICAgY29uc3QgZm9yZWlnbkluZGV4ID0gaW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2xvY2FsSW5kZXhdW2xvY2FsSW50ZXJJbmRleF07XG4gICAgICAgIGlmIChsb2NhbEluZGV4IDwgZm9yZWlnbkluZGV4KSB7XG4gICAgICAgICAgY29uc3QgaW50ZXIgPSBsaW5lc1tsb2NhbEluZGV4XS5wb2ludEF0KGludGVyc2VjdGlvblRpbWVzW2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtsb2NhbEludGVySW5kZXhdXSk7XG4gICAgICAgICAgY29uc3QgcHJldkxvY2FsSW50ZXJJbmRleCA9IGxvY2FsSW50ZXJJbmRleCAtIDE7XG4gICAgICAgICAgY29uc3QgbmV4dExvY2FsSW50ZXJJbmRleCA9IGxvY2FsSW50ZXJJbmRleCArIDE7XG4gICAgICAgICAgY29uc3QgZm9yZWlnbkludGVySW5kZXggPSBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XS5maW5kSW5kZXgoaSA9PiBpID09PSBsb2NhbEluZGV4KTtcbiAgICAgICAgICBjb25zdCBwcmV2Rm9yZWlnbkludGVySW5kZXggPSBmb3JlaWduSW50ZXJJbmRleCAtIDE7XG4gICAgICAgICAgY29uc3QgbmV4dEZvcmVpZ25JbnRlckluZGV4ID0gZm9yZWlnbkludGVySW5kZXggKyAxO1xuICAgICAgICAgIC8vIGNvbnNvbGUubG9nKGBcbiAgICAgICAgICAvLyAgIGxvY2FsSW5kZXg6ICR7bG9jYWxJbmRleH1cbiAgICAgICAgICAvLyAgIGxvY2FsSW50ZXJzZWN0aW9ucyAke2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVxuICAgICAgICAgIC8vICAgICAubWFwKChfLCBpKSA9PiBpID09PSBsb2NhbEludGVySW5kZXggPyBgWyR7X31dYCA6IF8pXG4gICAgICAgICAgLy8gICAgIC5qb2luKCcsICcpfVxuICAgICAgICAgIC8vICAgZm9yZWlnbkluZGV4OiAke2ZvcmVpZ25JbmRleH1cbiAgICAgICAgICAvLyAgIGZvcmVpZ25JbnRlcnNlY3Rpb25zICR7aW50ZXJzZWN0aW9uVGltZXNTb3J0ZWRJbmRleEFycmF5W2ZvcmVpZ25JbmRleF1cbiAgICAgICAgICAvLyAgICAgLm1hcCgoXywgaSkgPT4gaSA9PT0gZm9yZWlnbkludGVySW5kZXggPyBgWyR7X31dYCA6IF8pXG4gICAgICAgICAgLy8gICAgIC5qb2luKCcsICcpfVxuICAgICAgICAgIC8vIGApO1xuICAgICAgICAgIGNvbnN0IHByZXZMb2NhbEludGVyID0gMCA8IGxvY2FsSW50ZXJJbmRleFxuICAgICAgICAgICAgPyBsaW5lc1tsb2NhbEluZGV4XS5wb2ludEF0KGludGVyc2VjdGlvblRpbWVzW2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtwcmV2TG9jYWxJbnRlckluZGV4XV0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgY29uc3QgbmV4dExvY2FsSW50ZXIgPSBsb2NhbEludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbbG9jYWxJbmRleF0ubGVuZ3RoIC0gMVxuICAgICAgICAgICAgPyBsaW5lc1tsb2NhbEluZGV4XS5wb2ludEF0KGludGVyc2VjdGlvblRpbWVzW2xvY2FsSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtsb2NhbEluZGV4XVtuZXh0TG9jYWxJbnRlckluZGV4XV0pXG4gICAgICAgICAgICA6IG51bGw7XG4gICAgICAgICAgY29uc3QgcHJldkZvcmVpZ25JbnRlciA9IDAgPCBmb3JlaWduSW50ZXJJbmRleFxuICAgICAgICAgICAgPyBsaW5lc1tmb3JlaWduSW5kZXhdLnBvaW50QXQoaW50ZXJzZWN0aW9uVGltZXNbZm9yZWlnbkluZGV4XVtpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XVtwcmV2Rm9yZWlnbkludGVySW5kZXhdXSlcbiAgICAgICAgICAgIDogbnVsbDtcbiAgICAgICAgICBjb25zdCBuZXh0Rm9yZWlnbkludGVyID0gZm9yZWlnbkludGVySW5kZXggPCBpbnRlcnNlY3Rpb25UaW1lc1NvcnRlZEluZGV4QXJyYXlbZm9yZWlnbkluZGV4XS5sZW5ndGggLSAxXG4gICAgICAgICAgICA/IGxpbmVzW2ZvcmVpZ25JbmRleF0ucG9pbnRBdChpbnRlcnNlY3Rpb25UaW1lc1tmb3JlaWduSW5kZXhdW2ludGVyc2VjdGlvblRpbWVzU29ydGVkSW5kZXhBcnJheVtmb3JlaWduSW5kZXhdW25leHRGb3JlaWduSW50ZXJJbmRleF1dKVxuICAgICAgICAgICAgOiBudWxsO1xuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgXlxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgIG5leHRGb3JlaWduSW50ZXJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICAvLyAgLS0tcHJldkxvY2FsSW50ZXItLS1pbnRlci0tLW5leHRMb2NhbEludGVyLS0tPlxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgICAgICAgICAgfFxuICAgICAgICAgIC8vICAgICAgICAgICAgICAgIHByZXZGb3JlaWduSW50ZXJcbiAgICAgICAgICAvLyAgICAgICAgICAgICAgICAgICAgICAgIHxcbiAgICAgICAgICBjb25zdCBwYXJ0cyA9IHRoaXMuYnVpbGRQYXJ0aWFsc0Zyb21Qb2ludHMoXG4gICAgICAgICAgICBpbnRlcixcbiAgICAgICAgICAgIFtcbiAgICAgICAgICAgICAgcHJldkxvY2FsSW50ZXIsXG4gICAgICAgICAgICAgIG5leHRGb3JlaWduSW50ZXIsXG4gICAgICAgICAgICAgIG5leHRMb2NhbEludGVyLFxuICAgICAgICAgICAgICBwcmV2Rm9yZWlnbkludGVyXG4gICAgICAgICAgICBdLFxuICAgICAgICAgICAgbGluZXNbbG9jYWxJbmRleF0sXG4gICAgICAgICAgICBsaW5lc1tmb3JlaWduSW5kZXhdXG4gICAgICAgICAgKTtcbiAgICAgICAgICBwYXJ0aWFscy5wdXNoKC4uLnBhcnRzKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgICAvLyBjb25zb2xlLmxvZygncGFydGlhbHMnLCBwYXJ0aWFscyk7XG4gICAgcmV0dXJuIHBhcnRpYWxzO1xuICB9XG4gIGJ1aWxkUG9seWdvbnNGcm9tUGFydGlhbHMocGFydGlhbHM6IFBvbHlnb25bXSk6IFBvbHlnb25bXSB7XG4gICAgY29uc3QgcG9seWdvbnM6IFBvbHlnb25bXSA9IFtdO1xuICAgIGxldCBpID0gMDtcbiAgICB3aGlsZSAoaSA8IHBhcnRpYWxzLmxlbmd0aCkge1xuICAgICAgZm9yIChsZXQgaiA9IDA7IGogPCBwYXJ0aWFscy5sZW5ndGg7IGorKynCoHtcbiAgICAgICAgaWYgKGkgIT09IGopIHtcbiAgICAgICAgICBpZiAodGhpcy5wYXJ0aWFsc0FyZUNvbm5lY3RlZChwYXJ0aWFsc1tpXSwgcGFydGlhbHNbal0pKSB7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXG4gICAgICAgICAgICAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9LFxuICAgICAgICAgICAgICBwYXJ0aWFsc1tqXTogJHtwYXJ0aWFsc1tqXS50b1N0cmluZygpfSxcbiAgICAgICAgICAgIGApO1xuICAgICAgICAgICAgcGFydGlhbHNbaV0udmVydGljZXMuc3BsaWNlKC0yLCAyLCAuLi5wYXJ0aWFsc1tqXS52ZXJ0aWNlcyk7XG4gICAgICAgICAgICBjb25zb2xlLmxvZyhgXG4gICAgICAgICAgICAgIHBhcnRpYWxzW2ldOiAke3BhcnRpYWxzW2ldLnRvU3RyaW5nKCl9IFtORVddLFxuICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaiwgMSk7XG4gICAgICAgICAgICBpZiAoaiA8IGkpIHtcbiAgICAgICAgICAgICAgaS0tO1xuICAgICAgICAgICAgfVxuICAgICAgICAgICAgaWYgKHRoaXMucGFydGlhbHNBcmVDb25uZWN0ZWQocGFydGlhbHNbaV0sIHBhcnRpYWxzW2ldKSkge1xuICAgICAgICAgICAgICBwYXJ0aWFsc1tpXS52ZXJ0aWNlcy5zcGxpY2UoMCwgMik7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcbiAgICAgICAgICAgICAgICBuZXcgY29ubmVjdGVkIHBvbHlnb246ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICAgIHBvbHlnb25zLnB1c2gocGFydGlhbHNbaV0pO1xuICAgICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9IGVsc2UgaWYgKHBhcnRpYWxzW2ldLnZlcnRpY2VzWzBdLmVxdWFscyhwYXJ0aWFsc1tpXS52ZXJ0aWNlc1twYXJ0aWFsc1tpXS52ZXJ0aWNlcy5sZW5ndGggLSAxXSkpIHtcbiAgICAgICAgICAgICAgcGFydGlhbHNbaV0udmVydGljZXMucG9wKCk7XG4gICAgICAgICAgICAgIGNvbnNvbGUubG9nKGBcbiAgICAgICAgICAgICAgICBuZXcgY2xvc2VkIHBvbHlnb246ICR7cGFydGlhbHNbaV0udG9TdHJpbmcoKX1cbiAgICAgICAgICAgICAgYCk7XG4gICAgICAgICAgICAgIHBvbHlnb25zLnB1c2gocGFydGlhbHNbaV0pO1xuICAgICAgICAgICAgICBwYXJ0aWFscy5zcGxpY2UoaSwgMSk7XG4gICAgICAgICAgICB9XG4gICAgICAgICAgICBpID0gLTE7XG4gICAgICAgICAgICBicmVhaztcbiAgICAgICAgICB9XG4gICAgICAgIH1cbiAgICAgIH1cbiAgICAgIGkrKztcbiAgICB9XG4gICAgLy8gY29uc29sZS5sb2coJ2luY29tcGxldGUgcG9seWdvbnMnKTtcbiAgICAvLyBwYXJ0aWFscy5tYXAocCA9PiBjb25zb2xlLmxvZyhwLnRvU3RyaW5nKCkpKTtcbiAgICBjb25zb2xlLmxvZygncG9seWdvbnMnLCBwb2x5Z29ucyk7XG4gICAgcG9seWdvbnMubWFwKHAgPT4gY29uc29sZS5sb2cocC50b1N0cmluZygpKSk7XG4gICAgcmV0dXJuIHBvbHlnb25zO1xuICB9XG59XG5cbi8vIGNvbnN0IGxpbmVzOiBMaW5lW10gPSBbXTtcbi8vIGNvbnN0IGlUaW1lczogbnVtYmVyW11bXSA9IFtdO1xuLy8gY29uc3QgaVBvaW50czogVmVjdG9yMltdW10gPSBbXTtcbi8vIFtcbi8vICAgWzMwMCwgMzAwLCA2MDAsIDYwMF0sXG4vLyAgIFszMDAsIDYwMCwgNjAwLCAzMDBdLFxuLy8gICBbNDAwLCAzMDAsIDMwMCwgNDAwXSxcbi8vICAgWzUwMCwgNjAwLCA2MDAsIDQwMF0sXG4vLyAgIFszMDAsIDUwMCwgNDAwLCA2MDBdLFxuLy8gICBbNTAwLCA2MDAsIDYwMCwgNDAwXSxcbi8vIF0uZm9yRWFjaCgoW3gxLCB5MSwgeDIsIHkyXSkgPT4ge1xuLy8gICB0aGlzLmFkZEludGVyc2VjdGlvblRpbWVzKGwxLCBsaW5lcywgaVRpbWVzLCBpUG9pbnRzKTtcbi8vICAgbGluZXMucHVzaChsMSk7XG4vLyB9KTtcbi8vIGNvbnN0IHBhcnRpYWxzID0gdGhpcy5idWlsZFBhcnRpYWxzRnJvbUludGVyc2VjdGlvblRpbWVzKGxpbmVzLCBpVGltZXMpO1xuLy8gY29uc29sZS5sb2cocGFydGlhbHMpOyIsImltcG9ydCB7IENsaWNrSGFuZGxlciwgUG9scGxvdFJlbmRlcmVyIH0gZnJvbSBcIi4vaW50ZXJmYWNlcy9wb2xwbG90LXJlbmRlcmVyXCI7XG5pbXBvcnQgeyBMaW5lIH0gZnJvbSBcIi4vbGluZVwiO1xuaW1wb3J0IHsgUG9seWdvbiB9IGZyb20gXCIuL3BvbHlnb25cIjtcbmltcG9ydCB7IFZlY3RvcjIgfSBmcm9tIFwiLi92ZWN0b3IyXCI7XG5cbmNvbnN0IGdUZW1wbGF0ZSA9IGRvY3VtZW50LmNyZWF0ZUVsZW1lbnROUygnaHR0cDovL3d3dy53My5vcmcvMjAwMC9zdmcnLCAnZycpO1xuZ1RlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2JsYWNrJyk7XG5nVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMC40cHgnKTtcblxuY29uc3QgbGluZVRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdsaW5lJyk7XG5saW5lVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2UtZGFzaGFycmF5JywgJzEwLCA0LCAxLCA0Jyk7XG5cbmNvbnN0IGFuY2hvclRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG5hbmNob3JUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoXG4gICdkJyxcbiAgJ00gMCwgMCcgK1xuICAnQSAxMCwgMTAsIDAsIDAsIDAsIC01LCAtNScgKyBcbiAgJ0EgMTAsIDEwLCAwLCAxLCAxLCA1LCAtNScgK1xuICAnQSAxMCwgMTAsIDAsIDAsIDAsIDAsIDAnXG4pO1xuYW5jaG9yVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ3doaXRlJyk7XG5cbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChsaW5lVGVtcGxhdGUpO1xuZ1RlbXBsYXRlLmFwcGVuZENoaWxkKGFuY2hvclRlbXBsYXRlKTtcbmdUZW1wbGF0ZS5hcHBlbmRDaGlsZChhbmNob3JUZW1wbGF0ZS5jbG9uZU5vZGUoKSk7XG5cbmNvbnN0IHBvaW50VGVtcGxhdGUgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2NpcmNsZScpO1xucG9pbnRUZW1wbGF0ZS5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnZ3JlZW4nKTtcbnBvaW50VGVtcGxhdGUuc2V0QXR0cmlidXRlKCdyJywgJzMnKTtcblxuY29uc3QgcG9seWdvblRlbXBsYXRlID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdwYXRoJyk7XG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsJywgJ2dyZWVuJyk7XG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdmaWxsLW9wYWNpdHknLCAnMC43Jyk7XG5wb2x5Z29uVGVtcGxhdGUuc2V0QXR0cmlidXRlKCdzdHJva2Utd2lkdGgnLCAnMycpO1xucG9seWdvblRlbXBsYXRlLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJ2dyZXknKTtcblxuZXhwb3J0IGNsYXNzIFN2Z1JlbmRlcmVyIGltcGxlbWVudHMgUG9scGxvdFJlbmRlcmVyIHtcbiAgcmVhZG9ubHkgc3ZnID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdzdmcnKTtcbiAgcHJpdmF0ZSBpbnRlcnNlY3Rpb25Db250YWluZXIgPSBkb2N1bWVudC5jcmVhdGVFbGVtZW50TlMoJ2h0dHA6Ly93d3cudzMub3JnLzIwMDAvc3ZnJywgJ2cnKTtcbiAgcHJpdmF0ZSBwb2x5Z29uQ29udGFpbmVyID0gZG9jdW1lbnQuY3JlYXRlRWxlbWVudE5TKCdodHRwOi8vd3d3LnczLm9yZy8yMDAwL3N2ZycsICdnJyk7XG4gIHByaXZhdGUgc3ZnR0J5TGluZSA9IG5ldyBNYXA8TGluZSwgU1ZHR0VsZW1lbnQ+KCk7XG4gIHByaXZhdGUgbGluZUJ5U3ZnRyA9IG5ldyBNYXA8U1ZHR0VsZW1lbnQsIExpbmU+KCk7XG4gIHByaXZhdGUgb25Nb3VzZURvd246IChldmVudDogTW91c2VFdmVudCkgPT4gYW55O1xuICBwcml2YXRlIG9uTW91c2VVcDogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiBhbnk7XG4gIHByaXZhdGUgb25Nb3VzZU1vdmU6IChldmVudDogTW91c2VFdmVudCkgPT4gYW55O1xuICBjb25zdHJ1Y3RvcigpIHtcbiAgICB0aGlzLnN2Zy5hcHBlbmRDaGlsZCh0aGlzLmludGVyc2VjdGlvbkNvbnRhaW5lcik7XG4gICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQodGhpcy5wb2x5Z29uQ29udGFpbmVyKTtcbiAgfVxuICBjbGlja0hhbmRsZXJXcmFwcGVyKGNsaWNrSGFuZGxlcjogQ2xpY2tIYW5kbGVyKTogKGV2ZW50OiBNb3VzZUV2ZW50KSA9PiBhbnkge1xuICAgIHJldHVybiBldmVudCA9PiB7XG4gICAgICBjb25zdCBlbGVtZW50QXQgPSBkb2N1bWVudC5lbGVtZW50RnJvbVBvaW50KGV2ZW50LmNsaWVudFgsIGV2ZW50LmNsaWVudFkpO1xuICAgICAgY29uc3QgbGluZSA9IHRoaXMubGluZUJ5U3ZnRy5nZXQoZWxlbWVudEF0LnBhcmVudE5vZGUgYXMgU1ZHR0VsZW1lbnQpO1xuICAgICAgaWYgKGVsZW1lbnRBdCBpbnN0YW5jZW9mIFNWR1BhdGhFbGVtZW50ICYmIGVsZW1lbnRBdC5wYXJlbnROb2RlICE9PSB0aGlzLnBvbHlnb25Db250YWluZXIpIHtcbiAgICAgICAgaWYgKGVsZW1lbnRBdC5wYXJlbnROb2RlLmNoaWxkcmVuWzFdID09PSBlbGVtZW50QXQpIHtcbiAgICAgICAgICBjbGlja0hhbmRsZXIoZXZlbnQsIGxpbmUsIGxpbmUudjEpO1xuICAgICAgICB9IGVsc2Uge1xuICAgICAgICAgIGNsaWNrSGFuZGxlcihldmVudCwgbGluZSwgbGluZS52Mik7XG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSBpZiAoZWxlbWVudEF0IGluc3RhbmNlb2YgU1ZHTGluZUVsZW1lbnQpIHtcbiAgICAgICAgY2xpY2tIYW5kbGVyKGV2ZW50LCBsaW5lKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNsaWNrSGFuZGxlcihldmVudCk7XG4gICAgICB9XG4gICAgfTtcbiAgfVxuICBzZXRNb3VzZURvd25IYW5kbGVyKGNsaWNrSGFuZGxlcjogQ2xpY2tIYW5kbGVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub25Nb3VzZURvd24pIHtcbiAgICAgIHRoaXMuc3ZnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlZG93bicsIHRoaXMub25Nb3VzZURvd24pO1xuICAgIH1cbiAgICB0aGlzLm9uTW91c2VEb3duID0gdGhpcy5jbGlja0hhbmRsZXJXcmFwcGVyKGNsaWNrSGFuZGxlcik7XG4gICAgdGhpcy5zdmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vkb3duJywgdGhpcy5vbk1vdXNlRG93bik7XG4gIH1cbiAgc2V0TW91c2VVcEhhbmRsZXIoY2xpY2tIYW5kbGVyOiBDbGlja0hhbmRsZXIpOiB2b2lkIHtcbiAgICBpZiAodGhpcy5vbk1vdXNlVXApIHtcbiAgICAgIHRoaXMuc3ZnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNldXAnLCB0aGlzLm9uTW91c2VVcCk7XG4gICAgfVxuICAgIHRoaXMub25Nb3VzZVVwID0gdGhpcy5jbGlja0hhbmRsZXJXcmFwcGVyKGNsaWNrSGFuZGxlcik7XG4gICAgdGhpcy5zdmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2V1cCcsIHRoaXMub25Nb3VzZVVwKTtcbiAgfVxuICBzZXRNb3VzZU1vdmVIYW5kbGVyKGNsaWNrSGFuZGxlcjogQ2xpY2tIYW5kbGVyKTogdm9pZCB7XG4gICAgaWYgKHRoaXMub25Nb3VzZU1vdmUpIHtcbiAgICAgIHRoaXMuc3ZnLnJlbW92ZUV2ZW50TGlzdGVuZXIoJ21vdXNlbW92ZScsIHRoaXMub25Nb3VzZU1vdmUpO1xuICAgIH1cbiAgICB0aGlzLm9uTW91c2VNb3ZlID0gdGhpcy5jbGlja0hhbmRsZXJXcmFwcGVyKGNsaWNrSGFuZGxlcik7XG4gICAgdGhpcy5zdmcuYWRkRXZlbnRMaXN0ZW5lcignbW91c2Vtb3ZlJywgdGhpcy5vbk1vdXNlTW92ZSk7XG4gIH1cbiAgZHJhd0xpbmUobGluZTogTGluZSwgaXNIb3ZlcmVkID0gZmFsc2UsIGlzU2VsZWN0ZWQgPSBmYWxzZSk6IHZvaWQge1xuICAgIGxldCBzdmdHOiBTVkdHRWxlbWVudDtcbiAgICBpZiAoIXRoaXMuc3ZnR0J5TGluZS5oYXMobGluZSkpIHtcbiAgICAgIHN2Z0cgPSBnVGVtcGxhdGUuY2xvbmVOb2RlKHRydWUpIGFzIFNWR0dFbGVtZW50O1xuICAgICAgdGhpcy5zdmcuYXBwZW5kQ2hpbGQoc3ZnRyk7XG4gICAgICB0aGlzLnN2Z0dCeUxpbmUuc2V0KGxpbmUsIHN2Z0cpO1xuICAgICAgdGhpcy5saW5lQnlTdmdHLnNldChzdmdHLCBsaW5lKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ZnRyA9IHRoaXMuc3ZnR0J5TGluZS5nZXQobGluZSk7XG4gICAgfVxuICAgIGNvbnN0IHN2Z0xpbmUgPSBzdmdHLmNoaWxkcmVuWzBdIGFzIFNWR0xpbmVFbGVtZW50O1xuICAgIGNvbnN0IHN2Z1BhdGhBbmNob3JTdGFydCA9IHN2Z0cuY2hpbGRyZW5bMV0gYXMgU1ZHUGF0aEVsZW1lbnQ7XG4gICAgY29uc3Qgc3ZnUGF0aEFuY2hvckVuZCA9IHN2Z0cuY2hpbGRyZW5bMl0gYXMgU1ZHUGF0aEVsZW1lbnQ7XG4gICAgY29uc3QgeDEgPSBsaW5lLngxLnRvRml4ZWQoKTtcbiAgICBjb25zdCB5MSA9IGxpbmUueTEudG9GaXhlZCgpO1xuICAgIGNvbnN0IHgyID0gbGluZS54Mi50b0ZpeGVkKCk7XG4gICAgY29uc3QgeTIgPSBsaW5lLnkyLnRvRml4ZWQoKTtcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneDEnLCB4MSk7XG4gICAgc3ZnTGluZS5zZXRBdHRyaWJ1dGUoJ3kxJywgeTEpO1xuICAgIHN2Z0xpbmUuc2V0QXR0cmlidXRlKCd4MicsIHgyKTtcbiAgICBzdmdMaW5lLnNldEF0dHJpYnV0ZSgneTInLCB5Mik7XG4gICAgaWYgKGlzSG92ZXJlZCkge1xuICAgICAgc3ZnRy5zZXRBdHRyaWJ1dGUoJ3N0cm9rZS13aWR0aCcsICcwLjhweCcpO1xuICAgIH0gZWxzZSB7XG4gICAgICBzdmdHLnNldEF0dHJpYnV0ZSgnc3Ryb2tlLXdpZHRoJywgJzAuNHB4Jyk7XG4gICAgfVxuICAgIGlmIChpc1NlbGVjdGVkKSB7XG4gICAgICBzdmdHLnNldEF0dHJpYnV0ZSgnc3Ryb2tlJywgJyMxOWExOTQnKTtcbiAgICB9IGVsc2Uge1xuICAgICAgc3ZnRy5zZXRBdHRyaWJ1dGUoJ3N0cm9rZScsICdibGFjaycpO1xuICAgIH1cbiAgICBjb25zdCBhbmdsZSA9IDE4MCAqIChsaW5lLnYyLnN1YihsaW5lLnYxKS5hbmdsZSgpIC0gTWF0aC5QSSAvIDIpIC8gTWF0aC5QSTtcbiAgICBzdmdQYXRoQW5jaG9yU3RhcnQuc2V0QXR0cmlidXRlKCd0cmFuc2Zvcm0nLCBgdHJhbnNsYXRlKCR7eDF9LCAke3kxfSkgcm90YXRlKCR7aXNOYU4oYW5nbGUpID8gMCA6IGFuZ2xlfSlgKTtcbiAgICBzdmdQYXRoQW5jaG9yRW5kLnNldEF0dHJpYnV0ZSgndHJhbnNmb3JtJywgYHRyYW5zbGF0ZSgke3gyfSwgJHt5Mn0pIHJvdGF0ZSgke2lzTmFOKGFuZ2xlKSA/IDAgOiAxODAgKyBhbmdsZX0pYCk7XG4gIH1cbiAgZXJhc2VMaW5lKGxpbmU6IExpbmUpOiB2b2lkIHtcbiAgICBjb25zdCBzdmdHID0gdGhpcy5zdmdHQnlMaW5lLmdldChsaW5lKTtcbiAgICBpZiAoc3ZnRykge1xuICAgICAgdGhpcy5zdmcucmVtb3ZlQ2hpbGQoc3ZnRyk7XG4gICAgICB0aGlzLnN2Z0dCeUxpbmUuZGVsZXRlKGxpbmUpO1xuICAgIH1cbiAgfVxuICBkcmF3UG9pbnQocG9pbnQ6IFZlY3RvcjIpOiB2b2lkIHtcbiAgICBjb25zdCBzdmdDaXJjbGUgPSBwb2ludFRlbXBsYXRlLmNsb25lTm9kZSgpIGFzIFNWR0NpcmNsZUVsZW1lbnQ7XG4gICAgc3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3gnLCBwb2ludC54LnRvRml4ZWQoKSk7XG4gICAgc3ZnQ2lyY2xlLnNldEF0dHJpYnV0ZSgnY3knLCBwb2ludC55LnRvRml4ZWQoKSk7XG4gICAgdGhpcy5pbnRlcnNlY3Rpb25Db250YWluZXIuYXBwZW5kQ2hpbGQoc3ZnQ2lyY2xlKTtcbiAgfVxuICBwcml2YXRlIGNsZWFyQ29udGFpbmVyKGNvbnRhaW5lcjogU1ZHR0VsZW1lbnQpOiB2b2lkIHtcbiAgICB3aGlsZSAoY29udGFpbmVyLmZpcnN0Q2hpbGQpIHtcbiAgICAgIGNvbnRhaW5lci5yZW1vdmVDaGlsZChjb250YWluZXIuZmlyc3RDaGlsZCk7XG4gICAgfVxuICB9XG4gIGNsZWFySW50ZXJzZWN0aW9ucygpOiB2b2lkIHtcbiAgICB0aGlzLmNsZWFyQ29udGFpbmVyKHRoaXMuaW50ZXJzZWN0aW9uQ29udGFpbmVyKTtcbiAgfVxuICBkcmF3UG9seWdvbihwb2x5Z29uOiBQb2x5Z29uKTogdm9pZCB7XG4gICAgY29uc3Qgc3ZnUGF0aCA9IHBvbHlnb25UZW1wbGF0ZS5jbG9uZU5vZGUoKSBhcyBTVkdQYXRoRWxlbWVudDtcbiAgICBzdmdQYXRoLnNldEF0dHJpYnV0ZSgnZCcsICdNICcgKyBwb2x5Z29uLnZlcnRpY2VzLm1hcCh2ID0+IGAke3YueC50b0ZpeGVkKCl9ICR7di55LnRvRml4ZWQoKX1gKS5qb2luKCcgTCAnKSArICdaJyk7XG4gICAgc3ZnUGF0aC5zZXRBdHRyaWJ1dGUoJ2ZpbGwnLCAnIycgKyAoTWF0aC5mbG9vcigoMTY3NzcyMTUgLSAxZTUpICogTWF0aC5yYW5kb20oKSkgKyAxZTUpLnRvU3RyaW5nKDE2KSk7XG4gICAgdGhpcy5wb2x5Z29uQ29udGFpbmVyLmFwcGVuZENoaWxkKHN2Z1BhdGgpO1xuICB9XG4gIGNsZWFyUG9seWdvbnMoKTogdm9pZCB7XG4gICAgdGhpcy5jbGVhckNvbnRhaW5lcih0aGlzLnBvbHlnb25Db250YWluZXIpO1xuICB9XG59IiwiaW1wb3J0IHsgUG9scGxvdCB9IGZyb20gXCIuL3BvbHBsb3RcIjtcbmltcG9ydCB7IFN2Z1JlbmRlcmVyIH0gZnJvbSBcIi4vc3ZnLXJlbmRlcmVyXCI7XG5cbmNvbnN0IHN2Z1JlbmRlcmVyID0gbmV3IFN2Z1JlbmRlcmVyKCk7XG5jb25zdCBwb2xwbG90ID0gbmV3IFBvbHBsb3Qoc3ZnUmVuZGVyZXIpO1xuY29uc3QgYm9keSA9IGRvY3VtZW50LnF1ZXJ5U2VsZWN0b3IoJ2JvZHknKTtcbmJvZHkuYXBwZW5kQ2hpbGQoc3ZnUmVuZGVyZXIuc3ZnKTsiXSwic291cmNlUm9vdCI6IiJ9